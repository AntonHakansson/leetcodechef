#+startup: show2levels

* Atcoder 1200-1599 problems
:PROPERTIES:
:EXPORT_OPTIONS: toc:nil
:EXPORT_LATEX_HEADER_EXTRA: \usepackage[hmargin=2.5cm, vmargin=3cm, bindingoffset=0.5cm]{geometry} \parindent{0}
:END:

- https://kenkoooo.com/atcoder#/table/
- [[https://www.dropbox.com/sh/nx3tnilzqz7df8a/AAAYlTq2tiEHl5hsESw6-yfLa?dl=0][Atcoder test cases]]
- Fetched problems [2024-07-12 Fri].

** [[https://atcoder.jp/contests/abc360/tasks/abc360_e][E - Random Swaps of Balls]]

Score : \(450\) points

*** Problem Statement

There are \(N - 1\) white balls and one black ball. These \(N\) balls are arranged in a row, with the black ball initially at the leftmost position.

Takahashi will perform the following operation exactly \(K\) times.

- Choose an integer uniformly at random between \(1\) and \(N\), inclusive, twice. Let \(a\) and \(b\) the chosen integers. If \(a \neq b\), swap the \(a\)-th and \(b\)-th balls from the left.

After \(K\) operations, let the black ball be at the \(x\)-th position from the left. Find the expected value of \(x\), modulo \(998244353\).

What is expected value modulo \(998244353\)?

It can be proved that the sought expected value will always be rational. Additionally, under the constraints of this problem, it can be proved that if this value is expressed as an irreducible fraction \(\frac{P}{Q}\), then \(Q \not \equiv 0 \pmod{998244353}\). Therefore, there exists a unique integer \(R\) such that \(R \times Q \equiv P \pmod{998244353}, 0 \leq R < 998244353\). Report this \(R\).

*** Constraints

- \(1 \leq N \leq 998244352\)
- \(1 \leq K \leq 10^5\)

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
#+end_example

*** Output

Print the answer in one line.

--------------

*** Sample Input 1

#+begin_example
2 1
#+end_example

*** Sample Output 1

#+begin_example
499122178
#+end_example

After one operation, the probabilities that the black ball is at the 1st position and the 2nd position from the left are both \(\displaystyle \frac{1}{2}\). Thus, the expected value is \(\displaystyle \frac{3}{2}\).

--------------

*** Sample Input 2

#+begin_example
3 2
#+end_example

*** Sample Output 2

#+begin_example
554580198
#+end_example

--------------

*** Sample Input 3

#+begin_example
4 4
#+end_example

*** Sample Output 3

#+begin_example
592707587
#+end_example


** [[https://atcoder.jp/contests/abc359/tasks/abc359_d][D - Avoid K Palindrome]]

Score : \(450\) points

*** Problem Statement

You are given a string \(S\) of length \(N\) consisting of characters =A=, =B=, and =?=.

You are also given a positive integer \(K\). A string \(T\) consisting of =A= and =B= is considered a *good string* if it satisfies the following condition:

- *No* contiguous substring of length \(K\) in \(T\) is a palindrome.

Let \(q\) be the number of =?= characters in \(S\). There are \(2^q\) strings that can be obtained by replacing each =?= in \(S\) with either =A= or =B=. Find how many of these strings are good strings.

The count can be very large, so find it modulo \(998244353\).

*** Constraints

- \(2 \leq K \leq N \leq 1000\)
- \(K \leq 10\)
- \(S\) is a string consisting of =A=, =B=, and =?=.
- The length of \(S\) is \(N\).
- \(N\) and \(K\) are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(S\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
7 4
AB?A?BA
#+end_example

*** Sample Output 1

#+begin_example
1
#+end_example

The given string has two =?=s. There are four strings obtained by replacing each =?= with =A= or =B=:

- =ABAAABA=
- =ABAABBA=
- =ABBAABA=
- =ABBABBA=

Among these, the last three contain the contiguous substring =ABBA= of length 4, which is a palindrome, and thus are not good strings.

Therefore, you should print =1=.

--------------

*** Sample Input 2

#+begin_example
40 7
????????????????????????????????????????
#+end_example

*** Sample Output 2

#+begin_example
116295436
#+end_example

Ensure to find the number of good strings modulo \(998244353\).

--------------

*** Sample Input 3

#+begin_example
15 5
ABABA??????????
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

It is possible that there is no way to replace the =?=s to obtain a good string.

--------------

*** Sample Input 4

#+begin_example
40 8
?A?B??B?B?AA?A?B??B?A???B?BB?B???BA??BAA
#+end_example

*** Sample Output 4

#+begin_example
259240
#+end_example


** [[https://atcoder.jp/contests/abc359/tasks/abc359_e][E - Water Tank]]

Score : \(500\) points

*** Story


#+begin_quote
There is a long water tank with boards of different heights placed at equal intervals. Takahashi wants to know the time at which water reaches each section separated by the boards when water is poured from one end of the tank.

#+end_quote

*** Problem Statement

You are given a sequence of positive integers of length \(N\): \(H=(H _ 1,H _ 2,\dotsc,H _ N)\).

There is a sequence of non-negative integers of length \(N+1\): \(A=(A _ 0,A _ 1,\dotsc,A _ N)\). Initially, \(A _ 0=A _ 1=\dotsb=A _ N=0\).

Perform the following operations repeatedly on \(A\):

1. Increase the value of \(A _ 0\) by \(1\).
2. For \(i=1,2,\ldots,N\) in this order, perform the following operation:
   - If \(A _ {i-1}\gt A _ i\) and \(A _ {i-1}\gt H _ i\), decrease the value of \(A _ {i-1}\) by 1 and increase the value of \(A _ i\) by \(1\).

For each \(i=1,2,\ldots,N\), find the number of operations before \(A _ i>0\) holds for the first time.

*** Constraints

- \(1\leq N\leq2\times10 ^ 5\)
- \(1\leq H _ i\leq10 ^ 9\ (1\leq i\leq N)\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(H _ 1\) \(H _ 2\) \(\dotsc\) \(H _ N\)
#+end_example

*** Output

Print the answers for \(i=1,2,\ldots,N\) in a single line, separated by spaces.

--------------

*** Sample Input 1

#+begin_example
5
3 1 4 1 5
#+end_example

*** Sample Output 1

#+begin_example
4 5 13 14 26
#+end_example

The first five operations go as follows.

Here, each row corresponds to one operation, with the leftmost column representing step 1 and the others representing step 2.

[[https://img.atcoder.jp/abc359/570466412318b9902952c408a421be0c.png]]

From this diagram, \(A _ 1\gt0\) holds for the first time after the 4th operation, and \(A _ 2\gt0\) holds for the first time after the 5th operation.

Similarly, the answers for \(A _ 3, A _ 4, A _ 5\) are \(13, 14, 26\), respectively.

Therefore, you should print =4 5 13 14 26=.

--------------

*** Sample Input 2

#+begin_example
6
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
#+end_example

*** Sample Output 2

#+begin_example
1000000001 2000000001 3000000001 4000000001 5000000001 6000000001
#+end_example

Note that the values to be output may not fit within a \(32\)-bit integer.

--------------

*** Sample Input 3

#+begin_example
15
748 169 586 329 972 529 432 519 408 587 138 249 656 114 632
#+end_example

*** Sample Output 3

#+begin_example
749 918 1921 2250 4861 5390 5822 6428 6836 7796 7934 8294 10109 10223 11373
#+end_example


** [[https://atcoder.jp/contests/abc358/tasks/abc358_e][E - Alphabet Tiles]]

Score : \(475\) points

*** Problem Statement


#+begin_quote
AtCoder Land sells tiles with English letters written on them. Takahashi is thinking of making a nameplate by arranging these tiles in a row.

#+end_quote

Find the number, modulo \(998244353\), of strings consisting of uppercase English letters with a length between \(1\) and \(K\), inclusive, that satisfy the following conditions:

- For every integer \(i\) satisfying \(1 \leq i \leq 26\), the following holds:
  - Let \(a_i\) be the \(i\)-th uppercase English letter in lexicographical order. For example, \(a_1 = \) =A=, \(a_5 = \) =E=, \(a_{26} = \) =Z=.
  - The number of occurrences of \(a_i\) in the string is between \(0\) and \(C_i\), inclusive.

*** Constraints

- \(1 \leq K \leq 1000\)
- \(0 \leq C_i \leq 1000\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(K\)
\(C_1\) \(C_2\) \(\ldots\) \(C_{26}\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
2
2 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
#+end_example

*** Sample Output 1

#+begin_example
10
#+end_example

The \(10\) strings that satisfy the conditions are =A=, =B=, =C=, =AA=, =AB=, =AC=, =BA=, =BC=, =CA=, =CB=.

--------------

*** Sample Input 2

#+begin_example
358
1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
#+end_example

*** Sample Output 2

#+begin_example
64
#+end_example

--------------

*** Sample Input 3

#+begin_example
1000
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000
#+end_example

*** Sample Output 3

#+begin_example
270274035
#+end_example


** [[https://atcoder.jp/contests/abc357/tasks/abc357_e][E - Reachability in Functional Graph]]

Score : \(450\) points

*** Problem Statement

There is a directed graph with \(N\) vertices numbered \(1\) to \(N\) and \(N\) edges.\\
The out-degree of every vertex is \(1\), and the edge from vertex \(i\) points to vertex \(a_i\).\\
Count the number of pairs of vertices \((u, v)\) such that vertex \(v\) is reachable from vertex \(u\).

Here, vertex \(v\) is reachable from vertex \(u\) if there exists a sequence of vertices \(w_0, w_1, \dots, w_K\) of length \(K+1\) that satisfies the following conditions. In particular, if \(u = v\), it is always reachable.

- \(w_0 = u\).
- \(w_K = v\).
- For every \(0 \leq i \lt K\), there is an edge from vertex \(w_i\) to vertex \(w_{i+1}\).

*** Constraints

- \(1 \leq N \leq 2 \times 10^5\)
- \(1 \leq a_i \leq N\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(a_1\) \(a_2\) \(\dots\) \(a_N\)
#+end_example

*** Output

Print the number of pairs of vertices \((u, v)\) such that vertex \(v\) is reachable from vertex \(u\).

--------------

*** Sample Input 1

#+begin_example
4
2 1 1 4
#+end_example

*** Sample Output 1

#+begin_example
8
#+end_example

The vertices reachable from vertex \(1\) are vertices \(1, 2\).\\
The vertices reachable from vertex \(2\) are vertices \(1, 2\).\\
The vertices reachable from vertex \(3\) are vertices \(1, 2, 3\).\\
The vertex reachable from vertex \(4\) is vertex \(4\).\\
Therefore, the number of pairs of vertices \((u, v)\) such that vertex \(v\) is reachable from vertex \(u\) is \(8\).\\
Note that the edge from vertex \(4\) is a self-loop, that is, it points to vertex \(4\) itself.

--------------

*** Sample Input 2

#+begin_example
5
2 4 3 1 2
#+end_example

*** Sample Output 2

#+begin_example
14
#+end_example

--------------

*** Sample Input 3

#+begin_example
10
6 10 4 1 5 9 8 6 5 1
#+end_example

*** Sample Output 3

#+begin_example
41
#+end_example


** [[https://atcoder.jp/contests/abc356/tasks/abc356_e][E - Max/Min]]

Score : \(475\) points

*** Problem Statement

You are given a sequence \(A=(A_1,\ldots,A_N)\) of length \(N\).

Find \(\displaystyle \sum_{i=1}^{N-1}\sum_{j=i+1}^{N}\left\lfloor\frac{\max(A_i,A_j)}{\min(A_i,A_j)}\right\rfloor\).

Here, \(\lfloor x \rfloor\) represents the greatest integer not greater than \(x\). For example, \(\lfloor 3.14 \rfloor=3\) and \(\lfloor 2 \rfloor=2\).

*** Constraints

- \(2 \leq N \leq 2\times 10^5\)
- \(1 \leq A_i \leq 10^6\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(\ldots\) \(A_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3
3 1 4
#+end_example

*** Sample Output 1

#+begin_example
8
#+end_example

The sought value is

\(\left\lfloor\frac{\max(3,1)}{\min(3,1)}\right\rfloor + \left\lfloor\frac{\max(3,4)}{\min(3,4)}\right\rfloor + \left\lfloor\frac{\max(1,4)}{\min(1,4)}\right\rfloor\\ =\left\lfloor\frac{3}{1}\right\rfloor + \left\lfloor\frac{4}{3}\right\rfloor + \left\lfloor\frac{4}{1}\right\rfloor\\ =3+1+4\\ =8\).

--------------

*** Sample Input 2

#+begin_example
6
2 7 1 8 2 8
#+end_example

*** Sample Output 2

#+begin_example
53
#+end_example

--------------

*** Sample Input 3

#+begin_example
12
3 31 314 3141 31415 314159 2 27 271 2718 27182 271828
#+end_example

*** Sample Output 3

#+begin_example
592622
#+end_example


** [[https://atcoder.jp/contests/abc354/tasks/abc354_d][D - AtCoder Wallpaper]]

Score : \(450\) points

*** Problem Statement

The pattern of AtCoder's wallpaper can be represented on the \(xy\)-plane as follows:

- The plane is divided by the following three types of lines:
  - \(x = n\) (where \(n\) is an integer)
  - \(y = n\) (where \(n\) is an even number)
  - \(x + y = n\) (where \(n\) is an even number)
- Each region is painted black or white. Any two regions adjacent along one of these lines are painted in different colors.
- The region containing \((0.5, 0.5)\) is painted black.

The following figure shows a part of the pattern.

[[https://img.atcoder.jp/abc354/d_img1_34zxoiv2.png]]

You are given integers \(A, B, C, D\). Consider a rectangle whose sides are parallel to the \(x\)- and \(y\)-axes, with its bottom-left vertex at \((A, B)\) and its top-right vertex at \((C, D)\). Calculate the area of the regions painted black inside this rectangle, and print twice that area.

It can be proved that the output value will be an integer.

*** Constraints

- \(-10^9 \leq A, B, C, D \leq 10^9\)
- \(A < C\) and \(B < D\).
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(A\) \(B\) \(C\) \(D\)
#+end_example

*** Output

Print the answer on a single line.

--------------

*** Sample Input 1

#+begin_example
0 0 3 3
#+end_example

*** Sample Output 1

#+begin_example
10
#+end_example

We are to find the area of the black-painted region inside the following square:

[[https://img.atcoder.jp/abc354/d_img2_zzwqsaaewub.png]]

The area is \(5\), so print twice that value: \(10\).

--------------

*** Sample Input 2

#+begin_example
-1 -2 1 3
#+end_example

*** Sample Output 2

#+begin_example
11
#+end_example

The area is \(5.5\), which is not an integer, but the output value is an integer.

--------------

*** Sample Input 3

#+begin_example
-1000000000 -1000000000 1000000000 1000000000
#+end_example

*** Sample Output 3

#+begin_example
4000000000000000000
#+end_example

This is the case with the largest rectangle, where the output still fits into a 64-bit signed integer.


** [[https://atcoder.jp/contests/abc354/tasks/abc354_e][E - Remove Pairs]]

Score : \(475\) points

*** Problem Statement

Takahashi and Aoki are playing a game using \(N\) cards. The front side of the \(i\)-th card has \(A_i\) written on it, and the back side has \(B_i\) written on it. Initially, the \(N\) cards are laid out on the table. With Takahashi going first, the two players take turns performing the following operation:

- Choose a pair of cards from the table such that either the numbers on their front sides are the same or the numbers on their back sides are the same, and remove these two cards from the table. If no such pair of cards exists, the player cannot perform the operation.

The player who is first to be unable to perform the operation loses, and the other player wins. Determine who wins if both players play optimally.

*** Constraints

- \(1 \leq N \leq 18\)
- \(1 \leq A_i, B_i \leq 10^9\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(B_1\)
\(A_2\) \(B_2\)
\(\vdots\)
\(A_N\) \(B_N\)
#+end_example

*** Output

Print =Takahashi= if Takahashi wins when both players play optimally, and =Aoki= otherwise.

--------------

*** Sample Input 1

#+begin_example
5
1 9
2 5
4 9
1 4
2 5
#+end_example

*** Sample Output 1

#+begin_example
Aoki
#+end_example

If Takahashi first removes

- the first and third cards: Aoki can win by removing the second and fifth cards.

- the first and fourth cards: Aoki can win by removing the second and fifth cards.

- the second and fifth cards: Aoki can win by removing the first and third cards.

These are the only three pairs of cards Takahashi can remove in his first move, and Aoki can win in all cases. Therefore, the answer is Aoki.

--------------

*** Sample Input 2

#+begin_example
9
3 2
1 7
4 1
1 8
5 2
9 8
2 1
6 8
5 2
#+end_example

*** Sample Output 2

#+begin_example
Takahashi
#+end_example


** [[https://atcoder.jp/contests/abc353/tasks/abc353_e][E - Yet Another Sigma Problem]]

Score: \(500\) points

*** Problem Statement

For strings \(x\) and \(y\), define \(f(x, y)\) as follows:

- \(f(x, y)\) is the length of the longest common prefix of \(x\) and \(y\).

You are given \(N\) strings \((S_1, \ldots, S_N)\) consisting of lowercase English letters. Find the value of the following expression:

\(\displaystyle \sum_{i=1}^{N-1}\sum_{j=i+1}^N f(S_i,S_j)\).

\\

*** Constraints

- \(2 \leq N \leq 3\times 10^5\)
- \(S_i\) is a string consisting of lowercase English letters.
- \(1 \leq |S_i|\)
- \(|S_1|+|S_2|+\ldots+|S_N|\leq 3\times 10^5\)
- All input numbers are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(S_1\) \(\ldots\) \(S_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3
ab abc arc
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

- \(f(S_1,S_2)=2\)
- \(f(S_1,S_3)=1\)
- \(f(S_2,S_3)=1\)

Thus, the answer is \(f(S_1,S_2) + f(S_1,S_3) + f(S_2,S_3) = 4\).

--------------

*** Sample Input 2

#+begin_example
11
ab bb aaa bba baba babb aaaba aabbb a a b
#+end_example

*** Sample Output 2

#+begin_example
32
#+end_example


** [[https://atcoder.jp/contests/abc351/tasks/abc351_f][F - Double Sum]]

Score: \(500\) points

*** Problem Statement

You are given an integer sequence \(A = (A_1, A_2, \dots, A_N)\).\\
Calculate the following expression:

\(\displaystyle \sum_{i=1}^N \sum_{j=i+1}^N \max(A_j - A_i, 0)\)

\\

The constraints guarantee that the answer is less than \(2^{63}\).

*** Constraints

- \(2 \leq N \leq 4 \times 10^5\)
- \(0 \leq A_i \leq 10^8\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
#+end_example

*** Output

Print the value of the expression.

--------------

*** Sample Input 1

#+begin_example
3
2 5 3
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

For \((i, j) = (1, 2)\), we have \(\max(A_j - A_i, 0) = \max(3, 0) = 3\).\\
For \((i, j) = (1, 3)\), we have \(\max(A_j - A_i, 0) = \max(1, 0) = 1\).\\
For \((i, j) = (2, 3)\), we have \(\max(A_j - A_i, 0) = \max(-2, 0) = 0\).\\
Adding these together gives \(3 + 1 + 0 = 4\), which is the answer.

--------------

*** Sample Input 2

#+begin_example
10
5 9 3 0 4 8 7 5 4 0
#+end_example

*** Sample Output 2

#+begin_example
58
#+end_example


** [[https://atcoder.jp/contests/abc350/tasks/abc350_e][E - Toward 0]]

Score: \(450\) points

*** Problem Statement

You are given an integer \(N\). You can perform the following two types of operations:

- Pay \(X\) yen to replace \(N\) with \(\displaystyle\left\lfloor\frac{N}{A}\right\rfloor\).
- Pay \(Y\) yen to roll a die (dice) that shows an integer between \(1\) and \(6\), inclusive, with equal probability. Let \(b\) be the outcome of the die, and replace \(N\) with \(\displaystyle\left\lfloor\frac{N}{b}\right\rfloor\).

Here, \(\lfloor s \rfloor\) denotes the greatest integer less than or equal to \(s\). For example, \(\lfloor 3 \rfloor=3\) and \(\lfloor 2.5 \rfloor=2\).

Determine the minimum expected cost paid before \(N\) becomes \(0\) when optimally choosing operations.\\
The outcome of the die in each operation is independent of other rolls, and the choice of operation can be made after observing the results of the previous operations.

*** Constraints

- \(1 \leq N \leq 10^{18}\)
- \(2 \leq A \leq 6\)
- \(1 \leq X, Y \leq 10^9\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(A\) \(X\) \(Y\)
#+end_example

*** Output

Print the answer.\\
Your output will be considered correct if the absolute or relative error from the true answer is at most \(10^{-6}\).

--------------

*** Sample Input 1

#+begin_example
3 2 10 20
#+end_example

*** Sample Output 1

#+begin_example
20.000000000000000
#+end_example

The available operations are as follows:

- Pay \(10\) yen. Replace \(N\) with \(\displaystyle\left\lfloor\frac{N}{2}\right\rfloor\).
- Pay \(20\) yen. Roll a die. Let \(b\) be the outcome, and replace \(N\) with \(\displaystyle\left\lfloor\frac{N}{b}\right\rfloor\).

The optimal strategy is to perform the first operation twice.

--------------

*** Sample Input 2

#+begin_example
3 2 20 20
#+end_example

*** Sample Output 2

#+begin_example
32.000000000000000
#+end_example

The available operations are as follows:

- Pay \(20\) yen. Replace \(N\) with \(\displaystyle\left\lfloor\frac{N}{2}\right\rfloor\).
- Pay \(20\) yen. Roll a die. Let \(b\) be the outcome, and replace \(N\) with \(\displaystyle\left\lfloor\frac{N}{b}\right\rfloor\).

The optimal strategy is as follows:

- First, perform the second operation to roll the die.
  - If the outcome is \(4\) or greater, then \(N\) becomes \(0\).
  - If the outcome is \(2\) or \(3\), then \(N\) becomes \(1\). Now, perform the first operation to make \(N = 0\).
  - If the outcome is \(1\), restart from the beginning.

--------------

*** Sample Input 3

#+begin_example
314159265358979323 4 223606797 173205080
#+end_example

*** Sample Output 3

#+begin_example
6418410657.7408381
#+end_example


** [[https://atcoder.jp/contests/abc349/tasks/abc349_e][E - Weighted Tic-Tac-Toe]]

Score: \(450\) points

*** Problem Statement

There is a \(3 \times 3\) grid. Let \((i, j)\) denote the cell at the \(i\)-th row from the top and \(j\)-th column from the left \((1 \leq i, j \leq 3)\). Cell \((i, j)\) contains an integer \(A_{i,j}\). It is guaranteed that \(\sum_{i=1}^3 \sum_{j=1}^3 A_{i,j}\) is odd. Additionally, all cells are initially painted white.

Takahashi and Aoki will play a game using this grid. Takahashi goes first, and they take turns performing the following operation:

- Choose a cell \((i, j)\) \((1\leq i, j \leq 3)\) that is still painted white (it can be shown that such a cell always exists at the time of the operation). The player performing the operation scores \(A_{i,j}\) points. Then, if the player is Takahashi, he paints the cell \((i, j)\) red; if the player is Aoki, he paints it blue.

After each operation, the following checks are made:

- Check if there are three consecutive cells painted the same color (red or blue) in any row, column, or diagonal. If such a sequence exists, the game ends immediately, and the player whose color forms the sequence wins.
- Check if there are white cells left. If no white cells remain, the game ends, and the player with the higher total score wins.

It can be shown that the game will always end after a finite number of moves, and either Takahashi or Aoki will win. Determine which player wins if both play optimally for victory.

*** Constraints

- \(|A_{i,j}| \leq 10^9\)
- \(\sum_{i=1}^3 \sum_{j=1}^3 A_{i,j}\) is odd.
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(A_{1,1}\) \(A_{1,2}\) \(A_{1,3}\)
\(A_{2,1}\) \(A_{2,2}\) \(A_{2,3}\)
\(A_{3,1}\) \(A_{3,2}\) \(A_{3,3}\)
#+end_example

*** Output

If Takahashi wins, print =Takahashi=; if Aoki wins, print =Aoki=.

--------------

*** Sample Input 1

#+begin_example
0 0 0
0 1 0
0 0 0
#+end_example

*** Sample Output 1

#+begin_example
Takahashi
#+end_example

If Takahashi chooses cell \((2,2)\) in his first move, no matter how Aoki plays afterward, Takahashi can always act to prevent three consecutive blue cells. If three consecutive red cells are formed, Takahashi wins. If the game ends without three consecutive red cells, at that point, Takahashi has scored \(1\) point and Aoki \(0\) points, so Takahashi wins either way.

--------------

*** Sample Input 2

#+begin_example
-1 1 0
-4 -2 -5
-4 -1 -5
#+end_example

*** Sample Output 2

#+begin_example
Aoki
#+end_example


** [[https://atcoder.jp/contests/abc348/tasks/abc348_e][E - Minimize Sum of Distances]]

Score: \(475\) points

*** Problem Statement

You are given a tree with \(N\) vertices. The vertices are numbered \(1\) to \(N\), and the \(i\)-th edge connects vertices \(A_i\) and \(B_i\).

You are also given a sequence of positive integers \(C = (C_1, C_2, \ldots ,C_N)\) of length \(N\). Let \(d(a, b)\) be the number of edges between vertices \(a\) and \(b\), and for \(x = 1, 2, \ldots, N\), let \(\displaystyle f(x) = \sum_{i=1}^{N} (C_i \times d(x, i))\). Find \(\displaystyle \min_{1 \leq v \leq N} f(v)\).

*** Constraints

- \(1 \leq N \leq 10^5\)
- \(1 \leq A_i, B_i \leq N\)
- The given graph is a tree.
- \(1 \leq C_i \leq 10^9\)

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(B_1\)
\(A_2\) \(B_2\)
\(\vdots\)
\(A_{N - 1}\) \(B_{N - 1}\)
\(C_1\) \(C_2\) \(\cdots\) \(C_N\)
#+end_example

*** Output

Print the answer in one line.

--------------

*** Sample Input 1

#+begin_example
4
1 2
1 3
2 4
1 1 1 2
#+end_example

*** Sample Output 1

#+begin_example
5
#+end_example

For example, consider calculating \(f(1)\). We have \(d(1, 1) = 0, d(1, 2) = 1, d(1, 3) = 1, d(1, 4) = 2\).\\
Thus, \(f(1) = 0 \times 1 + 1 \times 1 + 1 \times 1 + 2 \times 2 = 6\).

Similarly, \(f(2) = 5, f(3) = 9, f(4) = 6\). Since \(f(2)\) is the minimum, print =5=.

--------------

*** Sample Input 2

#+begin_example
2
2 1
1 1000000000
#+end_example

*** Sample Output 2

#+begin_example
1
#+end_example

\(f(2) = 1\), which is the minimum.

--------------

*** Sample Input 3

#+begin_example
7
7 3
2 5
2 4
3 1
3 6
2 1
2 7 6 9 3 4 6
#+end_example

*** Sample Output 3

#+begin_example
56
#+end_example


** [[https://atcoder.jp/contests/abc345/tasks/abc345_d][D - Tiling]]

Score: \(450\) points

*** Problem Statement

There is a grid of \(H\) rows and \(W\) columns, each cell having a side length of \(1\), and we have \(N\) tiles.\\
The \(i\)-th tile (\(1\leq i\leq N\)) is a rectangle of size \(A_i\times B_i\).\\
Determine whether it is possible to place the tiles on the grid so that all of the following conditions are satisfied:

- Every cell is covered by exactly one tile.
- It is fine to have unused tiles.
- The tiles *may be rotated or flipped when placed*. However, each tile must be aligned with the edges of the cells without extending outside the grid.

*** Constraints

- \(1\leq N\leq 7\)
- \(1 \leq H,W \leq 10\)
- \(1\leq A_i,B_i\leq 10\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(H\) \(W\)
\(A_1\) \(B_1\)
\(A_2\) \(B_2\)
\(\ldots\)
\(A_N\) \(B_N\)
#+end_example

*** Output

If it is possible to place the tiles on the grid so that all of the conditions in the problem statement are satisfied, print =Yes=; otherwise, print =No=.

--------------

*** Sample Input 1

#+begin_example
5 5 5
1 1
3 3
4 4
2 3
2 5
#+end_example

*** Sample Output 1

#+begin_example
Yes
#+end_example

Placing the \(2\)-nd, \(4\)-th, and \(5\)-th tiles as shown below covers every cell of the grid by exactly one tile.

[[https://img.atcoder.jp/abc345/0a0f2829d0485013deabba0103dbd906.png]]

Hence, print =Yes=.

--------------

*** Sample Input 2

#+begin_example
1 1 2
2 3
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

It is impossible to place the tile without letting it extend outside the grid.\\
Hence, print =No=.

--------------

*** Sample Input 3

#+begin_example
1 2 2
1 1
#+end_example

*** Sample Output 3

#+begin_example
No
#+end_example

It is impossible to cover all cells with the tile.\\
Hence, print =No=.

--------------

*** Sample Input 4

#+begin_example
5 3 3
1 1
2 2
2 2
2 2
2 2
#+end_example

*** Sample Output 4

#+begin_example
No
#+end_example

Note that each cell must be covered by exactly one tile.


** [[https://atcoder.jp/contests/abc343/tasks/abc343_f][F - Second Largest Query]]

Score: \(525\) points

*** Problem Statement

You are given a sequence \(A = (A_1, A_2, \ldots, A_N)\) of length \(N\).

Process \(Q\) queries in the order they are given. Each query is of one of the following two types:

- Type \(1\): Given in the form =1 p x=. Change the value of \(A_p\) to \(x\).
- Type \(2\): Given in the form =2 l r=. print the *number of occurrences* of the second largest value in \((A_l, A_{l+1}, \ldots, A_r)\). More precisely, print the number of integers \(i\) satisfying \(l \leq i \leq r\) such that there is exactly one distinct value greater than \(A_i\) among \(A_l, A_{l+1}, \ldots, A_r\).

*** Constraints

- \(1 \leq N, Q \leq 2 \times 10^5\)
- \(1 \leq A_i \leq 10^9\)
- For type-\(1\) queries, \(1 \leq p \leq N\).
- For type-\(1\) queries, \(1 \leq x \leq 10^9\).
- For type-\(2\) queries, \(1 \leq l \leq r \leq N\).
- There is at least one type-\(2\) query.
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(Q\)
\(A_1\) \(A_2\) \(\ldots\) \(A_N\)
\(\text{query}_{1}\)
\(\vdots\)
\(\text{query}_{Q}\)
#+end_example

Here, \(\text{query}_{i}\) is the \(i\)-th query and given in one of the following formats:

#+begin_example
\(1\) \(p\) \(x\)
#+end_example

#+begin_example
\(2\) \(l\) \(r\)
#+end_example

*** Output

Let \(q\) be the number of type-\(2\) queries. Print \(q\) lines. The \(i\)-th line should contain the response to the \(i\)-th type-\(2\) query.

--------------

*** Sample Input 1

#+begin_example
5 4
3 3 1 4 5
2 1 3
2 5 5
1 3 3
2 2 4
#+end_example

*** Sample Output 1

#+begin_example
1
0
2
#+end_example

Initially, \(A = (3, 3, 1, 4, 5)\).

For the first query, the second largest value in \((3, 3, 1)\) is \(1\), which appears once in \(3, 3, 1\), so print \(1\).

For the second query, there is no second largest value in \((5)\), so print \(0\).

The third query makes \(A = (3, 3, 3, 4, 5)\).

For the fourth query, the second largest value in \((3, 3, 4)\), is \(3\), which appears twice in \(3, 3, 4\), so print \(2\).

--------------

*** Sample Input 2

#+begin_example
1 1
1000000000
2 1 1
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

--------------

*** Sample Input 3

#+begin_example
8 9
2 4 4 3 9 1 1 2
1 5 4
2 7 7
2 2 6
1 4 4
2 2 5
2 2 7
1 1 1
1 8 1
2 1 8
#+end_example

*** Sample Output 3

#+begin_example
0
1
0
2
4
#+end_example


** [[https://atcoder.jp/contests/abc342/tasks/abc342_e][E - Last Train]]

Score: \(450\) points

*** Problem Statement

In the country of AtCoder, there are \(N\) stations: station \(1\), station \(2\), \(\ldots\), station \(N\).

You are given \(M\) pieces of information about trains in the country. The \(i\)-th piece of information \((1\leq i\leq M)\) is represented by a tuple of six positive integers \((l _ i,d _ i,k _ i,c _ i,A _ i,B _ i)\), which corresponds to the following information:

- For each \(t=l _ i,l _ i+d _ i,l _ i+2d _ i,\ldots,l _ i+(k _ i-1)d _ i\), there is a train as follows:
  - The train departs from station \(A _ i\) at time \(t\) and arrives at station \(B _ i\) at time \(t+c _ i\).

No trains exist other than those described by this information, and it is impossible to move from one station to another by any means other than by train.\\
Also, assume that the time required for transfers is negligible.

Let \(f(S)\) be the latest time at which one can arrive at station \(N\) from station \(S\).\\
More precisely, \(f(S)\) is defined as the maximum value of \(t\) for which there is a sequence of tuples of four integers \(\big((t _ i,c _ i,A _ i,B _ i)\big) _ {i=1,2,\ldots,k}\) that satisfies all of the following conditions:

- \(t\leq t _ 1\)
- \(A _ 1=S,B _ k=N\)
- \(B _ i=A _ {i+1}\) for all \(1\leq i\lt k\),
- For all \(1\leq i\leq k\), there is a train that departs from station \(A _ i\) at time \(t _ i\) and arrives at station \(B _ i\) at time \(t _ i+c _ i\).
- \(t _ i+c _ i\leq t _ {i+1}\) for all \(1\leq i\lt k\).

If no such \(t\) exists, set \(f(S)=-\infty\).

Find \(f(1),f(2),\ldots,f(N-1)\).

*** Constraints

- \(2\leq N\leq2\times10 ^ 5\)
- \(1\leq M\leq2\times10 ^ 5\)
- \(1\leq l _ i,d _ i,k _ i,c _ i\leq10 ^ 9\ (1\leq i\leq M)\)
- \(1\leq A _ i,B _ i\leq N\ (1\leq i\leq M)\)
- \(A _ i\neq B _ i\ (1\leq i\leq M)\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(l _ 1\) \(d _ 1\) \(k _ 1\) \(c _ 1\) \(A _ 1\) \(B _ 1\)
\(l _ 2\) \(d _ 2\) \(k _ 2\) \(c _ 2\) \(A _ 2\) \(B _ 2\)
\(\vdots\)
\(l _ M\) \(d _ M\) \(k _ M\) \(c _ M\) \(A _ M\) \(B _ M\)
#+end_example

*** Output

Print \(N-1\) lines. The \(k\)-th line should contain \(f(k)\) if \(f(k)\neq-\infty\), and =Unreachable= if \(f(k)=-\infty\).

--------------

*** Sample Input 1

#+begin_example
6 7
10 5 10 3 1 3
13 5 10 2 3 4
15 5 10 7 4 6
3 10 2 4 2 5
7 10 2 3 5 6
5 3 18 2 2 3
6 3 20 4 2 1
#+end_example

*** Sample Output 1

#+begin_example
55
56
58
60
17
#+end_example

The following diagram shows the trains running in the country (information about arrival and departure times is omitted).

[[https://img.atcoder.jp/abc342/c3007f6fd6e6bffff5483312395e51f6.png]]

Consider the latest time at which one can arrive at station \(6\) from station \(2\). As shown in the following diagram, one can arrive at station \(6\) by departing from station \(2\) at time \(56\) and moving as station \(2\rightarrow\) station \(3\rightarrow\) station \(4\rightarrow\) station \(6\).

[[https://img.atcoder.jp/abc342/b6667844f8166458430c27bd93838a76.png]]

It is impossible to depart from station \(2\) after time \(56\) and arrive at station \(6\), so \(f(2)=56\).

--------------

*** Sample Input 2

#+begin_example
5 5
1000000000 1000000000 1000000000 1000000000 1 5
5 9 2 6 2 3
10 4 1 6 2 3
1 1 1 1 3 5
3 1 4 1 5 1
#+end_example

*** Sample Output 2

#+begin_example
1000000000000000000
Unreachable
1
Unreachable
#+end_example

There is a train that departs from station \(1\) at time \(10 ^ {18}\) and arrives at station \(5\) at time \(10 ^ {18}+10 ^ 9\). There are no trains departing from station \(1\) after that time, so \(f(1)=10 ^ {18}\). As seen here, the answer may not fit within a \(32\operatorname{bit}\) integer.

Also, both the second and third pieces of information guarantee that there is a train that departs from station \(2\) at time \(14\) and arrives at station \(3\) at time \(20\). As seen here, some trains may appear in multiple pieces of information.

--------------

*** Sample Input 3

#+begin_example
16 20
4018 9698 2850 3026 8 11
2310 7571 7732 1862 13 14
2440 2121 20 1849 11 16
2560 5115 190 3655 5 16
1936 6664 39 8822 4 16
7597 8325 20 7576 12 5
5396 1088 540 7765 15 1
3226 88 6988 2504 13 5
1838 7490 63 4098 8 3
1456 5042 4 2815 14 7
3762 6803 5054 6994 10 9
9526 6001 61 8025 7 8
5176 6747 107 3403 1 5
2014 5533 2031 8127 8 11
8102 5878 58 9548 9 10
3788 174 3088 5950 3 13
7778 5389 100 9003 10 15
556 9425 9458 109 3 11
5725 7937 10 3282 2 9
6951 7211 8590 1994 15 12
#+end_example

*** Sample Output 3

#+begin_example
720358
77158
540926
255168
969295
Unreachable
369586
466218
343148
541289
42739
165772
618082
16582
591828
#+end_example


** [[https://atcoder.jp/contests/abc341/tasks/abc341_e][E - Alternating String]]

Score: \(450\) points

*** Problem Statement

A string consisting of =0= and =1= is called a *good string* if two consecutive characters in the string are always different.\\
You are given a string \(S\) of length \(N\) consisting of =0= and =1=. \(Q\) queries will be given and must be processed in order.\\
There are two types of queries:

- =1 L R=: Flip each of the \(L\)-th to \(R\)-th characters of \(S\). That is, for each integer \(i\) satisfying \(L\leq i\leq R\), change the \(i\)-th character of \(S\) to =0= if it is =1=, and vice versa.
- =2 L R=: Let \(S'\) be the string of length \((R-L+1)\) obtained by extracting the \(L\)-th to \(R\)-th characters of \(S\) (without changing the order). Print =Yes= if \(S'\) is a good string and =No= otherwise.

*** Constraints

- \(1\leq N, Q\leq 5\times 10^5\)
- \(S\) is a string of length \(N\) consisting of =0= and =1=.
- \(1\leq L\leq R\leq N\) for queries of types \(1\) and \(2\).
- There is at least one query of type \(2\).
- \(N\), \(Q\), \(L\), and \(R\) are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(Q\)
\(S\)
\(query_1\)
\(query_2\)
\(\vdots\)
\(query_Q\)
#+end_example

Each query \(query_i\) \((1\leq i\leq Q)\) is given in the form:

#+begin_example
\(1\) \(L\) \(R\)
#+end_example

or:

#+begin_example
\(2\) \(L\) \(R\)
#+end_example

*** Output

Let \(K\) be the number of queries of type \(2\). Print \(K\) lines.\\
The \(i\)-th line should contain the response to the \(i\)-th query of type \(2\).

--------------

*** Sample Input 1

#+begin_example
5 6
10100
2 1 3
2 1 5
1 1 4
2 1 5
1 3 3
2 2 4
#+end_example

*** Sample Output 1

#+begin_example
Yes
No
Yes
No
#+end_example

Initially, \(S=\)=10100=. When processing the queries in the order they are given, the following occurs:

- For the first query, the string obtained by extracting the \(1\)-st to \(3\)-rd characters of \(S\) is \(S'=\)=101=. This is a good string, so print =Yes=.
- For the second query, the string obtained by extracting the \(1\)-st to \(5\)-th characters of \(S\) is \(S'=\)=10100=. This is not a good string, so print =No=.
- For the third query, flip each of the \(1\)-st to \(4\)-th characters of \(S\). The string \(S\) becomes \(S=\)=01010=.
- For the fourth query, the string obtained by extracting the \(1\)-st to \(5\)-th character of \(S\) is \(S'=\)=01010=. This is a good string, so print =Yes=.
- For the fifth query, flip the \(3\)-rd character of \(S\). The string \(S\) becomes \(S=\)=01110=.
- For the sixth query, the string obtained by extracting the \(2\)-nd to \(4\)-th character of \(S\) is \(S'=\)=111=. This is not a good string, so print =No=.

--------------

*** Sample Input 2

#+begin_example
1 2
1
1 1 1
2 1 1
#+end_example

*** Sample Output 2

#+begin_example
Yes
#+end_example

Note that a string of a single character =0= or =1= satisfies the condition of being a good string.


** [[https://atcoder.jp/contests/abc340/tasks/abc340_f][F - S = 1]]

Score: \(525\) points

*** Problem Statement

You are given integers \(X\) and \(Y\), which satisfy at least one of \(X \neq 0\) and \(Y \neq 0\).\\
Find a pair of integers \((A, B)\) that satisfies all of the following conditions. If no such pair exists, report so.

- \(-10^{18} \leq A, B \leq 10^{18}\)
- The area of the triangle with vertices at points \((0, 0), (X, Y), (A, B)\) on the \(xy\)-plane is \(1\).

*** Constraints

- \(-10^{17} \leq X, Y \leq 10^{17}\)
- \((X, Y) \neq (0, 0)\)
- \(X\) and \(Y\) are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(X\) \(Y\)
#+end_example

*** Output

If there is a pair of integers \((A, B)\) that satisfies the conditions, print it in the following format:

#+begin_example
\(A\) \(B\)
#+end_example

Otherwise, print =-1=.

--------------

*** Sample Input 1

#+begin_example
3 5
#+end_example

*** Sample Output 1

#+begin_example
1 1
#+end_example

The area of the triangle with vertices at points \((0, 0), (3, 5), (1, 1)\) is \(1\). Thus, \((A, B) = (1, 1)\) satisfies the conditions.

--------------

*** Sample Input 2

#+begin_example
-2 0
#+end_example

*** Sample Output 2

#+begin_example
0 1
#+end_example

--------------

*** Sample Input 3

#+begin_example
8752654402832944 -6857065241301125
#+end_example

*** Sample Output 3

#+begin_example
-1
#+end_example


** [[https://atcoder.jp/contests/abc339/tasks/abc339_d][D - Synchronized Players]]

Score: \(400\) points

*** Problem Statement

There is an \(N \times N\) grid, where each cell is either empty or contains an obstacle. Let \((i, j)\) denote the cell at the \(i\)-th row from the top and the \(j\)-th column from the left.

There are also two players on distinct empty cells of the grid. The information about each cell is given as \(N\) strings \(S_1, S_2, \ldots, S_N\) of length \(N\), in the following format:

- If the \(j\)-th character of \(S_i\) is =P=, then \((i, j)\) is an empty cell with a player on it.

- If the \(j\)-th character of \(S_i\) is =.=, then \((i, j)\) is an empty cell without a player.

- If the \(j\)-th character of \(S_i\) is =#=, then \((i, j)\) contains an obstacle.

Find the minimum number of moves required to bring the two players to the same cell by repeating the following operation. If it is impossible to bring the two players to the same cell by repeating the operation, print =-1=.

- Choose one of the four directions: up, down, left, or right. Then, each player attempts to move to the adjacent cell in that direction. Each player moves if the destination cell exists and is empty, and does not move otherwise.

*** Constraints

- \(N\) is an integer between \(2\) and \(60\), inclusive.
- \(S_i\) is a string of length \(N\) consisting of =P=, =.=, and =#=.
- There are exactly two pairs \((i, j)\) where the \(j\)-th character of \(S_i\) is =P=.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(S_1\)
\(S_2\)
\(\vdots\)
\(S_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
5
....#
#..#.
.P...
..P..
....#
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

Let us call the player starting at \((3, 2)\) Player 1 and the player starting at \((4, 3)\) Player 2.

For example, doing the following brings the two players to the same cell in three moves:

- Choose left. Player 1 moves to \((3, 1)\), and Player 2 moves to \((4, 2)\).

- Choose up. Player 1 does not move, and Player 2 moves to \((3, 2)\).

- Choose left. Player 1 does not move, and Player 2 moves to \((3, 1)\).

--------------

*** Sample Input 2

#+begin_example
2
P#
#P
#+end_example

*** Sample Output 2

#+begin_example
-1
#+end_example

--------------

*** Sample Input 3

#+begin_example
10
..........
..........
..........
..........
....P.....
.....P....
..........
..........
..........
..........
#+end_example

*** Sample Output 3

#+begin_example
10
#+end_example


** [[https://atcoder.jp/contests/abc338/tasks/abc338_d][D - Island Tour]]

Score: \(425\) points

*** Problem Statement

The AtCoder Archipelago consists of \(N\) islands connected by \(N\) bridges. The islands are numbered from \(1\) to \(N\), and the \(i\)-th bridge (\(1\leq i\leq N-1\)) connects islands \(i\) and \(i+1\) bidirectionally, while the \(N\)-th bridge connects islands \(N\) and \(1\) bidirectionally. There is no way to travel between islands other than crossing the bridges.

On the islands, a *tour* that starts from island \(X_1\) and visits islands \(X_2, X_3, \dots, X_M\) in order is regularly conducted. The tour may pass through islands other than those being visited, and the total number of times bridges are crossed during the tour is defined as the *length* of the tour.

More precisely, a *tour* is a sequence of \(l+1\) islands \(a_0, a_1, \dots, a_l\) that satisfies all the following conditions, and its *length* is defined as \(l\):

- For all \(j\ (0\leq j\leq l-1)\), islands \(a_j\) and \(a_{j+1}\) are directly connected by a bridge.
- There are some \(0 = y_1 < y_2 < \dots < y_M = l\) such that for all \(k\ (1\leq k\leq M)\), \(a_{y_k} = X_k\).

Due to financial difficulties, the islands will close one bridge to reduce maintenance costs. Determine the minimum possible length of the tour when the bridge to be closed is chosen optimally.

*** Constraints

- \(3\leq N \leq 2\times 10^5\)
- \(2\leq M \leq 2\times 10^5\)
- \(1\leq X_k\leq N\)
- \(X_k\neq X_{k+1}\ (1\leq k\leq M-1)\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(X_1\) \(X_2\) \(\dots\) \(X_M\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
3 3
1 3 2
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

- If the first bridge is closed: By taking the sequence of islands \((a_0, a_1, a_2) = (1, 3, 2)\), it is possible to visit islands \(1, 3, 2\) in order, and a tour of length \(2\) can be conducted. There is no shorter tour.
- If the second bridge is closed: By taking the sequence of islands \((a_0, a_1, a_2, a_3) = (1, 3, 1, 2)\), it is possible to visit islands \(1, 3, 2\) in order, and a tour of length \(3\) can be conducted. There is no shorter tour.
- If the third bridge is closed: By taking the sequence of islands \((a_0, a_1, a_2, a_3) = (1, 2, 3, 2)\), it is possible to visit islands \(1, 3, 2\) in order, and a tour of length \(3\) can be conducted. There is no shorter tour.

Therefore, the minimum possible length of the tour when the bridge to be closed is chosen optimally is \(2\).

The following figure shows, from left to right, the cases when bridges \(1, 2, 3\) are closed, respectively. The circles with numbers represent islands, the lines connecting the circles represent bridges, and the blue arrows represent the shortest tour routes.

[[https://img.atcoder.jp/abc338/ad4a27665d9da939ab495acd3d05181a.png]]

--------------

*** Sample Input 2

#+begin_example
4 5
2 4 2 4 2
#+end_example

*** Sample Output 2

#+begin_example
8
#+end_example

The same island may appear multiple times in \(X_1, X_2, \dots, X_M\).

--------------

*** Sample Input 3

#+begin_example
163054 10
62874 19143 77750 111403 29327 56303 6659 18896 64175 26369
#+end_example

*** Sample Output 3

#+begin_example
390009
#+end_example


** [[https://atcoder.jp/contests/abc338/tasks/abc338_e][E - Chords]]

Score: \(500\) points

*** Problem Statement

There are \(2N\) points placed at equal intervals on a circle, numbered \(1\) to \(2N\) in a clockwise direction starting from a certain point.

There are also \(N\) chords on the circle, with the \(i\)-th chord connecting points \(A_i\) and \(B_i\). It is guaranteed that all the values \(A_1,\dots,A_N,B_1,\dots,B_N\) are distinct.

Determine whether there is an intersection between the chords.

*** Constraints

- \(2\leq N \leq 2\times 10^5\)
- \(1\leq A_i,B_i \leq 2N\)
- \(A_1,\dots,A_N,B_1,\dots,B_N\) are all distinct
- All input values are integers

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(B_1\)
\(A_2\) \(B_2\)
\(\vdots\)
\(A_N\) \(B_N\)
#+end_example

*** Output

If there is an intersection between the chords, print =Yes=; otherwise, print =No=.

--------------

*** Sample Input 1

#+begin_example
3
1 3
4 2
5 6
#+end_example

*** Sample Output 1

#+begin_example
Yes
#+end_example

[[https://img.atcoder.jp/abc338/de1d9dd6cf38caec1c69fe035bdba545.png]]

As shown in the figure, chord \(1\) (the line segment connecting points \(1\) and \(3\)) and chord \(2\) (the line segment connecting points \(4\) and \(2\)) intersect, so print =Yes=.

--------------

*** Sample Input 2

#+begin_example
3
6 1
4 3
2 5
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

[[https://img.atcoder.jp/abc338/1b3b982c8d6ca59f00ca0edd218fb9c4.png]]

As shown in the figure, there is no intersection between the chords, so print =No=.

--------------

*** Sample Input 3

#+begin_example
4
2 4
3 7
8 6
5 1
#+end_example

*** Sample Output 3

#+begin_example
Yes
#+end_example


** [[https://atcoder.jp/contests/abc336/tasks/abc336_e][E - Digit Sum Divisible]]

Score: \(525\) points

*** Problem Statement

The *digit sum* of a positive integer \(n\) is defined as the sum of the digits in the decimal notation of \(n\). For example, the digit sum of \(2024\) is \(2+0+2+4=8\).\\
A positive integer \(n\) is called a *good integer* when \(n\) is divisible by its digit sum. For example, \(2024\) is a good integer because it is divisible by its digit sum of \(8\).\\
You are given a positive integer \(N\). How many good integers are less than or equal to \(N\)?

*** Constraints

- \(1 \leq N \leq 10^{14}\)
- \(N\) is an integer.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
#+end_example

*** Output

Print the number of good integers less than or equal to \(N\).

--------------

*** Sample Input 1

#+begin_example
20
#+end_example

*** Sample Output 1

#+begin_example
13
#+end_example

There are \(13\) good integers less than or equal to \(20\): \(1,2,3,4,5,6,7,8,9,10,12,18,20\).

--------------

*** Sample Input 2

#+begin_example
2024
#+end_example

*** Sample Output 2

#+begin_example
409
#+end_example

--------------

*** Sample Input 3

#+begin_example
9876543210
#+end_example

*** Sample Output 3

#+begin_example
547452239
#+end_example


** [[https://atcoder.jp/contests/abc335/tasks/abc335_e][E - Non-Decreasing Colorful Path]]

Score : \(525\) points

*** Problem Statement

There is a connected undirected graph with \(N\) vertices and \(M\) edges, where the \(i\)-th edge connects vertex \(U_i\) and vertex \(V_i\) bidirectionally.\\
Each vertex has an integer written on it, with integer \(A_v\) written on vertex \(v\).

For a simple path from vertex \(1\) to vertex \(N\) (a path that does not pass through the same vertex multiple times), the score is determined as follows:

- Let \(S\) be the sequence of integers written on the vertices along the path, listed in the order they are visited.
- If \(S\) is not non-decreasing, the score of that path is \(0\).
- Otherwise, the score is the number of distinct integers in \(S\).

Find the path from vertex \(1\) to vertex \(N\) with the highest score among all simple paths and print that score.

What does it mean for \(S\) to be non-decreasing?

A sequence \(S=(S_1,S_2,\dots,S_l)\) of length \(l\) is said to be non-decreasing if and only if \(S_i \le S_{i+1}\) for all integers \(1 \le i < l\).

*** Constraints

- All input values are integers.
- \(2 \le N \le 2 \times 10^5\)
- \(N-1 \le M \le 2 \times 10^5\)
- \(1 \le A_i \le 2 \times 10^5\)
- The graph is connected.
- \(1 \le U_i < V_i \le N\)
- \((U_i,V_i) \neq (U_j,V_j)\) if \(i \neq j\).

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
\(U_1\) \(V_1\)
\(U_2\) \(V_2\)
\(\vdots\)
\(U_M\) \(V_M\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
5 6
10 20 30 40 50
1 2
1 3
2 5
3 4
3 5
4 5
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

The path \(1 \rightarrow 3 \rightarrow 4 \rightarrow 5\) has \(S=(10,30,40,50)\) for a score of \(4\), which is the maximum.

--------------

*** Sample Input 2

#+begin_example
4 5
1 10 11 4
1 2
1 3
2 3
2 4
3 4
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

There is no simple path from vertex \(1\) to vertex \(N\) such that \(S\) is non-decreasing. In this case, the maximum score is \(0\).

--------------

*** Sample Input 3

#+begin_example
10 12
1 2 3 3 4 4 4 6 5 7
1 3
2 9
3 4
5 6
1 2
8 9
4 5
8 10
7 10
4 6
2 8
6 7
#+end_example

*** Sample Output 3

#+begin_example
5
#+end_example


** [[https://atcoder.jp/contests/abc331/tasks/abc331_d][D - Tile Pattern]]

Score : \(450\) points

*** Problem Statement

There is a grid with \(10^9\) by \(10^9\) squares. Let \((i, j)\) denote the square at the \((i + 1)\)-th row from the top and the \((j + 1)\)-th column from the left \((0 \leq i, j \lt 10^9)\). (Note the unusual index assignment.)\\
Each square is black or white. The color of the square \((i, j)\) is represented by a character \(P[i \bmod N][j \bmod N]\), where =B= means black, and =W= means white. Here, \(a \bmod b\) denotes the remainder when \(a\) is divided by \(b\).

Answer \(Q\) queries.\\
Each query gives you four integers \(A, B, C, D\) and asks you to find the number of black squares contained in the rectangular area with \((A, B)\) as the top-left corner and \((C, D)\) as the bottom-right corner.

*** Constraints

- \(1 \leq N \leq 1000\)
- \(P[i][j]\) is =W= or =B=.
- \(1 \leq Q \leq 2 \times 10^5\)
- \(0 \leq A \leq C \lt 10^9\)
- \(0 \leq B \leq D \lt 10^9\)
- \(N, Q, A, B, C, D\) are all integers.

--------------

*** Input

The input is given from Standard Input in the following format. Here, \(\text{query}_i\) is the \(i\)-th query to be processed.

#+begin_example
\(N\) \(Q\)
\(P[0][0]P[0][1]\dots P[0][N-1]\)
\(P[1][0]P[1][1]\dots P[1][N-1]\)
\(\vdots\)
\(P[N-1][0]P[N-1][1]\dots P[N-1][N-1]\)
\(\text{query}_1\)
\(\text{query}_2\)
\(\vdots\)
\(\text{query}_Q\)
#+end_example

Each query is given in the following format:

#+begin_example
\(A\) \(B\) \(C\) \(D\)
#+end_example

*** Output

Follow the instructions in the problem statement and print the answers to the queries, separated by newlines.

--------------

*** Sample Input 1

#+begin_example
3 2
WWB
BBW
WBW
1 2 3 4
0 3 4 5
#+end_example

*** Sample Output 1

#+begin_example
4
7
#+end_example

The figure below illustrates the upper left part of the grid.

[[https://img.atcoder.jp/abc331/2c3ff3c4018817a0839f1fbe0e7c431d.jpg]]

For the first query, the rectangular area with \((1, 2)\) as the top-left corner and \((3, 4)\) as the bottom-right corner, surrounded by the red frame in the figure, contains four black squares.\\
For the second query, the rectangular area with \((0, 3)\) as the top-left corner and \((4, 5)\) as the bottom-right corner, surrounded by the blue frame in the figure, contains seven black squares.

--------------

*** Sample Input 2

#+begin_example
10 5
BBBWWWBBBW
WWWWWBBBWB
BBBWBBWBBB
BBBWWBWWWW
WWWWBWBWBW
WBBWBWBBBB
WWBBBWWBWB
WBWBWWBBBB
WBWBWBBWWW
WWWBWWBWWB
5 21 21 93
35 35 70 43
55 72 61 84
36 33 46 95
0 0 999999999 999999999
#+end_example

*** Sample Output 2

#+begin_example
621
167
44
344
500000000000000000
#+end_example


** [[https://atcoder.jp/contests/abc329/tasks/abc329_e][E - Stamp]]

Score : \(475\) points

*** Problem Statement

You are given two strings: \(S\), which consists of uppercase English letters and has length \(N\), and \(T\), which also consists of uppercase English letters and has length \(M\ (\leq N)\).

There is a string \(X\) of length \(N\) consisting only of the character =#=. Determine whether it is possible to make \(X\) match \(S\) by performing the following operation any number of times:

- Choose \(M\) consecutive characters in \(X\) and replace them with \(T\).

*** Constraints

- \(1 \leq N \leq 2\times 10^5\)
- \(1 \leq M \leq \min(N,\) \(5\)\()\)
- \(S\) is a string consisting of uppercase English letters with length \(N\).
- \(T\) is a string consisting of uppercase English letters with length \(M\).

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(S\)
\(T\)
#+end_example

*** Output

Print =Yes= if it is possible to make \(X\) match \(S\); print =No= otherwise.

--------------

*** Sample Input 1

#+begin_example
7 3
ABCBABC
ABC
#+end_example

*** Sample Output 1

#+begin_example
Yes
#+end_example

Below, let \(X[l:r]\) denote the part from the \(l\)-th through the \(r\)-th character of \(X\).

You can make \(X\) match \(S\) by operating as follows.

1. Replace \(X[3:5]\) with \(T\). \(X\) becomes =##ABC##=.
2. Replace \(X[1:3]\) with \(T\). \(X\) becomes =ABCBC##=.
3. Replace \(X[5:7]\) with \(T\). \(X\) becomes =ABCBABC=.

--------------

*** Sample Input 2

#+begin_example
7 3
ABBCABC
ABC
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

No matter how you operate, it is impossible to make \(X\) match \(S\).

--------------

*** Sample Input 3

#+begin_example
12 2
XYXXYXXYYYXY
XY
#+end_example

*** Sample Output 3

#+begin_example
Yes
#+end_example


** [[https://atcoder.jp/contests/abc329/tasks/abc329_f][F - Colored Ball]]

Score : \(500\) points

*** Problem Statement

There are \(N\) boxes numbered \(1, 2, \ldots, N\). Initially, box \(i\) contains one ball of color \(C_i\).

You are given \(Q\) queries, which you should process in order.

Each query is given by a pair of integers \((a,b)\) and asks you to do the following:

- Move all the balls from box \(a\) to box \(b\), and then print the number of different colors of balls in box \(b\).

Here, the boxes \(a\) and \(b\) may be empty.

*** Constraints

- \(1 \leq N, Q \leq 200000\)
- \(1 \leq C_i \leq N\)
- \(1 \leq a, b \leq N\)
- \(a \neq b\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format, where \(\text{query}_i\) represents the \(i\)-th query:

#+begin_example
\(N\) \(Q\)
\(C_1\) \(C_2\) \(\ldots\) \(C_N\)
\(\text{query}_1\)
\(\text{query}_2\)
\(\vdots\)
\(\text{query}_Q\)
#+end_example

Each query is given in the following format:

#+begin_example
\(a\) \(b\)
#+end_example

*** Output

Print \(Q\) lines. The \(i\)-th line should contain the response to the \(i\)-th query.

--------------

*** Sample Input 1

#+begin_example
6 5
1 1 1 2 2 3
1 2
6 4
5 1
3 6
4 6
#+end_example

*** Sample Output 1

#+begin_example
1
2
1
1
3
#+end_example

- For the first query, move all the balls from box \(1\) to box \(2\). Box \(2\) now contains two balls of color \(1\), so print \(1\).

- For the second query, move all the balls from box \(6\) to box \(4\). Box \(4\) now contains one ball of color \(2\) and one ball of color \(3\), so print \(2\).

- For the third query, move all the balls from box \(5\) to box \(1\). Box \(1\) now contains one ball of color \(2\), so print \(1\).

- For the fourth query, move all the balls from box \(3\) to box \(6\). Box \(6\) now contains one ball of color \(1\), so print \(1\).

- For the fifth query, move all the balls from box \(4\) to box \(6\). Box \(6\) now contains one ball of color \(1\), one ball of color \(2\), and one ball of color \(3\), so print \(3\).

--------------

*** Sample Input 2

#+begin_example
5 3
2 4 2 4 2
3 1
2 5
3 2
#+end_example

*** Sample Output 2

#+begin_example
1
2
0
#+end_example


** [[https://atcoder.jp/contests/abc328/tasks/abc328_f][F - Good Set Query]]

Score : \(525\) points

*** Problem Statement

You are given \(Q\) triples of integers \((a_1, b_1, d_1), (a_2, b_2, d_2), \ldots, (a_Q, b_Q, d_Q)\).

A subset \(S\) of the set \(\lbrace 1, 2, \ldots, Q\rbrace\) is defined to be a *good set* if there exists an integer sequence \((X_1, X_2, \ldots, X_N)\) of length \(N\) that satisfies:

#+begin_quote
\(X_{a_i} - X_{b_i} = d_i\) for all \(i \in S\).

#+end_quote

Starting with \(S\) as an empty set, perform the following operation for \(i = 1, 2, \ldots, Q\) in this order:

#+begin_quote
If \(S \cup \lbrace i \rbrace\) is a good set, then replace \(S\) with \(S \cup \lbrace i \rbrace\).

#+end_quote

Print all elements of the final set \(S\) in *ascending order*.

*** Constraints

- All input values are integers.
- \(1 \leq N, Q \leq 2 \times 10^5\)
- \(1 \leq a_i, b_i \leq N\)
- \(-10^9 \leq d_i \leq 10^9\)

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(Q\)
\(a_1\) \(b_1\) \(d_1\)
\(a_2\) \(b_2\) \(d_2\)
\(\vdots\)
\(a_Q\) \(b_Q\) \(d_Q\)
#+end_example

*** Output

Print the sequence \((s_1, s_2, \ldots, s_k)\) of all elements of the final set \(S\) in *ascending order*, separated by spaces, in the following format:

#+begin_example
\(s_1\) \(s_2\) \(\ldots\) \(s_k\)
#+end_example

--------------

*** Sample Input 1

#+begin_example
3 5
1 2 2
3 2 -3
2 1 -1
3 3 0
1 3 5
#+end_example

*** Sample Output 1

#+begin_example
1 2 4 5
#+end_example

Starting with \(S\) as an empty set, perform the operation described in the problem statement for \(i = 1, 2, 3, 4, 5\) in this order, as follows.

- For \(i = 1\), the set \(S \cup \lbrace i \rbrace = \lbrace 1 \rbrace\) is a good set, because \((X_1, X_2, X_3) = (3, 1, 4)\) satisfies the condition in the problem statement, for example, so replace \(S\) with \(\lbrace 1\rbrace\).
- For \(i = 2\), the set \(S \cup \lbrace i \rbrace = \lbrace 1, 2 \rbrace\) is a good set, because \((X_1, X_2, X_3) = (3, 1, -2)\) satisfies the condition in the problem statement, for example, so replace \(S\) with \(\lbrace 1, 2\rbrace\).
- For \(i = 3\), the set \(S \cup \lbrace i \rbrace = \lbrace 1, 2, 3 \rbrace\) is not a good set.
- For \(i = 4\), the set \(S \cup \lbrace i \rbrace = \lbrace 1, 2, 4 \rbrace\) is a good set, because \((X_1, X_2, X_3) = (3, 1, -2)\) satisfies the condition in the problem statement, for example, so replace \(S\) with \(\lbrace 1, 2, 4\rbrace\).
- For \(i = 5\), the set \(S \cup \lbrace i \rbrace = \lbrace 1, 2, 4, 5 \rbrace\) is a good set, because \((X_1, X_2, X_3) = (3, 1, -2)\) satisfies the condition in the problem statement, for example, so replace \(S\) with \(\lbrace 1, 2, 4, 5\rbrace\).

Therefore, the final set \(S\) is \(\lbrace 1, 2, 4, 5\rbrace\).

--------------

*** Sample Input 2

#+begin_example
200000 1
1 1 1
#+end_example

*** Sample Output 2

#+begin_example
#+end_example

The final set \(S\) is empty.

--------------

*** Sample Input 3

#+begin_example
5 20
4 2 125421359
2 5 -191096267
3 4 -42422908
3 5 -180492387
3 3 174861038
2 3 -82998451
3 4 -134761089
3 1 -57159320
5 2 191096267
2 4 -120557647
4 2 125421359
2 3 142216401
4 5 -96172984
3 5 -108097816
1 5 -50938496
1 2 140157771
5 4 65674908
4 3 35196193
4 4 0
3 4 188711840
#+end_example

*** Sample Output 3

#+begin_example
1 2 3 6 8 9 11 14 15 16 17 19
#+end_example


** [[https://atcoder.jp/contests/abc327/tasks/abc327_e][E - Maximize Rating]]

Score : \(475\) points

*** Problem Statement

Takahashi participated in \(N\) contests and earned a performance \(P_i\) in the \(i\)-th contest.\\
He wants to choose some (at least one) contests from these and maximize his rating calculated from the results of those contests.

Find the maximum possible rating he can achieve by optimally choosing the contests.

Here, Takahashi's rating \(R\) is calculated as the following, where \(k\) is the number of chosen contests and \((Q_1, Q_2, \ldots, Q_k)\) are the performances in the chosen contests *in the order he participated*:

\(\displaystyle R=\frac{\sum_{i=1}^k (0.9)^{k-i}Q_i}{\sum_{i=1}^k (0.9)^{k-i}}-\frac{1200}{\sqrt{k}}.\)

*** Constraints

- \(1\leq N\leq 5000\)
- \(1\leq P_i\leq 5000\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(P_1\) \(P_2\) \(\ldots\) \(P_N\)
#+end_example

*** Output

Print the maximum possible rating that Takahashi can achieve.\\
Your output will be considered correct if the absolute or relative error from the true value is at most \(10^{-6}\).

--------------

*** Sample Input 1

#+begin_example
3
1000 600 1200
#+end_example

*** Sample Output 1

#+begin_example
256.735020470879931
#+end_example

If Takahashi chooses the first and third contests, his rating will be:

\(\displaystyle R=\frac{0.9\times 1000+ 1.0\times 1200}{0.9+1.0}-\frac{1200}{\sqrt{2}}=256.73502...\).

This is the maximum possible rating.

--------------

*** Sample Input 2

#+begin_example
3
600 1000 1200
#+end_example

*** Sample Output 2

#+begin_example
261.423219407873376
#+end_example

The rating is maximized when all the first, second, and third contests are selected.

--------------

*** Sample Input 3

#+begin_example
1
100
#+end_example

*** Sample Output 3

#+begin_example
-1100.000000000000000
#+end_example

The rating can also be negative.


** [[https://atcoder.jp/contests/abc326/tasks/abc326_d][D - ABC Puzzle]]

Score : \(450\) points

*** Problem Statement

You are given an integer \(N\) and strings \(R\) and \(C\) of length \(N\) consisting of =A=, =B=, and =C=. Solve the following problem.

There is a \(N \times N\) grid. All cells are initially empty.\\
You can write at most one character from =A=, =B=, and =C= in each cell. (You can also leave the cell empty.)

Determine if it is possible to satisfy all of the following conditions, and if it is possible, print one way to do so.

- Each row and each column contain exactly one =A=, one =B=, and one =C=.
- The leftmost character written in the \(i\)-th row matches the \(i\)-th character of \(R\).
- The topmost character written in the \(i\)-th column matches the \(i\)-th character of \(C\).

*** Constraints

- \(N\) is an integer between \(3\) and \(5\), inclusive.
- \(R\) and \(C\) are strings of length \(N\) consisting of =A=, =B=, and =C=.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(R\)
\(C\)
#+end_example

*** Output

If there is no way to fill the grid to satisfy the conditions in the problem statement, print =No= in one line.\\
Otherwise, print one such way to fill the grid in the following format:

#+begin_example
Yes
\(A_1\)
\(A_2\)
\(\vdots\)
\(A_N\)
#+end_example

The first line should contain =Yes=. The \(i\)-th of the subsequent \(N\) lines should contain a string \(A_i\) of length \(N\).

- If the \(j\)-th character of \(A_i\) is =.=, it indicates that the cell in the \(i\)-th row from the top and the \(j\)-th column from the left is empty.
- If the \(j\)-th character of \(A_i\) is =A=, it indicates that =A= is written in the cell in the \(i\)-th row from the top and the \(j\)-th column from the left.
- If the \(j\)-th character of \(A_i\) is =B=, it indicates that =B= is written in the cell in the \(i\)-th row from the top and the \(j\)-th column from the left.
- If the \(j\)-th character of \(A_i\) is =C=, it indicates that =C= is written in the cell in the \(i\)-th row from the top and the \(j\)-th column from the left.

If there are multiple correct ways to fill the grid, you may print any of them.

--------------

*** Sample Input 1

#+begin_example
5
ABCBC
ACAAB
#+end_example

*** Sample Output 1

#+begin_example
Yes
AC..B
.BA.C
C.BA.
BA.C.
..CBA
#+end_example

The grid in the output example satisfies all the following conditions, so it will be treated as correct.

- Each row contains exactly one =A=, one =B=, and one =C=.
- Each column contains exactly one =A=, one =B=, and one =C=.
- The leftmost characters written in the rows are =A=, =B=, =C=, =B=, =C= from top to bottom.
- The topmost characters written in the columns are =A=, =C=, =A=, =A=, =B= from left to right.

--------------

*** Sample Input 2

#+begin_example
3
AAA
BBB
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

For this input, there is no way to fill the grid to satisfy the conditions.


** [[https://atcoder.jp/contests/abc326/tasks/abc326_e][E - Revenge of "The Salary of AtCoder Inc."]]

Score : \(450\) points

*** Problem Statement

Aoki, an employee at AtCoder Inc., has his salary for this month determined by an integer \(N\) and a sequence \(A\) of length \(N\) as follows.\\
First, he is given an \(N\)-sided die (dice) that shows the integers from \(1\) to \(N\) with equal probability, and a variable \(x=0\).

Then, the following steps are repeated until terminated.

- Roll the die once and let \(y\) be the result.
  - If \(x<y\), pay him \(A_y\) yen and let \(x=y\).
  - Otherwise, terminate the process.

Aoki's salary for this month is the total amount paid through this process.\\
Find the expected value of Aoki's salary this month, modulo \(998244353\).

How to find an expected value modulo \(998244353\)

It can be proved that the sought expected value in this problem is always a rational number. Also, the constraints of this problem guarantee that if the sought expected value is expressed as a reduced fraction \(\frac yx\), then \(x\) is not divisible by \(998244353\). Here, there is exactly one \(0\leq z\lt998244353\) such that \(y\equiv xz\pmod{998244353}\). Print this \(z\).

*** Constraints

- All inputs are integers.
- \(1 \le N \le 3 \times 10^5\)
- \(0 \le A_i < 998244353\)

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3
3 2 6
#+end_example

*** Sample Output 1

#+begin_example
776412280
#+end_example

Here is an example of how the process goes.

- Initially, \(x=0\).
- Roll the die once, and it shows \(1\). Since \(0<1\), pay him \(A_1 = 3\) yen and let \(x=1\).
- Roll the die once, and it shows \(3\). Since \(1<3\), pay him \(A_3 = 6\) yen and let \(x=3\).
- Roll the die once, and it shows \(1\). Since \(3 \ge 1\), terminate the process.

In this case, his salary for this month is \(9\) yen.

It can be calculated that the expected value of his salary this month is \(\frac{49}{9}\) yen, whose representation modulo \(998244353\) is \(776412280\).

--------------

*** Sample Input 2

#+begin_example
1
998244352
#+end_example

*** Sample Output 2

#+begin_example
998244352
#+end_example

--------------

*** Sample Input 3

#+begin_example
9
3 14 159 2653 58979 323846 2643383 27950288 419716939
#+end_example

*** Sample Output 3

#+begin_example
545252774
#+end_example


** [[https://atcoder.jp/contests/abc325/tasks/abc325_d][D - Printing Machine]]

Score : \(450\) points

*** Problem Statement

There are \(N\) products labeled \(1\) to \(N\) flowing on a conveyor belt. A Keyence printer is attached to the conveyor belt, and product \(i\) enters the range of the printer \(T_i\) microseconds from now and leaves it \(D_i\) microseconds later.

The Keyence printer can instantly print on one product within the range of the printer (in particular, it is possible to print at the moment the product enters or leaves the range of the printer). However, after printing once, it requires a charge time of \(1\) microseconds before it can print again. What is the maximum number of products the printer can print on when the product and timing for the printer to print are chosen optimally?

*** Constraints

- \(1\leq N \leq 2\times 10^5\)
- \(1\leq T_i,D_i \leq 10^{18}\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(T_1\) \(D_1\)
\(T_2\) \(D_2\)
\(\vdots\)
\(T_N\) \(D_N\)
#+end_example

*** Output

Print the maximum number of products the printer can print on.

--------------

*** Sample Input 1

#+begin_example
5
1 1
1 1
2 1
1 2
1 4
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

Below, we will simply call the moment \(t\) microseconds from now time \(t\).

For example, you can print on four products as follows:

- Time \(1\) : Products \(1,2,4,5\) enter the range of the printer. Print on product \(4\).
- Time \(2\) : Product \(3\) enters the range of the printer, and products \(1,2\) leave the range of the printer. Print on product \(1\).
- Time \(3\) : Products \(3,4\) leave the range of the printer. Print on product \(3\).
- Time \(4.5\) : Print on product \(5\).
- Time \(5\) : Product \(5\) leaves the range of the printer.

It is impossible to print on all five products, so the answer is \(4\).

--------------

*** Sample Input 2

#+begin_example
2
1 1
1000000000000000000 1000000000000000000
#+end_example

*** Sample Output 2

#+begin_example
2
#+end_example

--------------

*** Sample Input 3

#+begin_example
10
4 1
1 2
1 4
3 2
5 1
5 1
4 1
2 1
4 1
2 4
#+end_example

*** Sample Output 3

#+begin_example
6
#+end_example


** [[https://atcoder.jp/contests/abc323/tasks/abc323_e][E - Playlist]]

Score : \(450\) points

*** Problem Statement

Takahashi has a playlist with \(N\) songs. Song \(i\) \((1 \leq i \leq N)\) lasts \(T_i\) seconds.\\
Takahashi has started random play of the playlist at time \(0\).

Random play repeats the following: choose one song from the \(N\) songs with equal probability and play that song to the end. Here, songs are played continuously: once a song ends, the next chosen song starts immediately. The same song can be chosen consecutively.

Find the probability that song \(1\) is being played \((X + 0.5)\) seconds after time \(0\), modulo \(998244353\).

How to print a probability modulo \(998244353\)

It can be proved that the probability to be found in this problem is always a rational number. Also, the constraints of this problem guarantee that when the probability to be found is expressed as an irreducible fraction \(\frac{y}{x}\), \(x\) is not divisible by \(998244353\).

Then, there is a unique integer \(z\) between \(0\) and \(998244352\), inclusive, such that \(xz \equiv y \pmod{998244353}\). Report this \(z\).

*** Constraints

- \(2 \leq N\leq 10^3\)
- \(0 \leq X\leq 10^4\)
- \(1 \leq T_i\leq 10^4\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(X\)
\(T_1\) \(T_2\) \(\ldots\) \(T_N\)
#+end_example

*** Output

Print the probability, modulo \(998244353\), that the first song in the playlist is being played \((X+0.5)\) seconds after time \(0\).

--------------

*** Sample Input 1

#+begin_example
3 6
3 5 6
#+end_example

*** Sample Output 1

#+begin_example
369720131
#+end_example

Song \(1\) will be playing \(6.5\) seconds after time \(0\) if songs are played in one of the following orders.

- Song \(1\) \(\to\) Song \(1\) \(\to\) Song \(1\)
- Song \(2\) \(\to\) Song \(1\)
- Song \(3\) \(\to\) Song \(1\)

The probability that one of these occurs is \(\frac{7}{27}\).\\
We have \(369720131\times 27\equiv 7 \pmod{998244353}\), so you should print \(369720131\).

--------------

*** Sample Input 2

#+begin_example
5 0
1 2 1 2 1
#+end_example

*** Sample Output 2

#+begin_example
598946612
#+end_example

\(0.5\) seconds after time \(0\), the first song to be played is still playing, so the sought probability is \(\frac{1}{5}\).\\
Note that different songs may have the same length.

--------------

*** Sample Input 3

#+begin_example
5 10000
1 2 3 4 5
#+end_example

*** Sample Output 3

#+begin_example
586965467
#+end_example


** [[https://atcoder.jp/contests/abc323/tasks/abc323_f][F - Push and Carry]]

Score : \(525\) points

*** Problem Statement

Takahashi and a cargo are on a coordinate plane.

Takahashi is currently at \((X_A,Y_A)\), and the cargo is at \((X_B,Y_B)\). He wants to move the cargo to \((X_C,Y_C)\).

When he is at \((x,y)\), he can make one of the following moves in a single action.

- Move to \((x+1,y)\). If the cargo is at \((x+1,y)\) before the move, move it to \((x+2,y)\).
- Move to \((x-1,y)\). If the cargo is at \((x-1,y)\) before the move, move it to \((x-2,y)\).
- Move to \((x,y+1)\). If the cargo is at \((x,y+1)\) before the move, move it to \((x,y+2)\).
- Move to \((x,y-1)\). If the cargo is at \((x,y-1)\) before the move, move it to \((x,y-2)\).

Find the minimum number of actions required to move the cargo to \((X_C,Y_C)\).

*** Constraints

- \(-10^{17}\leq X_A,Y_A,X_B,Y_B,X_C,Y_C\leq 10^{17}\)
- \((X_A,Y_A)\neq (X_B,Y_B)\)
- \((X_B,Y_B)\neq (X_C,Y_C)\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(X_A\) \(Y_A\) \(X_B\) \(Y_B\) \(X_C\) \(Y_C\)
#+end_example

*** Output

Print the minimum number of actions required to move the cargo to \((X_C,Y_C)\).

--------------

*** Sample Input 1

#+begin_example
1 2 3 3 0 5
#+end_example

*** Sample Output 1

#+begin_example
9
#+end_example

Takahashi can move the cargo to \((0,5)\) in nine actions as follows.

- Move to \((2,2)\).
- Move to \((3,2)\).
- Move to \((3,3)\). The cargo moves to \((3,4)\).
- Move to \((3,4)\). The cargo moves to \((3,5)\).
- Move to \((4,4)\).
- Move to \((4,5)\).
- Move to \((3,5)\). The cargo moves to \((2,5)\).
- Move to \((2,5)\). The cargo moves to \((1,5)\).
- Move to \((1,5)\). The cargo moves to \((0,5)\).

It is impossible to move the cargo to \((0,5)\) in eight or fewer actions, so you should print \(9\).

--------------

*** Sample Input 2

#+begin_example
0 0 1 0 -1 0
#+end_example

*** Sample Output 2

#+begin_example
6
#+end_example

--------------

*** Sample Input 3

#+begin_example
-100000000000000000 -100000000000000000 100000000000000000 100000000000000000 -100000000000000000 -100000000000000000
#+end_example

*** Sample Output 3

#+begin_example
800000000000000003
#+end_example


** [[https://atcoder.jp/contests/abc322/tasks/abc322_d][D - Polyomino]]

Score : \(400\) points

*** Problem Statement

A *polyomino* is a puzzle piece in the shape of a connected polygon made by connecting several squares by their edges.

There is a grid with four rows and four columns, and three polyominoes that fit within the grid.\\
The shape of the \(i\)-th polyomino is represented by \(16\) characters \(P_{i,j,k}\) (\(1 \leq j, k \leq 4\)). They describe the state of the grid when the \(i\)-th polyomino is placed on it. If \(P_{i, j, k}\) is =#=, the square at the \(j\)-th row from the top and \(k\)-th column from the left is occupied by the polyomino; if it is =.=, the square is not occupied. (Refer to the figures at Sample Input/Output \(1\).)

You want to fill the grid with all three polyominoes so that all of the following conditions are satisfied.

- All squares of the grid are covered by the polyominoes.
- The polyominoes must not overlap each other.
- The polyominoes must not stick out of the grid.
- The polyominoes may be freely translated and rotated but may not be flipped over.

Can the grid be filled with the polyominoes to satisfy these conditions?

*** Constraints

- \(P_{i, j, k}\) is =#= or =.=.
- The given polyominoes are connected. In other words, the squares that make up a polyomino can be reached from each other by following only the squares up, down, left, and right.
- The given polyominoes are not empty.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(P_{1,1,1}P_{1,1,2}P_{1,1,3}P_{1,1,4}\)
\(P_{1,2,1}P_{1,2,2}P_{1,2,3}P_{1,2,4}\)
\(P_{1,3,1}P_{1,3,2}P_{1,3,3}P_{1,3,4}\)
\(P_{1,4,1}P_{1,4,2}P_{1,4,3}P_{1,4,4}\)
\(P_{2,1,1}P_{2,1,2}P_{2,1,3}P_{2,1,4}\)
\(P_{2,2,1}P_{2,2,2}P_{2,2,3}P_{2,2,4}\)
\(P_{2,3,1}P_{2,3,2}P_{2,3,3}P_{2,3,4}\)
\(P_{2,4,1}P_{2,4,2}P_{2,4,3}P_{2,4,4}\)
\(P_{3,1,1}P_{3,1,2}P_{3,1,3}P_{3,1,4}\)
\(P_{3,2,1}P_{3,2,2}P_{3,2,3}P_{3,2,4}\)
\(P_{3,3,1}P_{3,3,2}P_{3,3,3}P_{3,3,4}\)
\(P_{3,4,1}P_{3,4,2}P_{3,4,3}P_{3,4,4}\)
#+end_example

*** Output

If it is possible to fill the grid with the polyominoes to satisfy the conditions in the problem statement, print =Yes=; otherwise, print =No=.

--------------

*** Sample Input 1

#+begin_example
....
###.
.#..
....
....
.###
.##.
....
..#.
.##.
.##.
.##.
#+end_example

*** Sample Output 1

#+begin_example
Yes
#+end_example

The figure below shows the shapes of the polyominoes corresponding to Sample Input \(1\).

[[https://img.atcoder.jp/abc322/f0e25c2abcdbeade76fcb12eaee39f23.jpg]]

In this case, you can fill the grid with them to satisfy the conditions in the problem statement by placing them as shown in the figure below.

[[https://img.atcoder.jp/abc322/81e983f85e958e0d612063adcc455c71.jpg]]

Thus, the answer is =Yes=.

--------------

*** Sample Input 2

#+begin_example
###.
#.#.
##..
....
....
..#.
....
....
####
##..
#...
#...
#+end_example

*** Sample Output 2

#+begin_example
Yes
#+end_example

As in the first polyomino in Sample Input \(2\), a polyomino may be in the shape of a polygon with a hole.

--------------

*** Sample Input 3

#+begin_example
##..
#..#
####
....
....
##..
.##.
....
.#..
.#..
.#..
.#..
#+end_example

*** Sample Output 3

#+begin_example
No
#+end_example

Note that the polyominoes may not be flipped over when filling the grid.

--------------

*** Sample Input 4

#+begin_example
....
..#.
....
....
....
..#.
....
....
....
..#.
....
....
#+end_example

*** Sample Output 4

#+begin_example
No
#+end_example

--------------

*** Sample Input 5

#+begin_example
....
####
#...
#...
....
####
...#
..##
....
..##
..#.
..##
#+end_example

*** Sample Output 5

#+begin_example
No
#+end_example

--------------

*** Sample Input 6

#+begin_example
###.
.##.
..#.
.###
....
...#
..##
...#
....
#...
#...
#...
#+end_example

*** Sample Output 6

#+begin_example
Yes
#+end_example


** [[https://atcoder.jp/contests/abc319/tasks/abc319_e][E - Bus Stops]]

Score : \(450\) points

*** Problem Statement

Takahashi is initially at his house and is about to visit Aoki's house.

There are \(N\) bus stops numbered \(1\) to \(N\) between the two houses, and Takahashi can move between them in the following ways:

- He can walk from his house to bus stop \(1\) in \(X\) units of time.
- For each \(i = 1, 2, \ldots, N-1\), a bus departs from bus stop \(i\) at each time that is a multiple of \(P_i\), and by taking this bus, he can get to bus stop \((i+1)\) in \(T_i\) units of time. *Here, the constraints guarantee that \(1 \leq P_i \leq 8\).*
- Takahashi can walk from bus stop \(N\) to Aoki's house in \(Y\) units of time.

For each \(i = 1, 2, \ldots, Q\), process the following query.

#+begin_quote
Find the earliest time that Takahashi can arrive at Aoki's house when he leaves his house at time \(q_i\).

#+end_quote

Note that if he arrives at a bus stop exactly at the departure time of a bus, he can take that bus.

*** Constraints

- \(2 \leq N \leq 10^5\)
- \(1 \leq X, Y \leq 10^9\)
- \(1 \leq P_i \leq 8\)
- \(1 \leq T_i \leq 10^9\)
- \(1 \leq Q \leq 2 \times 10^5\)
- \(0 \leq q_i \leq 10^9\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(X\) \(Y\)
\(P_1\) \(T_1\)
\(P_2\) \(T_2\)
\(\vdots\)
\(P_{N-1}\) \(T_{N-1}\)
\(Q\)
\(q_1\)
\(q_2\)
\(\vdots\)
\(q_Q\)
#+end_example

*** Output

Print \(Q\) lines. For each \(i = 1, 2, \ldots, Q\), the \(i\)-th line should contain the answer to the \(i\)-th query.

--------------

*** Sample Input 1

#+begin_example
4 2 3
5 4
6 6
3 1
7
13
0
710511029
136397527
763027379
644706927
447672230
#+end_example

*** Sample Output 1

#+begin_example
34
22
710511052
136397548
763027402
644706946
447672250
#+end_example

For the first query, Takahashi can move as follows to arrive at Aoki's house at time \(34\).

- Leave his house at time \(13\).
- Walk from his house and arrive at bus stop \(1\) at time \(15\).
- Take the bus departing from bus stop \(1\) at time \(15\) and arrive at bus stop \(2\) at time \(19\).
- Take the bus departing from bus stop \(2\) at time \(24\) and arrive at bus stop \(3\) at time \(30\).
- Take the bus departing from bus stop \(3\) at time \(30\) and arrive at bus stop \(4\) at time \(31\).
- Walk from bus stop \(4\) and arrive at Aoki's house at time \(34\).

For the second query, Takahashi can move as follows and arrive at Aoki's house at time \(22\).

- Leave his house at time \(0\).
- Walk from his house and arrive at bus stop \(1\) at time \(2\).
- Take the bus departing from bus stop \(1\) at time \(5\) and arrive at bus stop \(2\) at time \(9\).
- Take the bus departing from bus stop \(2\) at time \(12\) and arrive at bus stop \(3\) at time \(18\).
- Take the bus departing from bus stop \(3\) at time \(18\) and arrive at bus stop \(4\) at time \(19\).
- Walk from bus stop \(4\) and arrive at Aoki's house at time \(22\).


** [[https://atcoder.jp/contests/abc315/tasks/abc315_d][D - Magical Cookies]]

Score : \(400\) points

*** Problem Statement

There are \(H \times W\) cookies in \(H\) rows and \(W\) columns.\\
The color of the cookie at the \(i\)-row from the top and \(j\)-th column from the left is represented by a lowercase English letter \(c_{i,j}\).

We will perform the following procedure.

1. For each row, perform the following operation: if there are two or more cookies remaining in the row and they all have the same color, mark them.

2. For each column, perform the following operation: if there are two or more cookies remaining in the column and they all have the same color, mark them.

3. If there are any marked cookies, remove them all and return to 1; otherwise, terminate the procedure.

Find the number of cookies remaining at the end of the procedure.

*** Constraints

- \(2 \leq H, W \leq 2000\)
- \(c_{i,j}\) is a lowercase English letter.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\)
\(c_{1,1}\)\(c_{1,2}\) \(\ldots\) \(c_{1,W}\)
\(c_{2,1}\)\(c_{2,2}\) \(\ldots\) \(c_{2,W}\)
\(\vdots\)
\(c_{H,1}\)\(c_{H,2}\) \(\ldots\) \(c_{H,W}\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4 3
aaa
aaa
abc
abd
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

The procedure is performed as follows.

- 1. Mark the cookies in the first and second rows.
- 2. Mark the cookies in the first column.
- 3. Remove the marked cookies.

At this point, the cookies look like the following, where =.= indicates a position where the cookie has been removed.

#+begin_example
...
...
.bc
.bd
#+end_example

- 1. Do nothing.
- 2. Mark the cookies in the second column.
- 3. Remove the marked cookies.

At this point, the cookies look like the following, where =.= indicates a position where the cookie has been removed.

#+begin_example
...
...
..c
..d
#+end_example

- 1. Do nothing.
- 2. Do nothing.
- 3. No cookies are marked, so terminate the procedure.

The final number of cookies remaining is \(2\).

--------------

*** Sample Input 2

#+begin_example
2 5
aaaaa
abcde
#+end_example

*** Sample Output 2

#+begin_example
4
#+end_example

--------------

*** Sample Input 3

#+begin_example
3 3
ooo
ooo
ooo
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example


** [[https://atcoder.jp/contests/abc312/tasks/abc312_f][F - Cans and Openers]]

Score : \(500\) points

*** Problem Statement

There are \(N\) items.\\
Each of these is one of a pull-tab can, a regular can, or a can opener.\\
The \(i\)-th item is described by an integer pair \((T_i, X_i)\) as follows:

- If \(T_i = 0\), the \(i\)-th item is a pull-tab can; if you obtain it, you get a happiness of \(X_i\).
- If \(T_i = 1\), the \(i\)-th item is a regular can; if you obtain it and use a can opener against it, you get a happiness of \(X_i\).
- If \(T_i = 2\), the \(i\)-th item is a can opener; it can be used against at most \(X_i\) cans.

Find the maximum total happiness that you get by obtaining \(M\) items out of \(N\).

*** Constraints

- \(1 \leq M \leq N \leq 2 \times 10^5\)
- \(T_i\) is \(0\), \(1\), or \(2\).
- \(1 \leq X_i \leq 10^9\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(T_1\) \(X_1\)
\(T_2\) \(X_2\)
\(\vdots\)
\(T_N\) \(X_N\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
8 4
0 6
0 6
1 3
1 5
1 15
2 1
2 10
2 100
#+end_example

*** Sample Output 1

#+begin_example
27
#+end_example

If you obtain the \(1\)-st, \(2\)-nd, \(5\)-th, and \(7\)-th items, and use the \(7\)-th item (a can opener) against the \(5\)-th item, you will get a happiness of \(6 + 6 + 15 = 27\).\\
There are no ways to obtain items to get a happiness of \(28\) or greater, but you can still get a happiness of \(27\) by obtaining the \(6\)-th or \(8\)-th items instead of the \(7\)-th in the combination above.

--------------

*** Sample Input 2

#+begin_example
5 5
1 5
1 5
1 5
1 5
1 5
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

--------------

*** Sample Input 3

#+begin_example
12 6
2 2
0 1
0 9
1 3
1 5
1 3
0 4
2 1
1 8
2 1
0 1
0 4
#+end_example

*** Sample Output 3

#+begin_example
30
#+end_example


** [[https://atcoder.jp/contests/abc311/tasks/abc311_e][E - Defect-free Squares]]

Score : \(475\) points

*** Problem Statement

There is a grid with \(H\) rows and \(W\) columns. Let \((i, j)\) denote the square at the \(i\)-th row from the top and \(j\)-th column from the left of the grid.\\
Each square of the grid is holed or not. There are exactly \(N\) holed squares: \((a_1, b_1), (a_2, b_2), \dots, (a_N, b_N)\).

When the triple of positive integers \((i, j, n)\) satisfies the following condition, the square region whose top-left corner is \((i, j)\) and whose bottom-right corner is \((i + n - 1, j + n - 1)\) is called a *holeless square*.

- \(i + n - 1 \leq H\).
- \(j + n - 1 \leq W\).
- For every pair of non-negative integers \((k, l)\) such that \(0 \leq k \leq n - 1, 0 \leq l \leq n - 1\), square \((i + k, j + l)\) is not holed.

How many holeless squares are in the grid?

*** Constraints

- \(1 \leq H, W \leq 3000\)
- \(0 \leq N \leq \min(H \times W, 10^5)\)
- \(1 \leq a_i \leq H\)
- \(1 \leq b_i \leq W\)
- All \((a_i, b_i)\) are pairwise different.
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\) \(N\)
\(a_1\) \(b_1\)
\(a_2\) \(b_2\)
\(\vdots\)
\(a_N\) \(b_N\)
#+end_example

*** Output

Print the number of holeless squares.

--------------

*** Sample Input 1

#+begin_example
2 3 1
2 3
#+end_example

*** Sample Output 1

#+begin_example
6
#+end_example

There are six holeless squares, listed below. For the first five, \(n = 1\), and the top-left and bottom-right corners are the same square.

- The square region whose top-left and bottom-right corners are \((1, 1)\).
- The square region whose top-left and bottom-right corners are \((1, 2)\).
- The square region whose top-left and bottom-right corners are \((1, 3)\).
- The square region whose top-left and bottom-right corners are \((2, 1)\).
- The square region whose top-left and bottom-right corners are \((2, 2)\).
- The square region whose top-left corner is \((1, 1)\) and whose bottom-right corner is \((2, 2)\).

--------------

*** Sample Input 2

#+begin_example
3 2 6
1 1
1 2
2 1
2 2
3 1
3 2
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

There may be no holeless square.

--------------

*** Sample Input 3

#+begin_example
1 1 0
#+end_example

*** Sample Output 3

#+begin_example
1
#+end_example

The whole grid may be a holeless square.

--------------

*** Sample Input 4

#+begin_example
3000 3000 0
#+end_example

*** Sample Output 4

#+begin_example
9004500500
#+end_example


** [[https://atcoder.jp/contests/abc310/tasks/abc310_d][D - Peaceful Teams]]

Score : \(400\) points

*** Problem Statement

There are \(N\) sports players.

Among them, there are \(M\) incompatible pairs. The \(i\)-th incompatible pair \((1\leq i\leq M)\) is the \(A_i\)-th and \(B_i\)-th players.

You will divide the players into \(T\) teams. Every player must belong to exactly one team, and every team must have one or more players. Additionally, for each \(i=1,2,\ldots,M\), the \(A_i\)-th and \(B_i\)-th players must not belong to the same team.

Find the number of ways to satisfy these conditions. Here, two divisions are considered different when there are two players who belong to the same team in one division and different teams in the other.

*** Constraints

- \(1\leq T\leq N\leq10\)
- \(0\leq M\leq\dfrac{N(N-1)}2\)
- \(1\leq A _ i\lt B _ i\leq N\ (1\leq i\leq M)\)
- \((A _ i,B _ i)\neq (A _ j,B _ j)\ (1\leq i\lt j\leq M)\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(T\) \(M\)
\(A _ 1\) \(B _ 1\)
\(A _ 2\) \(B _ 2\)
\(\vdots\)
\(A _ M\) \(B _ M\)
#+end_example

*** Output

Print the answer in a single line.

--------------

*** Sample Input 1

#+begin_example
5 2 2
1 3
3 4
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

The following four divisions satisfy the conditions.

[[https://img.atcoder.jp/abc310/b92c2629f68d56350fe18e6d0a8fa060.png]]

No other division satisfies them, so print \(4\).

--------------

*** Sample Input 2

#+begin_example
5 1 2
1 3
3 4
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

There may be no division that satisfies the conditions.

--------------

*** Sample Input 3

#+begin_example
6 4 0
#+end_example

*** Sample Output 3

#+begin_example
65
#+end_example

There may be no incompatible pair.

--------------

*** Sample Input 4

#+begin_example
10 6 8
5 9
1 4
3 8
1 6
4 10
5 7
5 6
3 7
#+end_example

*** Sample Output 4

#+begin_example
8001
#+end_example


** [[https://atcoder.jp/contests/abc310/tasks/abc310_e][E - NAND repeatedly]]

Score : \(450\) points

*** Problem Statement

You are given a string \(S\) of length \(N\) consisting of =0= and =1=. It describes a length-\(N\) sequence \(A=(A _ 1,A _ 2,\ldots,A _ N)\). If the \(i\)-th character of \(S\) \((1\leq i\leq N)\) is =0=, then \(A _ i=0\); if it is =1=, then \(A _ i=1\).

Find the following:

\[\sum _ {1\leq i\leq j\leq N}(\cdots((A _ i\barwedge A _ {i+1})\barwedge A _ {i+2})\barwedge\cdots\barwedge A _ j)\]

More formally, find \(\displaystyle\sum _ {i=1} ^ {N}\sum _ {j=i} ^ Nf(i,j)\) for \(f(i,j)\ (1\leq i\leq j\leq N)\) defined as follows:

\[f(i,j)=\left\{\begin{matrix} A _ i&(i=j)\\ f(i,j-1)\barwedge A _ j\quad&(i\lt j) \end{matrix}\right.\]

Here, \(\barwedge\), NAND, is a binary operator satisfying the following:

\[0\barwedge0=1,0\barwedge1=1,1\barwedge0=1,1\barwedge1=0.\]

*** Constraints

- \(1\leq N\leq10^6\)
- \(S\) is a string of length \(N\) consisting of =0= and =1=.
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(S\)
#+end_example

*** Output

Print the answer in a single line.

--------------

*** Sample Input 1

#+begin_example
5
00110
#+end_example

*** Sample Output 1

#+begin_example
9
#+end_example

Here are the values of \(f(i,j)\) for the pairs \((i,j)\) such that \(1\leq i\leq j\leq N\):

- \(f(1,1)=0=0\)
- \(f(1,2)=0\barwedge0=1\)
- \(f(1,3)=(0\barwedge0)\barwedge1=0\)
- \(f(1,4)=((0\barwedge0)\barwedge1)\barwedge1=1\)
- \(f(1,5)=(((0\barwedge0)\barwedge1)\barwedge1)\barwedge0=1\)
- \(f(2,2)=0=0\)
- \(f(2,3)=0\barwedge1=1\)
- \(f(2,4)=(0\barwedge1)\barwedge1=0\)
- \(f(2,5)=((0\barwedge1)\barwedge1)\barwedge0=1\)
- \(f(3,3)=1=1\)
- \(f(3,4)=1\barwedge1=0\)
- \(f(3,5)=(1\barwedge1)\barwedge0=1\)
- \(f(4,4)=1=1\)
- \(f(4,5)=1\barwedge0=1\)
- \(f(5,5)=0=0\)

Their sum is \(0+1+0+1+1+0+1+0+1+1+0+1+1+1+0=9\), so print \(9\).

Note that \(\barwedge\) does not satisfy the associative property. For instance, \((1\barwedge1)\barwedge0=0\barwedge0=1\neq0=1\barwedge1=1\barwedge(1\barwedge0)\).

--------------

*** Sample Input 2

#+begin_example
30
101010000100101011010011000010
#+end_example

*** Sample Output 2

#+begin_example
326
#+end_example


** [[https://atcoder.jp/contests/abc308/tasks/abc308_f][F - Vouchers]]

Score : \(500\) points

*** Problem Statement

You are in a store to buy \(N\) items. The regular price of the \(i\)-th item is \(P_i\) yen (the currency in Japan).

You have \(M\) coupons. You can use the \(i\)-th coupon to buy an item whose regular price is at least \(L_i\) yen at a \(D_i\)-yen discount.

Here, each coupon can be used only once. Besides, multiple coupons cannot be used for the same item.

If no coupon is used for an item, you will buy it for a regular price. Find the minimum possible total amount of money required to buy all the \(N\) items.

*** Constraints

- \(1\leq N,M\leq 2\times 10^5\)
- \(1\leq P_i\leq 10^9\)
- \(1\leq D_i \leq L_i \leq 10^9\)
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(P_1\) \(\ldots\) \(P_N\)
\(L_1\) \(\ldots\) \(L_M\)
\(D_1\) \(\ldots\) \(D_M\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
3 3
4 3 1
4 4 2
2 3 1
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

Consider using the \(2\)-nd coupon for the \(1\)-st item, and the \(3\)-rd coupon for the \(2\)-nd item.

Then, you buy the \(1\)-st item for \(4-3=1\) yen, \(2\)-nd item for \(3-1=2\) yen, and \(3\)-rd item for \(1\) yen. Thus, you can buy all the items for \(1+2+1=4\) yen.

--------------

*** Sample Input 2

#+begin_example
10 5
9 7 1 5 2 2 5 5 7 6
7 2 7 8 2
3 2 4 1 2
#+end_example

*** Sample Output 2

#+begin_example
37
#+end_example


** [[https://atcoder.jp/contests/abc307/tasks/abc307_c][C - Ideal Sheet]]

Score : \(300\) points

*** Problem Statement

Takahashi has two sheets \(A\) and \(B\), each composed of black squares and transparent squares, and an infinitely large sheet \(C\) composed of transparent squares.\\
There is also an ideal sheet \(X\) for Takahashi composed of black squares and transparent squares.

The sizes of sheets \(A\), \(B\), and \(X\) are \(H_A\) rows \(\times\) \(W_A\) columns, \(H_B\) rows \(\times\) \(W_B\) columns, and \(H_X\) rows \(\times\) \(W_X\) columns, respectively.\\
The squares of sheet \(A\) are represented by \(H_A\) strings of length \(W_A\), \(A_1, A_2, \ldots, A_{H_A}\) consisting of =.= and =#=.\\
If the \(j\)-th character \((1\leq j\leq W_A)\) of \(A_i\) \((1\leq i\leq H_A)\) is =.=, the square at the \(i\)-th row from the top and \(j\)-th column from the left is transparent; if it is =#=, that square is black.\\
Similarly, the squares of sheets \(B\) and \(X\) are represented by \(H_B\) strings of length \(W_B\), \(B_1, B_2, \ldots, B_{H_B}\), and \(H_X\) strings of length \(W_X\), \(X_1, X_2, \ldots, X_{H_X}\), respectively.

Takahashi's goal is to create sheet \(X\) using *all black squares* in sheets \(A\) and \(B\) by following the steps below with sheets \(A\), \(B\), and \(C\).

1. Paste sheets \(A\) and \(B\) onto sheet \(C\) along the grid. Each sheet can be pasted anywhere by translating it, but it cannot be cut or rotated.
2. Cut out an \(H_X\times W_X\) area from sheet \(C\) along the grid. Here, a square of the cut-out sheet will be black if a black square of sheet \(A\) or \(B\) is pasted there, and transparent otherwise.

Determine whether Takahashi can achieve his goal by appropriately choosing the positions where the sheets are pasted and the area to cut out, that is, whether he can satisfy both of the following conditions.

- The cut-out sheet includes *all black squares* of sheets \(A\) and \(B\). The black squares of sheets \(A\) and \(B\) may overlap on the cut-out sheet.
- The cut-out sheet coincides sheet \(X\) without rotating or flipping.

*** Constraints

- \(1\leq H_A, W_A, H_B, W_B, H_X, W_X\leq 10\)
- \(H_A, W_A, H_B, W_B, H_X, W_X\) are integers.
- \(A_i\) is a string of length \(W_A\) consisting of =.= and =#=.
- \(B_i\) is a string of length \(W_B\) consisting of =.= and =#=.
- \(X_i\) is a string of length \(W_X\) consisting of =.= and =#=.
- Sheets \(A\), \(B\), and \(X\) each contain at least one black square.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(H_A\) \(W_A\)
\(A_1\)
\(A_2\)
\(\vdots\)
\(A_{H_A}\)
\(H_B\) \(W_B\)
\(B_1\)
\(B_2\)
\(\vdots\)
\(B_{H_B}\)
\(H_X\) \(W_X\)
\(X_1\)
\(X_2\)
\(\vdots\)
\(X_{H_X}\)
#+end_example

*** Output

If Takahashi can achieve the goal described in the problem statement, print =Yes=; otherwise, print =No=.

--------------

*** Sample Input 1

#+begin_example
3 5
#.#..
.....
.#...
2 2
#.
.#
5 3
...
#.#
.#.
.#.
...
#+end_example

*** Sample Output 1

#+begin_example
Yes
#+end_example

First, paste sheet \(A\) onto sheet \(C\), as shown in the figure below.

#+begin_example
     \(\vdots\)
  .......
  .#.#...
\(\cdots\).......\(\cdots\)
  ..#....
  .......
     \(\vdots\)
#+end_example

Next, paste sheet \(B\) so that its top-left corner aligns with that of sheet \(A\), as shown in the figure below.

#+begin_example
     \(\vdots\)
  .......
  .#.#...
\(\cdots\)..#....\(\cdots\)
  ..#....
  .......
     \(\vdots\)
#+end_example

Now, cut out a \(5\times 3\) area with the square in the first row and second column of the range illustrated above as the top-left corner, as shown in the figure below.

#+begin_example
...
#.#
.#.
.#.
...
#+end_example

This includes all black squares of sheets \(A\) and \(B\) and matches sheet \(X\), satisfying the conditions.

Therefore, print =Yes=.

--------------

*** Sample Input 2

#+begin_example
2 2
#.
.#
2 2
#.
.#
2 2
##
##
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

Note that sheets \(A\) and \(B\) may not be rotated or flipped when pasting them.

--------------

*** Sample Input 3

#+begin_example
1 1
#
1 2
##
1 1
#
#+end_example

*** Sample Output 3

#+begin_example
No
#+end_example

No matter how you paste or cut, you cannot cut out a sheet that includes all black squares of sheet \(B\), so you cannot satisfy the first condition. Therefore, print =No=.

--------------

*** Sample Input 4

#+begin_example
3 3
###
...
...
3 3
#..
#..
#..
3 3
..#
..#
###
#+end_example

*** Sample Output 4

#+begin_example
Yes
#+end_example


** [[https://atcoder.jp/contests/abc307/tasks/abc307_e][E - Distinct Adjacent]]

Score : \(475\) points

*** Problem Statement

There are \(N\) people numbered from \(1\) to \(N\) standing in a circle. Person \(1\) is to the right of person \(2\), person \(2\) is to the right of person \(3\), ..., and person \(N\) is to the right of person \(1\).

We will give each of the \(N\) people an integer between \(0\) and \(M-1\), inclusive.\\
Among the \(M^N\) ways to distribute integers, find the number, modulo \(998244353\), of such ways that no two adjacent people have the same integer.

*** Constraints

- \(2 \leq N,M \leq 10^6\)
- \(N\) and \(M\) are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3 3
#+end_example

*** Sample Output 1

#+begin_example
6
#+end_example

There are six desired ways, where the integers given to persons \(1,2,3\) are \((0,1,2),(0,2,1),(1,0,2),(1,2,0),(2,0,1),(2,1,0)\).

--------------

*** Sample Input 2

#+begin_example
4 2
#+end_example

*** Sample Output 2

#+begin_example
2
#+end_example

There are two desired ways, where the integers given to persons \(1,2,3,4\) are \((0,1,0,1),(1,0,1,0)\).

--------------

*** Sample Input 3

#+begin_example
987654 456789
#+end_example

*** Sample Output 3

#+begin_example
778634319
#+end_example

Be sure to find the number modulo \(998244353\).


** [[https://atcoder.jp/contests/abc306/tasks/abc306_e][E - Best Performances]]

Score : \(475\) points

*** Problem Statement

We have a sequence \(A=(A_1,A_2,\dots,A_N)\) of length \(N\). Initially, all the terms are \(0\).\\
Using an integer \(K\) given in the input, we define a function \(f(A)\) as follows:

- Let \(B\) be the sequence obtained by sorting \(A\) in descending order (so that it becomes monotonically non-increasing).
- Then, let \(f(A)=B_1 + B_2 + \dots + B_K\).

We consider applying \(Q\) updates on this sequence.\\
Apply the following operation on the sequence \(A\) for \(i=1,2,\dots,Q\) in this order, and print the value \(f(A)\) at that point after each update.

- Change \(A_{X_i}\) to \(Y_i\).

*** Constraints

- All input values are integers.
- \(1 \le K \le N \le 5 \times 10^5\)
- \(1 \le Q \le 5 \times 10^5\)
- \(1 \le X_i \le N\)
- \(0 \le Y_i \le 10^9\)

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\) \(Q\)
\(X_1\) \(Y_1\)
\(X_2\) \(Y_2\)
\(\vdots\)
\(X_Q\) \(Y_Q\)
#+end_example

*** Output

Print \(Q\) lines in total. The \(i\)-th line should contain the value \(f(A)\) as an integer when the \(i\)-th update has ended.

--------------

*** Sample Input 1

#+begin_example
4 2 10
1 5
2 1
3 3
4 2
2 10
1 0
4 0
3 1
2 0
3 0
#+end_example

*** Sample Output 1

#+begin_example
5
6
8
8
15
13
13
11
1
0
#+end_example

In this input, \(N=4\) and \(K=2\). \(Q=10\) updates are applied.

- The \(1\)-st update makes \(A=(5, 0,0,0)\). Now, \(f(A)=5\).
- The \(2\)-nd update makes \(A=(5, 1,0,0)\). Now, \(f(A)=6\).
- The \(3\)-rd update makes \(A=(5, 1,3,0)\). Now, \(f(A)=8\).
- The \(4\)-th update makes \(A=(5, 1,3,2)\). Now, \(f(A)=8\).
- The \(5\)-th update makes \(A=(5,10,3,2)\). Now, \(f(A)=15\).
- The \(6\)-th update makes \(A=(0,10,3,2)\). Now, \(f(A)=13\).
- The \(7\)-th update makes \(A=(0,10,3,0)\). Now, \(f(A)=13\).
- The \(8\)-th update makes \(A=(0,10,1,0)\). Now, \(f(A)=11\).
- The \(9\)-th update makes \(A=(0, 0,1,0)\). Now, \(f(A)=1\).
- The \(10\)-th update makes \(A=(0, 0,0,0)\). Now, \(f(A)=0\).


** [[https://atcoder.jp/contests/abc306/tasks/abc306_f][F - Merge Sets]]

Score : \(525\) points

*** Problem Statement

For two sets of integers, \(A\) and \(B\), such that \(A \cap B = \emptyset\), we define \(f(A,B)\) as follows.

- Let \(C=(C_1,C_2,\dots,C_{|A|+|B|})\) be a sequence consisting of the elements of \(A \cup B\), sorted in ascending order.
- Take \(k_1,k_2,\dots,k_{|A|}\) such that \(A=\lbrace C_{k_1},C_{k_2},\dots,C_{k_{|A|}}\rbrace\). Then, let \(\displaystyle f(A,B)=\sum_{i=1}^{|A|} k_i\).

For example, if \(A=\lbrace 1,3\rbrace\) and \(B=\lbrace 2,8\rbrace\), then \(C=(1,2,3,8)\), so \(A=\lbrace C_1,C_3\rbrace\); thus, \(f(A,B)=1+3=4\).

We have \(N\) sets of integers, \(S_1,S_2\dots,S_N\), each of which has \(M\) elements. For each \(i\ (1 \leq i \leq N)\), \(S_i = \lbrace A_{i,1},A_{i,2},\dots,A_{i,M}\rbrace\). Here, it is guaranteed that \(S_i \cap S_j = \emptyset\ (i \neq j)\).

Find \(\displaystyle \sum_{1\leq i<j \leq N} f(S_i, S_j)\).

*** Constraints

- \(1\leq N \leq 10^4\)
- \(1\leq M \leq 10^2\)
- \(1\leq A_{i,j} \leq 10^9\)
- If \(i_1 \neq i_2\) or \(j_1 \neq j_2\), then \(A_{i_1,j_1} \neq A_{i_2,j_2}\).
- All input values are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_{1,1}\) \(A_{1,2}\) \(\dots\) \(A_{1,M}\)
\(\vdots\)
\(A_{N,1}\) \(A_{N,2}\) \(\dots\) \(A_{N,M}\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
3 2
1 3
2 8
4 6
#+end_example

*** Sample Output 1

#+begin_example
12
#+end_example

\(S_1\) and \(S_2\) respectively coincide with \(A\) and \(B\) exemplified in the problem statement, and \(f(S_1,S_2)=1+3=4\). Since \(f(S_1,S_3)=1+2=3\) and \(f(S_2,S_3)=1+4=5\), the answer is \(4+3+5=12\).

--------------

*** Sample Input 2

#+begin_example
1 1
306
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

--------------

*** Sample Input 3

#+begin_example
4 4
155374934 164163676 576823355 954291757
797829355 404011431 353195922 138996221
191890310 782177068 818008580 384836991
160449218 545531545 840594328 501899080
#+end_example

*** Sample Output 3

#+begin_example
102
#+end_example


** [[https://atcoder.jp/contests/abc305/tasks/abc305_f][F - Dungeon Explore]]

Score : \(525\) points

*** Problem Statement

This is an *interactive problem* (where your program and the judge program interact through Standard Input and Output).

There is a simple connected undirected graph with \(N\) vertices and \(M\) edges. The vertices are numbered with integers from \(1\) to \(N\).

Initially, you are at vertex \(1\). Repeat moving to an adjacent vertex at most \(2N\) times to reach vertex \(N\).

Here, you do not initially know all edges of the graph, but you will be informed of the vertices adjacent to the vertex you are at.

*** Constraints

- \(2\leq N\leq100\)
- \(N-1\leq M\leq\dfrac{N(N-1)}2\)
- The graph is simple and connected.
- All input values are integers.

*** Input and Output

First, receive the number of vertices \(N\) and the number of edges \(M\) in the graph from Standard Input:

#+begin_example
\(N\) \(M\)
#+end_example

Next, you get to repeat the operation described in the problem statement at most \(2N\) times against the judge.

At the beginning of each operation, the vertices adjacent to the vertex you are currently at are given from Standard Input in the following format:

#+begin_example
\(k\) \(v _ 1\) \(v _ 2\) \(\ldots\) \(v _ k\)
#+end_example

Here, \(v _ i\ (1\leq i\leq k)\) are integers between \(1\) and \(N\) such that \(v _ 1\lt v _ 2\lt\cdots\lt v _ k\).

Choose one of \(v _ i\ (1\leq i\leq k)\) and print it to Standard Output in the following format:

#+begin_example
\(v _ i\)
#+end_example

After this operation, you will be at vertex \(v _ i\).

If you perform more than \(2N\) operations or print invalid output, the judge will send =-1= to Standard Input.

If the destination of a move is vertex \(N\), the judge will send =OK= to Standard Input and terminate.

When receiving =-1= or =OK=, immediately terminate the program.

*** Notes

- *In each output, insert a newline at the end and flush Standard Output. Otherwise, the verdict may be TLE.*
- *The verdict will be indeterminate if the program prints invalid output or quits prematurely in the middle of the interaction.*
- Terminate the program immediately after reaching vertex \(N\). Otherwise, the verdict will be indeterminate.
- *The judge for this problem is adaptive. This means that the graph may change without contradicting the constraints or previous outputs.*

*** Sample Interaction

In the following sample interaction, we have \(N=4\), \(M=5\), and the graph in the figure below.

[[https://img.atcoder.jp/abc305/ae6ce1b3c8e950777761893a567c4d11.png]]

Input

Output

Description

=4 5=

\(N\) and \(M\) are given.

=2 2 3=

You start at vertex \(1\). The vertices adjacent to vertex \(1\) are given.

=3=

You choose to go to vertex \(v _ 2=3\).

=3 1 2 4=

The vertices adjacent to vertex \(3\) are given.

=2=

You choose to go to vertex \(v _ 2=2\).

=3 1 3 4=

The vertices adjacent to vertex \(2\) are given.

=4=

You choose to go to vertex \(v _ 3=4\).

=OK=

Since you have reached vertex \(4\) within \(8(=2\times4)\) moves, =OK= is passed.

You will be judged as correct if you immediately terminate the program after receiving =OK=.


** [[https://atcoder.jp/contests/abc302/tasks/abc302_f][F - Merge Set]]

Score : \(500\) points

*** Problem Statement

On a blackboard, there are \(N\) sets \(S_1,S_2,\dots,S_N\) consisting of integers between \(1\) and \(M\). Here, \(S_i = \lbrace S_{i,1},S_{i,2},\dots,S_{i,A_i} \rbrace\).

You may perform the following operation any number of times (possibly zero):

- choose two sets \(X\) and \(Y\) with at least one common element. Erase them from the blackboard, and write \(X\cup Y\) on the blackboard instead.

Here, \(X\cup Y\) denotes the set consisting of the elements contained in at least one of \(X\) and \(Y\).

Determine if one can obtain a set containing both \(1\) and \(M\). If it is possible, find the minimum number of operations required to obtain it.

*** Constraints

- \(1 \le N \le 2 \times 10^5\)
- \(2 \le M \le 2 \times 10^5\)
- \(1 \le \sum_{i=1}^{N} A_i \le 5 \times 10^5\)
- \(1 \le S_{i,j} \le M(1 \le i \le N,1 \le j \le A_i)\)
- \(S_{i,j} \neq S_{i,k}(1 \le j < k \le A_i)\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\)
\(S_{1,1}\) \(S_{1,2}\) \(\dots\) \(S_{1,A_1}\)
\(A_2\)
\(S_{2,1}\) \(S_{2,2}\) \(\dots\) \(S_{2,A_2}\)
\(\vdots\)
\(A_N\)
\(S_{N,1}\) \(S_{N,2}\) \(\dots\) \(S_{N,A_N}\)
#+end_example

*** Output

If one can obtain a set containing both \(1\) and \(M\), print the minimum number of operations required to obtain it; if it is impossible, print =-1= instead.

--------------

*** Sample Input 1

#+begin_example
3 5
2
1 2
2
2 3
3
3 4 5
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

First, choose and remove \(\lbrace 1,2 \rbrace\) and \(\lbrace 2,3 \rbrace\) to obtain \(\lbrace 1,2,3 \rbrace\).

Then, choose and remove \(\lbrace 1,2,3 \rbrace\) and \(\lbrace 3,4,5 \rbrace\) to obtain \(\lbrace 1,2,3,4,5 \rbrace\).

Thus, one can obtain a set containing both \(1\) and \(M\) with two operations. Since one cannot achieve the objective by performing the operation only once, the answer is \(2\).

--------------

*** Sample Input 2

#+begin_example
1 2
2
1 2
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

\(S_1\) already contains both \(1\) and \(M\), so the minimum number of operations required is \(0\).

--------------

*** Sample Input 3

#+begin_example
3 5
2
1 3
2
2 4
3
2 4 5
#+end_example

*** Sample Output 3

#+begin_example
-1
#+end_example

--------------

*** Sample Input 4

#+begin_example
4 8
3
1 3 5
2
1 2
3
2 4 7
4
4 6 7 8
#+end_example

*** Sample Output 4

#+begin_example
2
#+end_example


** [[https://atcoder.jp/contests/abc300/tasks/abc300_e][E - Dice Product 3]]

Score : \(500\) points

*** Problem Statement

You have an integer \(1\) and a die that shows integers between \(1\) and \(6\) (inclusive) with equal probability.\\
You repeat the following operation while your integer is strictly less than \(N\):

- Cast a die. If it shows \(x\), multiply your integer by \(x\).

Find the probability, modulo \(998244353\), that your integer ends up being \(N\).

How to find a probability modulo \(998244353\)?

We can prove that the sought probability is always rational. Additionally, under the constraints of this problem, when that value is represented as \(\frac{P}{Q}\) with two coprime integers \(P\) and \(Q\), we can prove that there is a unique integer \(R\) such that \(R \times Q \equiv P\pmod{998244353}\) and \(0 \leq R \lt 998244353\). Find this \(R\).

*** Constraints

- \(2 \leq N \leq 10^{18}\)
- \(N\) is an integer.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
#+end_example

*** Output

Print the probability, modulo \(998244353\), that your integer ends up being \(N\).

--------------

*** Sample Input 1

#+begin_example
6
#+end_example

*** Sample Output 1

#+begin_example
239578645
#+end_example

One of the possible procedures is as follows.

- Initially, your integer is \(1\).
- You cast a die, and it shows \(2\). Your integer becomes \(1 \times 2 = 2\).
- You cast a die, and it shows \(4\). Your integer becomes \(2 \times 4 = 8\).
- Now your integer is not less than \(6\), so you terminate the procedure.

Your integer ends up being \(8\), which is not equal to \(N = 6\).

The probability that your integer ends up being \(6\) is \(\frac{7}{25}\). Since \(239578645 \times 25 \equiv 7 \pmod{998244353}\), print \(239578645\).

--------------

*** Sample Input 2

#+begin_example
7
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

No matter what the die shows, your integer never ends up being \(7\).

--------------

*** Sample Input 3

#+begin_example
300
#+end_example

*** Sample Output 3

#+begin_example
183676961
#+end_example

--------------

*** Sample Input 4

#+begin_example
979552051200000000
#+end_example

*** Sample Output 4

#+begin_example
812376310
#+end_example


** [[https://atcoder.jp/contests/abc299/tasks/abc299_e][E - Nearest Black Vertex]]

Score : \(500\) points

*** Problem Statement

You are given a simple connected undirected graph with \(N\) vertices and \(M\) edges (a simple graph contains no self-loop and no multi-edges).\\
For \(i = 1, 2, \ldots, M\), the \(i\)-th edge connects vertex \(u_i\) and vertex \(v_i\) bidirectionally.

Determine whether there is a way to paint each vertex black or white to satisfy both of the following conditions, and show one such way if it exists.

- At least one vertex is painted black.
- For every \(i = 1, 2, \ldots, K\), the following holds:
  - the minimum distance between vertex \(p_i\) and a vertex painted black is exactly \(d_i\).

Here, the distance between vertex \(u\) and vertex \(v\) is the minimum number of edges in a path connecting \(u\) and \(v\).

*** Constraints

- \(1 \leq N \leq 2000\)
- \(N-1 \leq M \leq \min\lbrace N(N-1)/2, 2000 \rbrace\)
- \(1 \leq u_i, v_i \leq N\)
- \(0 \leq K \leq N\)
- \(1 \leq p_1 \lt p_2 \lt \cdots \lt p_K \leq N\)
- \(0 \leq d_i \leq N\)
- The given graph is simple and connected.
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(u_1\) \(v_1\)
\(u_2\) \(v_2\)
\(\vdots\)
\(u_M\) \(v_M\)
\(K\)
\(p_1\) \(d_1\)
\(p_2\) \(d_2\)
\(\vdots\)
\(p_K\) \(d_K\)
#+end_example

*** Output

If there is no way to paint each vertex black or white to satisfy the conditions, print =No=.\\
Otherwise, print =Yes= in the first line, and a string \(S\) representing a coloring of the vertices in the second line, as shown below.\\
Here, \(S\) is a string of length \(N\) such that, for each \(i = 1, 2, \ldots, N\), the \(i\)-th character of \(S\) is \(1\) if vertex \(i\) is painted black and \(0\) if white.

#+begin_example
Yes
\(S\)
#+end_example

If multiple solutions exist, you may print any of them.

--------------

*** Sample Input 1

#+begin_example
5 5
1 2
2 3
3 1
3 4
4 5
2
1 0
5 2
#+end_example

*** Sample Output 1

#+begin_example
Yes
10100
#+end_example

One way to satisfy the conditions is to paint vertices \(1, 3\) black and vertices \(2, 4, 5\) white.\\
Indeed, for each \(i = 1, 2, 3, 4, 5\), let \(A_i\) denote the minimum distance between vertex \(i\) and a vertex painted black, and we have \((A_1, A_2, A_3, A_4, A_5) = (0, 1, 0, 1, 2)\), where \(A_1 = 0, A_5 = 2\).

--------------

*** Sample Input 2

#+begin_example
5 5
1 2
2 3
3 1
3 4
4 5
5
1 1
2 1
3 1
4 1
5 1
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

There is no way to satisfy the conditions by painting each vertex black or white, so you should print =No=.

--------------

*** Sample Input 3

#+begin_example
1 0
0
#+end_example

*** Sample Output 3

#+begin_example
Yes
1
#+end_example


** [[https://atcoder.jp/contests/abc298/tasks/abc298_e][E - Unfair Sugoroku]]

Score : \(500\) points

*** Problem Statement

Takahashi and Aoki will play a game of sugoroku.\\
Takahashi starts at point \(A\), and Aoki starts at point \(B\). They will take turns throwing dice.\\
Takahashi's die shows \(1, 2, \ldots, P\) with equal probability, and Aoki's shows \(1, 2, \ldots, Q\) with equal probability.\\
When a player at point \(x\) throws his die and it shows \(i\), he goes to point \(\min(x + i, N)\).\\
The first player to reach point \(N\) wins the game.\\
Find the probability that Takahashi wins if he goes first, modulo \(998244353\).

How to find a probability modulo \(998244353\)

It can be proved that the sought probability is always rational. Additionally, the constraints of this problem guarantee that, if that probability is represented as an irreducible fraction \(\frac{y}{x}\), then \(x\) is indivisible by \(998244353\).\\
Here, there is a unique integer \(z\) between \(0\) and \(998244352\) such that \(xz \equiv y \pmod {998244353}\). Report this \(z\).

*** Constraints

- \(2 \leq N \leq 100\)
- \(1 \leq A, B < N\)
- \(1 \leq P, Q \leq 10\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(A\) \(B\) \(P\) \(Q\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4 2 3 3 2
#+end_example

*** Sample Output 1

#+begin_example
665496236
#+end_example

If Takahashi's die shows \(2\) or \(3\) in his first turn, he goes to point \(4\) and wins.\\
If Takahashi's die shows \(1\) in his first turn, he goes to point \(3\), and Aoki will always go to point \(4\) in the next turn and win.\\
Thus, Takahashi wins with the probability \(\frac{2}{3}\).

--------------

*** Sample Input 2

#+begin_example
6 4 2 1 1
#+end_example

*** Sample Output 2

#+begin_example
1
#+end_example

The dice always show \(1\).\\
Here, Takahashi goes to point \(5\), Aoki goes to point \(3\), and Takahashi goes to point \(6\), so Takahashi always wins.

--------------

*** Sample Input 3

#+begin_example
100 1 1 10 10
#+end_example

*** Sample Output 3

#+begin_example
264077814
#+end_example


** [[https://atcoder.jp/contests/abc298/tasks/abc298_f][F - Rook Score]]

Score : \(500\) points

*** Problem Statement

We have a grid with \(10^9\) rows and \(10^9\) columns. Let \((i,j)\) denote the square at the \(i\)-th row from the top and \(j\)-th column from the left.

For \(i=1,2,\ldots,N\), a positive integer \(x_i\) is written on \((r_i,c_i)\). On the other \(10^{18}-N\) squares, \(0\) is written.

You choose a square \((R,C)\) and compute the sum \(S\) of the integers written on the \(2 \times 10^9 - 1\) squares that share a row or column with \((R,C)\).

Find the maximum possible value of \(S\).

*** Constraints

- \(1 \leq N \leq 2 \times 10^5\)
- \(1 \leq r_i,c_i,x_i \leq 10^9\)
- \((r_i,c_i) \neq (r_j,c_j)\) if \(i \neq j\).
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(r_1\) \(c_1\) \(x_1\)
\(\vdots\)
\(r_N\) \(c_N\) \(x_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4
1 1 2
1 2 9
2 1 8
3 2 3
#+end_example

*** Sample Output 1

#+begin_example
20
#+end_example

If you choose \((2,2)\) as \((R,C)\), then \(S\) will be \(20\), which is the maximum possible value.

--------------

*** Sample Input 2

#+begin_example
1
1 1000000000 1
#+end_example

*** Sample Output 2

#+begin_example
1
#+end_example

--------------

*** Sample Input 3

#+begin_example
15
158260522 877914575 602436426
24979445 861648772 623690081
433933447 476190629 262703497
211047202 971407775 628894325
731963982 822804784 450968417
430302156 982631932 161735902
880895728 923078537 707723857
189330739 910286918 802329211
404539679 303238506 317063340
492686568 773361868 125660016
650287940 839296263 462224593
492601449 384836991 191890310
576823355 782177068 404011431
818008580 954291757 160449218
155374934 840594328 164163676
#+end_example

*** Sample Output 3

#+begin_example
1510053068
#+end_example


** [[https://atcoder.jp/contests/abc296/tasks/abc296_e][E - Transition Game]]

Score : \(500\) points

*** Problem Statement

You are given a sequence of \(N\) numbers: \(A=(A_1,A_2,\ldots,A_N)\). Here, each \(A_i\) \((1\leq i\leq N)\) satisfies \(1\leq A_i \leq N\).

Takahashi and Aoki will play \(N\) rounds of a game. For each \(i=1,2,\ldots,N\), the \(i\)-th game will be played as follows.

1. Aoki specifies a positive integer \(K_i\).

2. After knowing \(K_i\) Aoki has specified, Takahashi chooses an integer \(S_i\) between \(1\) and \(N\), inclusive, and writes it on a blackboard.

3. Repeat the following \(K_i\) times.

   - Replace the integer \(x\) written on the blackboard with \(A_x\).

If \(i\) is written on the blackboard after the \(K_i\) iterations, Takahashi wins the \(i\)-th round; otherwise, Aoki wins.\\
Here, \(K_i\) and \(S_i\) can be chosen independently for each \(i=1,2,\ldots,N\).

Find the number of rounds Takahashi wins if both players play optimally to win.

*** Constraints

- \(1\leq N\leq 2\times 10^5\)
- \(1\leq A_i\leq N\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\ldots\) \(A_N\)
#+end_example

*** Output

Find the number of rounds Takahashi wins if both players play optimally to win.

--------------

*** Sample Input 1

#+begin_example
3
2 2 3
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

In the first round, if Aoki specifies \(K_1=2\), Takahashi cannot win whichever option he chooses for \(S_1\): \(1\), \(2\), or \(3\).

For example, if Takahashi writes \(S_1=1\) on the initial blackboard, the two operations will change this number as follows: \(1\to 2(=A_1)\), \(2\to 2(=A_2)\). The final number on the blackboard will be \(2(\neq 1)\), so Aoki wins.

On the other hand, in the second and third rounds, Takahashi can win by writing \(2\) and \(3\), respectively, on the initial blackboard, whatever value Aoki specifies as \(K_i\).

Therefore, if both players play optimally to win, Takashi wins two rounds: the second and the third. Thus, you should print \(2\).

--------------

*** Sample Input 2

#+begin_example
2
2 1
#+end_example

*** Sample Output 2

#+begin_example
2
#+end_example

In the first round, Takahashi can win by writing \(2\) on the initial blackboard if \(K_1\) specified by Aoki is odd, and \(1\) if it is even.

Similarly, there is a way for Takahashi to win the second round. Thus, Takahashi can win both rounds: the answer is \(2\).


** [[https://atcoder.jp/contests/abc293/tasks/abc293_e][E - Geometric Progression]]

Score : \(500\) points

*** Problem Statement

Given integers \(A\), \(X\), and \(M\), find \(\displaystyle \sum_{i = 0}^{X-1} A^i\), modulo \(M\).

*** Constraints

- \(1 \leq A, M \leq 10^9\)
- \(1 \leq X \leq 10^{12}\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(A\) \(X\) \(M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3 4 7
#+end_example

*** Sample Output 1

#+begin_example
5
#+end_example

\(3^0 + 3^1 + 3^2 + 3^3 = 40\), which equals \(5\) modulo \(7\), so \(5\) should be printed.

--------------

*** Sample Input 2

#+begin_example
8 10 9
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

--------------

*** Sample Input 3

#+begin_example
1000000000 1000000000000 998244353
#+end_example

*** Sample Output 3

#+begin_example
919667211
#+end_example


** [[https://atcoder.jp/contests/abc292/tasks/abc292_e][E - Transitivity]]

Score : \(500\) points

*** Problem Statement

You are given a simple directed graph with \(N\) vertices numbered \(1\) to \(N\) and \(M\) edges numbered \(1\) to \(M\). Edge \(i\) is a directed edge from vertex \(u_i\) to vertex \(v_i\).

You may perform the following operation zero or more times.

- Choose distinct vertices \(x\) and \(y\) such that there is no directed edge from vertex \(x\) to vertex \(y\), and add a directed edge from vertex \(x\) to vertex \(y\).

Find the minimum number of times you need to perform the operation to make the graph satisfy the following condition.

- For every triple of distinct vertices \(a\), \(b\), and \(c\), if there are directed edges from vertex \(a\) to vertex \(b\) and from vertex \(b\) to vertex \(c\), there is also a directed edge from vertex \(a\) to vertex \(c\).

*** Constraints

- \(3 \leq N \leq 2000\)
- \(0 \leq M \leq 2000\)
- \(1 \leq u_i ,v_i \leq N\)
- \(u_i \neq v_i\)
- \((u_i,v_i) \neq (u_j,v_j)\) if \(i \neq j\).
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(u_1\) \(v_1\)
\(\vdots\)
\(u_M\) \(v_M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4 3
2 4
3 1
4 3
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

Initially, the condition is not satisfied because, for instance, for vertices \(2\), \(4\), and \(3\), there are directed edges from vertex \(2\) to vertex \(4\) and from vertex \(4\) to vertex \(3\), but not from vertex \(2\) to vertex \(3\).

You can make the graph satisfy the condition by adding the following three directed edges:

- one from vertex \(2\) to vertex \(3\),
- one from vertex \(2\) to vertex \(1\), and
- one from vertex \(4\) to vertex \(1\).

On the other hand, the condition cannot be satisfied by adding two or fewer edges, so the answer is \(3\).

--------------

*** Sample Input 2

#+begin_example
292 0
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

--------------

*** Sample Input 3

#+begin_example
5 8
1 2
2 1
1 3
3 1
1 4
4 1
1 5
5 1
#+end_example

*** Sample Output 3

#+begin_example
12
#+end_example


** [[https://atcoder.jp/contests/abc292/tasks/abc292_f][F - Regular Triangle Inside a Rectangle]]

Score : \(500\) points

*** Problem Statement

Find the maximum side length of a regular triangle that can be drawn within a rectangle whose side lengths are \(A\) and \(B\).

*** Constraints

- \(1 \leq A,B \leq 1000\)
- \(A\) and \(B\) are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(A\) \(B\)
#+end_example

*** Output

Print the answer.\\
Your output is considered correct if the absolute or relative error from the true answer is at most \(10^{-9}\).

--------------

*** Sample Input 1

#+begin_example
1 1
#+end_example

*** Sample Output 1

#+begin_example
1.03527618041008295791
#+end_example

The following figure shows an optimal drawing, with the side length of \(\sqrt{6} - \sqrt{2}\).

[[https://img.atcoder.jp/abc292/2cd44ddc3d8241e510a356be9533631f.png]]

Note that the sample output does not strictly match \(\sqrt{6}- \sqrt{2}\), but the error is within \(10^{-9}\), so it is considered correct.


** [[https://atcoder.jp/contests/abc291/tasks/abc291_f][F - Teleporter and Closed off]]

Score : \(500\) points

*** Problem Statement

There are \(N\) cities numbered city \(1\), city \(2\), \(\ldots\), and city \(N\).\\
There are also one-way teleporters that send you to different cities. Whether a teleporter can send you directly from city \(i\) \((1\leq i\leq N)\) to another is represented by a length-\(M\) string \(S_i\) consisting of =0= and =1=. Specifically, for \(1\leq j\leq N\),

- if \(1\leq j-i\leq M\) and the \((j-i)\)-th character of \(S_i\) is =1=, then a teleporter can send you directly from city \(i\) to city \(j\);
- otherwise, it cannot send you directly from city \(i\) to city \(j\).

Solve the following problem for \(k=2,3,\ldots, N-1\):

#+begin_quote
Can you travel from city \(1\) to city \(N\) *without visiting city \(k\)* by repeatedly using a teleporter? If you can, print the minimum number of times you need to use a teleporter; otherwise, print \(-1\).

#+end_quote

*** Constraints

- \(3 \leq N \leq 10^5\)
- \(1\leq M\leq 10\)
- \(M<N\)
- \(S_i\) is a string of length \(M\) consisting of =0= and =1=.
- If \(i+j>N\), then the \(j\)-th character of \(S_i\) is =0=.
- \(N\) and \(M\) are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(S_1\)
\(S_2\)
\(\vdots\)
\(S_N\)
#+end_example

*** Output

Print \((N-2)\) integers, separated by spaces, in a single line. The \(i\)-th \((1\leq i\leq N-2)\) integer should be the answer to the problem for \(k=i+1\).

--------------

*** Sample Input 1

#+begin_example
5 2
11
01
11
10
00
#+end_example

*** Sample Output 1

#+begin_example
2 3 2
#+end_example

A teleporter sends you

- from city \(1\) to cities \(2\) and \(3\);
- from city \(2\) to city \(4\);
- from city \(3\) to cities \(4\) and \(5\);
- from city \(4\) to city \(5\); and
- from city \(5\) to nowhere.

Therefore, there are three paths to travel from city \(1\) to city \(5\):

- path \(1\) : city \(1\) \(\to\) city \(2\) \(\to\) city \(4\) \(\to\) city \(5\);
- path \(2\) : city \(1\) \(\to\) city \(3\) \(\to\) city \(4\) \(\to\) city \(5\); and
- path \(3\) : city \(1\) \(\to\) city \(3\) \(\to\) city \(5\).

Among these paths,

- two paths, path \(2\) and path \(3\), do not visit city \(2\). Among them, path \(3\) requires the minimum number of teleporter uses (twice).
- Path \(1\) is the only path without city \(3\). It requires using a teleporter three times.
- Path \(3\) is the only path without city \(4\). It requires using a teleporter twice.

Thus, \(2\), \(3\), and \(2\), separated by spaces, should be printed.

--------------

*** Sample Input 2

#+begin_example
6 3
101
001
101
000
100
000
#+end_example

*** Sample Output 2

#+begin_example
-1 3 3 -1
#+end_example

The only path from city \(1\) to city \(6\) is city \(1\) \(\to\) city \(2\) \(\to\) city \(5\) \(\to\) city \(6\).\\
For \(k=2,5\), there is no way to travel from city \(1\) to city \(6\) without visiting city \(k\).\\
For \(k=3,4\), the path above satisfies the condition; it requires using a teleporter three times.

Thus, \(-1\), \(3\), \(3\), and \(-1\), separated by spaces, should be printed.

Note that a teleporter is one-way; a teleporter can send you from city \(3\) to city \(4\), but not from city \(4\) to city \(3\),\\
so the following path, for example, is invalid: city \(1\) \(\to\) city \(4\) \(\to\) city \(3\) \(\to\) city \(6\).


** [[https://atcoder.jp/contests/abc290/tasks/abc290_e][E - Make it Palindrome]]

Score : \(500\) points

*** Problem Statement

For a sequence \(X\), let \(f(X) =\) (the minimum number of elements one must modify to make \(X\) a palindrome).

Given a sequence \(A\) of length \(N\), find the sum of \(f(X)\) over all *contiguous* subarrays of \(A\).

Here, a sequence \(X\) of length \(m\) is said to be a palindrome if and only if the \(i\)-th and the \((m+1-i)\)-th elements of \(X\) are equal for all \(1 \le i \le m\).

*** Constraints

- All values in the input are integers.
- \(1 \le N \le 2 \times 10^5\)
- \(1 \le A_i \le N\)

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
5
5 2 1 2 2
#+end_example

*** Sample Output 1

#+begin_example
9
#+end_example

- \(f(5) = 0\)
- \(f(2) = 0\)
- \(f(1) = 0\)
- \(f(2) = 0\)
- \(f(2) = 0\)
- \(f(5,2) = 1\)
- \(f(2,1) = 1\)
- \(f(1,2) = 1\)
- \(f(2,2) = 0\)
- \(f(5,2,1) = 1\)
- \(f(2,1,2) = 0\)
- \(f(1,2,2) = 1\)
- \(f(5,2,1,2) = 2\)
- \(f(2,1,2,2) = 1\)
- \(f(5,2,1,2,2) = 1\)

Therefore, the sought answer is \(9\).


** [[https://atcoder.jp/contests/abc289/tasks/abc289_e][E - Swap Places]]

Score : \(500\) points

*** Problem Statement

There is a simple undirected graph with \(N\) vertices numbered \(1\) through \(N\) and \(M\) edges numbered \(1\) through \(M\). Edge \(i\) connects vertex \(u_i\) and vertex \(v_i\).\\
Every vertex is painted either red or blue. The color of vertex \(i\) is represented by \(C_i\); vertex \(i\) is painted red if \(C_i\) is \(0\) and blue if \(C_i\) is \(1\).

Now, Takahashi is on vertex \(1\) and Aoki is on vertex \(N\).\\
They may repeat the following move zero or more times.

- Each of the two simultaneously moves to a vertex adjacent to the current vertex.\\
  Here, the vertices that Takahashi and Aoki move to must have different colors.

By repeating the move above, can Takahashi and Aoki simultaneously end up on vertices \(N\) and \(1\), respectively?\\
If it is possible, find the minimum number of moves required. If it is impossible, print =-1=.

You are given \(T\) at the beginning of the input. Solve the problem for \(T\) test cases.

*** Constraints

- \(1 \leq T \leq 1000\)
- \(2 \leq N \leq 2000\)
- \(1 \leq M \leq \min(\frac{N(N-1)}{2}, 2000)\)
- \(C_i \in \lbrace 0, 1 \rbrace\)
- \(1 \leq u_i, v_i \leq N\)
- The graph given in the input is simple.
- All values in the input are integers.
- The sum of \(N\) over all test cases does not exceed \(2000\).
- The sum of \(M\) over all test cases does not exceed \(2000\).

--------------

*** Input

The input is given from Standard Input in the following format, where \(\text{test}_i\) denotes the \(i\)-th test case:

#+begin_example
\(T\)
\(\text{test}_1\)
\(\text{test}_2\)
\(\vdots\)
\(\text{test}_T\)
#+end_example

Each test case is given in the following format:

#+begin_example
\(N\) \(M\)
\(C_1\) \(C_2\) \(\dots\) \(C_N\)
\(u_1\) \(v_1\)
\(u_2\) \(v_2\)
\(\vdots\)
\(u_M\) \(v_M\)
#+end_example

*** Output

Print \(T\) lines. The \(i\)-th line should contain the answer to the \(i\)-th test case.\\
For each test case, print the minimum number of moves required for Takahashi and Aoki to simultaneously end up in vertices \(N\) and \(1\), respectively, if it is possible, and =-1= otherwise.

--------------

*** Sample Input 1

#+begin_example
3
4 4
0 1 0 1
1 2
2 3
1 3
2 4
3 3
0 1 0
1 2
2 3
1 3
6 6
0 0 1 1 0 1
1 2
2 6
3 6
4 6
4 5
2 4
#+end_example

*** Sample Output 1

#+begin_example
3
-1
3
#+end_example

For the \(1\)-st test case, Takahashi and Aoki can achieve the objective by making the following \(3\) moves, which is the minimum number:

- Takahashi moves to vertex \(3\), and Aoki moves to vertex \(2\).
- Takahashi moves to vertex \(2\), and Aoki moves to vertex \(3\).
- Takahashi moves to vertex \(4\), and Aoki moves to vertex \(1\).

Note that in the \(1\)-st move, it is disallowed that both Takahashi and Aoki move to vertex \(2\) (because the colors of vertices that Takahashi and Aoki move to must be different.)

For the \(2\)-nd case, no matter how they move, they cannot achieve the objective.


** [[https://atcoder.jp/contests/abc285/tasks/abc285_e][E - Work or Rest]]

Score : \(500\) points

*** Problem Statement

In the world where Takahashi lives, a week has \(N\) days.

Takahashi, the king of the Kingdom of AtCoder, assigns "weekday" or "holiday" to each day of week. The assignments should be the same for all weeks. At least one day of week should be assigned "holiday".

Under such conditions, the productivity of the \(i\)-th day of week is defined by a sequence \(A\) of length \(N\) as follows:

- if the \(i\)-th day of week is "holiday", its productivity is \(0\);
- if the \(i\)-th day of week is "weekday", its productivity is \(A_{\min(x,y)}\), if the last holiday is \(x\) days before and the next one is \(y\) days after.
  - Note that the last/next holiday may belong to a different week due to the periodic assignments. For details, see the Samples.

Find the maximum productivity per week when the assignments are chosen optimally.\\
Here, the productivity per week refers to the sum of the productivities of the \(1\)-st, \(2\)-nd, \(\dots\), and \(N\)-th day of week.

*** Constraints

- All values in the input are integers.
- \(1 \le N \le 5000\)
- \(1 \le A_i \le 10^9\)

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
7
10 10 1 1 1 1 1
#+end_example

*** Sample Output 1

#+begin_example
50
#+end_example

For example, we can assign "holiday" to the \(2\)-nd and \(4\)-th day of week and "weekday" to the rest to achieve a productivity of \(50\) per week:

- the \(1\)-st day of week ... \(x=4\) and \(y=1\), so its productivity is \(A_1 = 10\).
- the \(2\)-nd day of week ... it is holiday, so its productivity is \(0\).
- the \(3\)-st day of week ... \(x=1\) and \(y=1\), so its productivity is \(A_1 = 10\).
- the \(4\)-th day of week ... it is holiday, so its productivity is \(0\).
- the \(5\)-th day of week ... \(x=1\) and \(y=4\), so its productivity is \(A_1 = 10\).
- the \(6\)-th day of week ... \(x=2\) and \(y=3\), so its productivity is \(A_2 = 10\).
- the \(7\)-th day of week ... \(x=3\) and \(y=2\), so its productivity is \(A_2 = 10\).

It is impossible to make the productivity per week \(51\) or greater.

--------------

*** Sample Input 2

#+begin_example
10
200000000 500000000 1000000000 800000000 100000000 80000000 600000 900000000 1 20
#+end_example

*** Sample Output 2

#+begin_example
5100000000
#+end_example

--------------

*** Sample Input 3

#+begin_example
20
38 7719 21238 2437 8855 11797 8365 32285 10450 30612 5853 28100 1142 281 20537 15921 8945 26285 2997 14680
#+end_example

*** Sample Output 3

#+begin_example
236980
#+end_example


** [[https://atcoder.jp/contests/abc284/tasks/abc284_f][F - ABCBAC]]

Score : \(500\) points

*** Problem Statement

For a string \(S\) of length \(N\) and an integer \(i\ (0\leq i\leq N)\), let us define the string \(f_i(S)\) as the concatenation of:

- the first \(i\) characters of \(S\),
- the reversal of \(S\), and
- the last \((N-i)\) characters of \(S\),

in this order. For instance, if \(S=\) =abc= and \(i=2\), we have \(f_i(S)=\) =abcbac=.

You are given a string \(T\) of length \(2N\). Find a pair of a string \(S\) of length \(N\) and an integer \(i\ (0\leq i\leq N)\) such that \(f_i(S)=T\). If no such pair of \(S\) and \(i\) exists, report that fact.

*** Constraints

- \(1\leq N \leq 10^6\)
- \(N\) is an integer.
- \(T\) is a string of length \(2N\) consisting of lowercase English letters.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(T\)
#+end_example

*** Output

If no pair of \(S\) and \(i\) satisfies the condition, print =-1=. Otherwise, print \(S\) and \(i\), separated by a newline. If multiple pairs of \(S\) and \(i\) satisfy the condition, you may print any of them.

--------------

*** Sample Input 1

#+begin_example
3
abcbac
#+end_example

*** Sample Output 1

#+begin_example
abc
2
#+end_example

As mentioned in the problem statement, if \(S=\) =abc= and \(i=2\), we have \(f_i(S)=\) =abcbac=, which equals \(T\), so you should print =abc= and \(2\).

--------------

*** Sample Input 2

#+begin_example
4
abababab
#+end_example

*** Sample Output 2

#+begin_example
abab
1
#+end_example

\(S=\) =abab= and \(i=3\) also satisfy the condition.

--------------

*** Sample Input 3

#+begin_example
3
agccga
#+end_example

*** Sample Output 3

#+begin_example
cga
0
#+end_example

\(S=\) =agc= and \(i=3\) also satisfy the condition.

--------------

*** Sample Input 4

#+begin_example
4
atcodeer
#+end_example

*** Sample Output 4

#+begin_example
-1
#+end_example

If no pair of \(S\) and \(i\) satisfies the condition, print =-1=.


** [[https://atcoder.jp/contests/abc281/tasks/abc281_e][E - Least Elements]]

Score : \(500\) points

*** Problem Statement

You are given an integer sequence \(A = (A_1, \dots, A_N)\) of length \(N\), and integers \(M\) and \(K\).\\
For each \(i = 1, \dots, N - M + 1\), solve the following independent problem.

#+begin_quote
Find the sum of the first \(K\) values in the sorted list of the \(M\) integers \(A_i, A_{i + 1}, \dots, A_{i + M - 1}\) in ascending order.

#+end_quote

*** Constraints

- \(1 \leq K \leq M \leq N \leq 2 \times 10^5\)
- \(1 \leq A_i \leq 10^9\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(K\)
\(A_1\) \(A_2\) \(\ldots\) \(A_N\)
#+end_example

*** Output

Let \(\mathrm{answer}_k\) be the answer to the problem for \(i = k\), and print them in the following format:

#+begin_example
\(\mathrm{answer}_1\) \(\mathrm{answer}_2\) \(\ldots\) \(\mathrm{answer}_{N-M+1}\)
#+end_example

--------------

*** Sample Input 1

#+begin_example
6 4 3
3 1 4 1 5 9
#+end_example

*** Sample Output 1

#+begin_example
5 6 10
#+end_example

- For \(i = 1\), sorting \(A_i, A_{i+1}, A_{i+2}, A_{i+3}\) in ascending order yields \(1, 1, 3, 4\), where the sum of the first three values is \(5\).
- For \(i = 2\), sorting \(A_i, A_{i+1}, A_{i+2}, A_{i+3}\) in ascending order yields \(1, 1, 4, 5\), where the sum of the first three values is \(6\).
- For \(i = 3\), sorting \(A_i, A_{i+1}, A_{i+2}, A_{i+3}\) in ascending order yields \(1, 4, 5, 9\), where the sum of the first three values is \(10\).

--------------

*** Sample Input 2

#+begin_example
10 6 3
12 2 17 11 19 8 4 3 6 20
#+end_example

*** Sample Output 2

#+begin_example
21 14 15 13 13
#+end_example


** [[https://atcoder.jp/contests/abc280/tasks/abc280_e][E - Critical Hit]]

Score : \(500\) points

*** Problem Statement

There is a monster with initial stamina \(N\).\\
Takahashi repeatedly attacks the monster while the monster's stamina remains \(1\) or greater.

An attack by Takahashi reduces the monster's stamina by \(2\) with probability \(\frac{P}{100}\) and by \(1\) with probability \(1-\frac{P}{100}\).

Find the expected value, modulo \(998244353\) (see Notes), of the number of attacks before the monster's stamina becomes \(0\) or less.

*** Notes

We can prove that the sought expected value is always a finite rational number. Moreover, under the Constraints of this problem, when the value is represented as \(\frac{P}{Q}\) by two coprime integers \(P\) and \(Q\), we can show that there exists a unique integer \(R\) such that \(R \times Q \equiv P\pmod{998244353}\) and \(0 \leq R \lt 998244353\). Print such \(R\).

*** Constraints

- \(1 \leq N \leq 2\times 10^5\)
- \(0 \leq P \leq 100\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(P\)
#+end_example

*** Output

Find the expected value, modulo \(998244353\), of the number of Takahashi's attacks.

--------------

*** Sample Input 1

#+begin_example
3 10
#+end_example

*** Sample Output 1

#+begin_example
229596204
#+end_example

An attack by Takahashi reduces the monster's stamina by \(2\) with probability \(\frac{10}{100}=\frac{1}{10}\) and by \(1\) with probability \(\frac{100-10}{100}=\frac{9}{10}\).

- The monster's initial stamina is \(3\).
- After the first attack, the monster's stamina is \(2\) with probability \(\frac{9}{10}\) and \(1\) with probability \(\frac{1}{10}\).
- After the second attack, the monster's stamina is \(1\) with probability \(\frac{81}{100}\), \(0\) with probability \(\frac{18}{100}\), and \(-1\) with probability \(\frac{1}{100}\). With probability \(\frac{18}{100}+\frac{1}{100}=\frac{19}{100}\), the stamina becomes \(0\) or less, and Takahashi stops attacking after two attacks.
- If the stamina remains \(1\) after two attacks, the monster's stamina always becomes \(0\) or less by the third attack, so he stops attacking after three attacks.

Therefore, the expected value is \(2\times \frac{19}{100}+3\times\left(1-\frac{19}{100}\right)=\frac{281}{100}\). Since \(229596204 \times 100 \equiv 281\pmod{998244353}\), print \(229596204\).

--------------

*** Sample Input 2

#+begin_example
5 100
#+end_example

*** Sample Output 2

#+begin_example
3
#+end_example

Takahashi's attack always reduces the monster's stamina by \(2\). After the second attack, the stamina remains \(5-2\times 2=1\), so the third one is required.

--------------

*** Sample Input 3

#+begin_example
280 59
#+end_example

*** Sample Output 3

#+begin_example
567484387
#+end_example


** [[https://atcoder.jp/contests/abc279/tasks/abc279_e][E - Cheating Amidakuji]]

Score : \(500\) points

*** Problem Statement

You are given a sequence of length \(M\) consisting of integers between \(1\) and \(N-1\), inclusive: \(A=(A_1,A_2,\dots,A_M)\). Answer the following question for \(i=1, 2, \dots, M\).

- There is a sequence \(B=(B_1,B_2,\dots,B_N)\). Initially, we have \(B_j=j\) for each \(j\). Let us perform the following operation for \(k=1, 2, \dots, i-1, i+1, \dots, M\) in this order (in other words, for integers \(k\) between \(1\) and \(M\) except \(i\) in ascending order).
  - Swap the values of \(B_{A_k}\) and \(B_{A_k+1}\).
- After all the operations, let \(S_i\) be the value of \(j\) such that \(B_j=1\). Find \(S_i\).

*** Constraints

- \(2 \leq N \leq 2\times 10^5\)
- \(1 \leq M \leq 2\times 10^5\)
- \(1 \leq A_i \leq N-1\ (1\leq i \leq M)\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(A_2\) \(\dots\) \(A_M\)
#+end_example

*** Output

Print \(M\) lines. The \(i\)-th line \((1\leq i \leq M)\) should contain the value \(S_i\) as an integer.

--------------

*** Sample Input 1

#+begin_example
5 4
1 2 3 2
#+end_example

*** Sample Output 1

#+begin_example
1
3
2
4
#+end_example

For \(i = 2\), the operations change \(B\) as follows.

- Initially, \(B = (1,2,3,4,5)\).
- Perform the operation for \(k=1\). That is, swap the values of \(B_1\) and \(B_2\), making \(B = (2,1,3,4,5)\).
- Perform the operation for \(k=3\). That is, swap the values of \(B_3\) and \(B_4\), making \(B = (2,1,4,3,5)\).
- Perform the operation for \(k=4\). That is, swap the values of \(B_2\) and \(B_3\), making \(B = (2,4,1,3,5)\).

After all the operations, we have \(B_3=1\), so \(S_2 = 3\).

Similarly, we have the following.

- For \(i=1\): performing the operation for \(k=2,3,4\) in this order makes \(B=(1,4,3,2,5)\), so \(S_1=1\).
- For \(i=3\): performing the operation for \(k=1,2,4\) in this order makes \(B=(2,1,3,4,5)\), so \(S_3=2\).
- For \(i=4\): performing the operation for \(k=1,2,3\) in this order makes \(B=(2,3,4,1,5)\), so \(S_4=4\).

--------------

*** Sample Input 2

#+begin_example
3 3
2 2 2
#+end_example

*** Sample Output 2

#+begin_example
1
1
1
#+end_example

--------------

*** Sample Input 3

#+begin_example
10 10
1 1 1 9 4 4 2 1 3 3
#+end_example

*** Sample Output 3

#+begin_example
2
2
2
3
3
3
1
3
4
4
#+end_example


** [[https://atcoder.jp/contests/abc278/tasks/abc278_f][F - Shiritori]]

Score : \(500\) points

*** Problem Statement

You are given \(N\) strings \(S _ 1,S _ 2,\ldots,S _ N\). \(S _ i\ (1\leq i\leq N)\) is a non-empty string of length at most \(10\) consisting of lowercase English letters, and the strings are pairwise distinct.

Taro the First and Jiro the Second play a word-chain game. In this game, the two players take alternating turns, with Taro the First going first. In each player's turn, the player chooses an integer \(i\ (1\leq i\leq N)\), which should satisfy the following two conditions:

- \(i\) is different from any integer chosen by the two players so far since the game started;
- the current turn is the first turn of the game, or the last character of \(S_j\) equals the first character of \(S_i\), where \(j\) is the last integer chosen.

The player who is unable to choose a conforming \(i\) loses; the other player wins.

Determine which player will win if the two players play optimally.

*** Constraints

- \(1 \leq N \leq 16\)
- \(N\) is an integer.
- \(S _ i\ (1\leq i\leq N)\) is a non-empty string of length at most \(10\) consisting of lowercase English letters.
- \(S _ i\neq S _ j\ (1\leq i\lt j\leq N)\)

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(S_1\)
\(S_2\)
\(\vdots\)
\(S_N\)
#+end_example

*** Output

Print =First= if Taro the First wins when the two players play optimally; print =Second= if Jiro the Second wins.

--------------

*** Sample Input 1

#+begin_example
6
enum
float
if
modint
takahashi
template
#+end_example

*** Sample Output 1

#+begin_example
First
#+end_example

For example, the game progresses as follows. Note that the two players may not be playing optimally in this example.

- Taro the First chooses \(i=3\). \(S _ i=\)=if=.
- Jiro the Second chooses \(i=2\). \(S _ i=\)=float=, and the last character of =if= equals the first character of =float=.
- Taro the First chooses \(i=5\). \(S _ i=\)=takahashi=, and the last character of =float= equals the first character of =takahashi=.
- Jiro the Second is unable to choose \(i\neq2,3,5\) such that \(S _ i\) starts with =i=, so he loses.

In this case, Taro the First wins.

--------------

*** Sample Input 2

#+begin_example
10
catch
chokudai
class
continue
copy
exec
havoc
intrinsic
static
yucatec
#+end_example

*** Sample Output 2

#+begin_example
Second
#+end_example

--------------

*** Sample Input 3

#+begin_example
16
mnofcmzsdx
lgeowlxuqm
ouimgdjxlo
jhwttcycwl
jbcuioqbsj
mdjfikdwix
jhvdpuxfil
peekycgxco
sbvxszools
xuuqebcrzp
jsciwvdqzl
obblxzjhco
ptobhnpfpo
muizaqtpgx
jtgjnbtzcl
sivwidaszs
#+end_example

*** Sample Output 3

#+begin_example
First
#+end_example


** [[https://atcoder.jp/contests/abc276/tasks/abc276_f][F - Double Chance]]



** [[https://atcoder.jp/contests/abc275/tasks/abc275_e][E - Sugoroku 4]]

Score : \(500\) points

*** Problem Statement

Takahashi is playing sugoroku, a board game.

The board has \(N+1\) squares, numbered \(0\) to \(N\). Takahashi starts at square \(0\) and goes for square \(N\).

The game uses a roulette wheel with \(M\) numbers from \(1\) to \(M\) that appear with equal probability. Takahashi spins the wheel and moves by the number of squares indicated by the wheel. If this would send him beyond square \(N\), he turns around at square \(N\) and goes back by the excessive number of squares.

For instance, assume that \(N=4\) and Takahashi is at square \(3\). If the wheel shows \(4\), the excessive number of squares beyond square \(4\) is \(3+4-4=3\). Thus, he goes back by three squares from square \(4\) and arrives at square \(1\).

When Takahashi arrives at square \(N\), he wins and the game ends.

Find the probability, modulo \(998244353\), that Takahashi wins when he may spin the wheel at most \(K\) times.

How to print a probability modulo \(998244353\)

It can be proved that the sought probability is always a rational number. Additionally, under the Constraints of this problem, when the sought probability is represented as an irreducible fraction \(\frac{y}{x}\), it is guaranteed that \(x\) is not divisible by \(998244353\).

Here, there is a unique integer \(z\) between \(0\) and \(998244352\) such that \(xz \equiv y \pmod{998244353}\). Print this \(z\).

*** Constraints

- \(M \leq N \leq 1000\)
- \(1 \leq M \leq 10\)
- \(1 \leq K \leq 1000\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(K\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
2 2 1
#+end_example

*** Sample Output 1

#+begin_example
499122177
#+end_example

Takahashi wins in one spin if the wheel shows \(2\). Therefore, the probability of winning is \(\frac{1}{2}\).

We have \(2\times 499122177 \equiv 1 \pmod{998244353}\), so the answer to be printed is \(499122177\).

--------------

*** Sample Input 2

#+begin_example
10 5 6
#+end_example

*** Sample Output 2

#+begin_example
184124175
#+end_example

--------------

*** Sample Input 3

#+begin_example
100 1 99
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example


** [[https://atcoder.jp/contests/abc274/tasks/abc274_e][E - Booster]]

Score : \(500\) points

*** Problem Statement

In a two-dimensional plane, there are \(N\) towns and \(M\) chests. Town \(i\) is at the coordinates \((X_i,Y_i)\), and chest \(i\) is at the coordinates \((P_i,Q_i)\).

Takahashi will go on a trip where he starts at the origin, visits all \(N\) towns, and then returns to the origin.\\
It is not mandatory to visit chests, but each chest contains an accelerator. Each time he picks up an accelerator, his moving speed gets multiplied by \(2\).

Takahashi's initial moving speed is \(1\). Find the shortest time needed to complete the trip.

*** Constraints

- \(1 \leq N \leq 12\)
- \(0 \leq M \leq 5\)
- \(-10^9 \leq X_i,Y_i,P_i,Q_i \leq 10^9\)
- \((0,0)\), \((X_i,Y_i)\), and \((P_i,Q_i)\) are distinct.
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(X_1\) \(Y_1\)
\(\vdots\)
\(X_N\) \(Y_N\)
\(P_1\) \(Q_1\)
\(\vdots\)
\(P_M\) \(Q_M\)
#+end_example

*** Output

Print the answer. Your output will be considered correct if the absolute or relative error from the judge's answer is at most \(10^{-6}\).

--------------

*** Sample Input 1

#+begin_example
2 1
1 1
0 1
1 0
#+end_example

*** Sample Output 1

#+begin_example
2.5000000000
#+end_example

Here is one optimal way to complete the trip.

- Go the distance \(1\) from the origin to chest \(1\) at a speed of \(1\), taking a time of \(1\).
- Go the distance \(1\) from chest \(1\) to town \(1\) at a speed of \(2\), taking a time of \(0.5\).
- Go the distance \(1\) from town \(1\) to town \(2\) at a speed of \(2\), taking a time of \(0.5\).
- Go the distance \(1\) from town \(2\) to the origin at a speed of \(2\), taking a time of \(0.5\).

--------------

*** Sample Input 2

#+begin_example
2 1
1 1
0 1
100 0
#+end_example

*** Sample Output 2

#+begin_example
3.4142135624
#+end_example

Here is one optimal way to complete the trip.

- Go the distance \(1.41\ldots\) from the origin to town \(1\) at a speed of \(1\), taking a time of \(1.41\ldots\).
- Go the distance \(1\) from town \(1\) to town \(2\) at a speed of \(1\), taking a time of \(1\).
- Go the distance \(1\) from town \(2\) to the origin at a speed of \(1\), taking a time of \(1\).

--------------

*** Sample Input 3

#+begin_example
1 2
4 4
1 0
0 1
#+end_example

*** Sample Output 3

#+begin_example
4.3713203436
#+end_example

Here is one optimal way to complete the trip.

- Go the distance \(1\) from the origin to chest \(1\) at a speed of \(1\), taking a time of \(1\).
- Go the distance \(1.41\ldots\) from chest \(1\) to chest \(2\) at a speed of \(2\), taking a time of \(0.707\ldots\).
- Go the distance \(5\) from chest \(2\) to town \(1\) at a speed of \(4\), taking a time of \(1.25\).
- Go the distance \(5.65\ldots\) from town \(1\) to the origin at a speed of \(4\), taking a time of \(1.41\ldots\).


** [[https://atcoder.jp/contests/abc272/tasks/abc272_e][E - Add and Mex]]

Score : \(500\) points

*** Problem Statement

You are given an integer sequence \(A=(A_1,A_2,\ldots,A_N)\) of length \(N\).

Perform the following operation \(M\) times:

- For each \(i\ (1\leq i \leq N)\), add \(i\) to \(A_i\). Then, find the minimum non-negative integer not contained in \(A\).

*** Constraints

- \(1\leq N,M \leq 2\times 10^5\)
- \(-10^9\leq A_i\leq 10^9\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(A_2\) \(\ldots\) \(A_N\)
#+end_example

*** Output

Print \(M\) lines.

The \(i\)-th \((1\leq i \leq M)\) line should contain the minimum non-negative integer not contained in \(A\) after the \(i\)-th operation.

--------------

*** Sample Input 1

#+begin_example
3 3
-1 -1 -6
#+end_example

*** Sample Output 1

#+begin_example
2
2
0
#+end_example

The \(1\)-st operation makes the sequence \(A\)

\((-1 + 1, -1 +2 ,-6+3) = (0,1,-3).\)

The minimum non-negative integer not contained in \(A\) is \(2\).

The \(2\)-nd operation makes the sequence \(A\)

\((0 + 1, 1 +2 ,-3+3) = (1,3,0).\)

The minimum non-negative integer not contained in \(A\) is \(2\).

The \(3\)-rd operation makes the sequence \(A\)

\((1 + 1, 3 +2 ,0+3) = (2,5,3).\)

The minimum non-negative integer not contained in \(A\) is \(0\).

--------------

*** Sample Input 2

#+begin_example
5 6
-2 -2 -5 -7 -15
#+end_example

*** Sample Output 2

#+begin_example
1
3
2
0
0
0
#+end_example


** [[https://atcoder.jp/contests/abc271/tasks/abc271_e][E - Subsequence Path]]

Score : \(500\) points

*** Problem Statement

There are \(N\) towns numbered \(1, \dots, N\), and \(M\) roads numbered \(1, \dots, M\).\\
Every road is directed; road \(i\) \((1 \leq i \leq M)\) leads you from Town \(A_i\) to Town \(B_i\). The length of road \(i\) is \(C_i\).

You are given a sequence \(E = (E_1, \dots, E_K)\) of length \(K\) consisting of integers between \(1\) and \(M\). A way of traveling from town \(1\) to town \(N\) using roads is called a *good path* if:

- the sequence of the roads' numbers arranged in the order used in the path is a subsequence of \(E\).

Note that a subsequence of a sequence is a sequence obtained by removing \(0\) or more elements from the original sequence and concatenating the remaining elements without changing the order.

Find the minimum sum of the lengths of the roads used in a good path.\\
If there is no good path, report that fact.

*** Constraints

- \(2 \leq N \leq 2 \times 10^5\)
- \(1 \leq M, K \leq 2 \times 10^5\)
- \(1 \leq A_i, B_i \leq N, A_i \neq B_i \, (1 \leq i \leq M)\)
- \(1 \leq C_i \leq 10^9 \, (1 \leq i \leq M)\)
- \(1 \leq E_i \leq M \, (1 \leq i \leq K)\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(K\)
\(A_1\) \(B_1\) \(C_1\)
\(\vdots\)
\(A_M\) \(B_M\) \(C_M\)
\(E_1\) \(\ldots\) \(E_K\)
#+end_example

*** Output

Find the minimum sum of the lengths of the roads used in a good path.\\
If there is no good path, print =-1=.

--------------

*** Sample Input 1

#+begin_example
3 4 4
1 2 2
2 3 2
1 3 3
1 3 5
4 2 1 2
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

There are two possible good paths as follows:

- Using road \(4\). In this case, the sum of the length of the used road is \(5\).
- Using road \(1\) and \(2\) in this order. In this case, the sum of the lengths of the used roads is \(2 + 2 = 4\).

Therefore, the desired minimum value is \(4\).

--------------

*** Sample Input 2

#+begin_example
3 2 3
1 2 1
2 3 1
2 1 1
#+end_example

*** Sample Output 2

#+begin_example
-1
#+end_example

There is no good path.

--------------

*** Sample Input 3

#+begin_example
4 4 5
3 2 2
1 3 5
2 4 7
3 4 10
2 4 1 4 3
#+end_example

*** Sample Output 3

#+begin_example
14
#+end_example


** [[https://atcoder.jp/contests/abc270/tasks/abc270_d][D - Stones]]

Score : \(400\) points

*** Problem Statement

Takahashi and Aoki will play a game of taking stones using a sequence \((A_1, \ldots, A_K)\).

There is a pile that initially contains \(N\) stones. The two players will alternately perform the following operation, with Takahashi going first.

- Choose an \(A_i\) that is at most the current number of stones in the pile. Remove \(A_i\) stones from the pile.

The game ends when the pile has no stones.

If both players attempt to maximize the total number of stones they remove before the end of the game, how many stones will Takahashi remove?

*** Constraints

- \(1 \leq N \leq 10^4\)
- \(1 \leq K \leq 100\)
- \(1 = A_1 < A_2 < \ldots < A_K \leq N\)
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(A_1\) \(A_2\) \(\ldots\) \(A_K\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
10 2
1 4
#+end_example

*** Sample Output 1

#+begin_example
5
#+end_example

Below is one possible progression of the game.

- Takahashi removes \(4\) stones from the pile.
- Aoki removes \(4\) stones from the pile.
- Takahashi removes \(1\) stone from the pile.
- Aoki removes \(1\) stone from the pile.

In this case, Takahashi removes \(5\) stones. There is no way for him to remove \(6\) or more stones, so this is the maximum.

Below is another possible progression of the game where Takahashi removes \(5\) stones.

- Takahashi removes \(1\) stone from the pile.
- Aoki removes \(4\) stones from the pile.
- Takahashi removes \(4\) stones from the pile.
- Aoki removes \(1\) stone from the pile.

--------------

*** Sample Input 2

#+begin_example
11 4
1 2 3 6
#+end_example

*** Sample Output 2

#+begin_example
8
#+end_example

Below is one possible progression of the game.

- Takahashi removes \(6\) stones.
- Aoki removes \(3\) stones.
- Takahashi removes \(2\) stones.

In this case, Takahashi removes \(8\) stones. There is no way for him to remove \(9\) or more stones, so this is the maximum.

--------------

*** Sample Input 3

#+begin_example
10000 10
1 2 4 8 16 32 64 128 256 512
#+end_example

*** Sample Output 3

#+begin_example
5136
#+end_example


** [[https://atcoder.jp/contests/abc270/tasks/abc270_e][E - Apple Baskets on Circle]]

Score : \(500\) points

*** Problem Statement

There are \(N\) baskets numbered \(1, 2, \ldots, N\) arranged in a circle.\\
For each \(1\leq i \leq N-1\), basket \(i+1\) is to the immediate right of basket \(i\), and basket \(1\) is to the immediate right of basket \(N\).

Basket \(i\) now contains \(A_i\) apples.

Takahashi starts in front of basket \(1\) and repeats the following action.

- If the basket he is facing contains an apple, take one and eat it. Then, regardless of whether he has eaten an apple now, go on to the next basket to the immediate right.

Find the number of apples remaining in each basket when Takahashi has eaten exactly \(K\) apples in total.

*** Constraints

- \(1 \leq N \leq 10^5\)
- \(0 \leq A_i \leq 10^{12}\)
- \(1 \leq K \leq 10^{12}\)
- There are at least \(K\) apples in total. That is, \(\sum_{i=1}^{N}A_i\geq K\).
- All values in the input are integers.

--------------

*** Input

The input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(A_1\) \(A_2\) \(\ldots\) \(A_N\)
#+end_example

*** Output

Print \(N\) integers, with spaces in between.\\
The \(i\)-th integer should be the number of apples remaining in basket \(i\) when Takahashi has eaten exactly \(K\) apples in total.

--------------

*** Sample Input 1

#+begin_example
3 3
1 3 0
#+end_example

*** Sample Output 1

#+begin_example
0 1 0
#+end_example

Takahashi will do the following.

- Basket \(1\), which he is facing, contains an apple, so he takes one and eats it. Then, he goes on to basket \(2\). Now, the baskets have \(0,3,0\) apples.
- Basket \(2\), which he is facing, contains an apple, so he takes one and eats it. Then, he goes on to basket \(3\). Now, the baskets have \(0,2,0\) apples.
- Basket \(3\), which he is facing, contains no apple. Then, he goes on to basket \(1\). Now, the baskets have \(0,2,0\) apples.
- Basket \(1\), which he is facing, contains no apple. Then, he goes on to basket \(2\). Now, the baskets have \(0,2,0\) apples.
- Basket \(2\), which he is facing, contains an apple, so he takes one and eats it. Then, he goes on to basket \(3\). Now, the baskets have \(0,1,0\) apple(s).

--------------

*** Sample Input 2

#+begin_example
2 1000000000000
1000000000000 1000000000000
#+end_example

*** Sample Output 2

#+begin_example
500000000000 500000000000
#+end_example


** [[https://atcoder.jp/contests/abc268/tasks/abc268_d][D - Unique Username]]

Score : \(400\) points

*** Problem Statement


#+begin_quote
Takahashi is having trouble with deciding a username for a service. Write a code to help him.

#+end_quote

Find a string \(X\) that satisfies all of the following conditions:

- \(X\) is obtained by the following procedure:
  - Let \(S_1', S_2', \ldots,S_N'\) be a permutation of \(S_1, S_2, \ldots,S_N\). Let \(X\) be the concatenation of \(S_1'\), (\(1\) or more copies of =_=), \(S_2'\), (\(1\) or more copies of =_=), \(\ldots\), (\(1\) or more copies of =_=), and \(S_N'\), in this order.
- The length of \(X\) is between \(3\) and \(16\), inclusive.
- \(X\) does not coincide with any of \(M\) strings \(T_1,T_2,\ldots,T_M\).

If there is no \(X\) that satisfies all of the conditions, print =-1= instead.

*** Constraints

- \(1 \leq N \leq 8\)
- \(0 \leq M \leq 10^5\)
- \(N\) and \(M\) are integers.
- \(1 \leq |S_i| \leq 16\)
- \(N-1+\sum{|S_i|} \leq 16\)
- \(S_i \neq S_j\) if \(i \neq j\).
- \(S_i\) is a string consisting of lowercase English letters.
- \(3 \leq |T_i| \leq 16\)
- \(T_i \neq T_j\) if \(i \neq j\).
- \(T_i\) is a string consisting of lowercase English letters and =_=.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(S_1\)
\(S_2\)
\(\vdots\)
\(S_N\)
\(T_1\)
\(T_2\)
\(\vdots\)
\(T_M\)
#+end_example

*** Output

Print a string \(X\) that satisfies all of the conditions. If there is no \(X\) that satisfies all of the conditions, print =-1= instead.\\
If there are multiple solutions, print any of them.

--------------

*** Sample Input 1

#+begin_example
1 1
chokudai
chokudai
#+end_example

*** Sample Output 1

#+begin_example
-1
#+end_example

The only string that satisfies the first and second conditions is \(X=\) =chokudai=, but it coincides with \(T_1\).\\
Thus, there is no \(X\) that satisfies all of the conditions, so =-1= should be printed.

--------------

*** Sample Input 2

#+begin_example
2 2
choku
dai
chokudai
choku_dai
#+end_example

*** Sample Output 2

#+begin_example
dai_choku
#+end_example

Strings like =choku__dai= (which has two =_='s between =choku= and =dai=) also satisfy all of the conditions.

--------------

*** Sample Input 3

#+begin_example
2 2
chokudai
atcoder
chokudai_atcoder
atcoder_chokudai
#+end_example

*** Sample Output 3

#+begin_example
-1
#+end_example

=chokudai__atcoder= and =atcoder__chokudai= (which have two =_='s between =chokudai= and =atcoder=) have a length of \(17\), which violates the second condition.

--------------

*** Sample Input 4

#+begin_example
4 4
ab
cd
ef
gh
hoge
fuga
____
_ab_cd_ef_gh_
#+end_example

*** Sample Output 4

#+begin_example
ab__ef___cd_gh
#+end_example

The given \(T_i\) may contain a string that cannot be obtained by the procedure described in the first condition.


** [[https://atcoder.jp/contests/abc267/tasks/abc267_e][E - Erasing Vertices 2]]

Score : \(500\) points

*** Problem Statement

You are given a simple undirected graph with \(N\) vertices and \(M\) edges. The \(i\)-th edge connects Vertices \(U_i\) and \(V_i\). Vertex \(i\) has a positive integer \(A_i\) written on it.

You will repeat the following operation \(N\) times.

- Choose a Vertex \(x\) that is not removed yet, and remove Vertex \(x\) and all edges incident to Vertex \(x\). The cost of this operation is the sum of the integers written on the vertices directly connected by an edge with Vertex \(x\) that are not removed yet.

We define the cost of the entire \(N\) operations as the maximum of the costs of the individual operations. Find the minimum possible cost of the entire operations.

*** Constraints

- \(1 \le N \le 2 \times 10^5\)
- \(0 \le M \le 2 \times 10^5\)
- \(1 \le A_i \le 10^9\)
- \(1 \le U_i,V_i \le N\)
- The given graph is simple.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
\(U_1\) \(V_1\)
\(U_2\) \(V_2\)
\(\vdots\)
\(U_M\) \(V_M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4 3
3 1 4 2
1 2
1 3
4 1
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

By performing the operations as follows, the maximum of the costs of the \(N\) operations can be \(3\).

- Choose Vertex \(3\). The cost is \(A_1=3\).
- Choose Vertex \(1\). The cost is \(A_2+A_4=3\).
- Choose Vertex \(2\). The cost is \(0\).
- Choose Vertex \(4\). The cost is \(0\).

The maximum of the costs of the \(N\) operations cannot be \(2\) or less, so the solution is \(3\).

--------------

*** Sample Input 2

#+begin_example
7 13
464 661 847 514 74 200 188
5 1
7 1
5 7
4 1
4 5
2 4
5 2
1 3
1 6
3 5
1 2
4 6
2 7
#+end_example

*** Sample Output 2

#+begin_example
1199
#+end_example


** [[https://atcoder.jp/contests/abc266/tasks/abc266_e][E - Throwing the Die]]

Score : \(500\) points

*** Problem Statement

Let us play a game using a die. The game consists of at most \(N\) turns, each of which goes as follows.

- Throw a \(6\)-sided die that shows \(1,\ldots,6\) with equal probability, and let \(X\) be the number shown (each throw is independent of the others).
- If it is the \(N\)-th turn now, your *score* is \(X\), and the game ends.
- Otherwise, choose whether to continue or end the game.
  - If you end the game, your score is \(X\), and there is no more turn.

Find the expected value of your score when you play the game to maximize this expected value.

*** Constraints

- \(1 \leq N \leq 100\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
#+end_example

*** Output

Print the answer.\\
Your output is considered correct if its absolute or relative error from the true answer is at most \(10^{-6}\).

--------------

*** Sample Input 1

#+begin_example
1
#+end_example

*** Sample Output 1

#+begin_example
3.5000000000
#+end_example

--------------

*** Sample Input 2

#+begin_example
2
#+end_example

*** Sample Output 2

#+begin_example
4.2500000000
#+end_example

--------------

*** Sample Input 3

#+begin_example
10
#+end_example

*** Sample Output 3

#+begin_example
5.6502176688
#+end_example


** [[https://atcoder.jp/contests/abc266/tasks/abc266_f][F - Well-defined Path Queries on a Namori]]

Score : \(500\) points

*** Problem Statement

You are given a connected simple undirected graph \(G\) with \(N\) vertices numbered \(1\) to \(N\) and \(N\) edges. The \(i\)-th edge connects Vertex \(u_i\) and Vertex \(v_i\) bidirectionally.

Answer the following \(Q\) queries.

- Determine whether there is a unique simple path from Vertex \(x_i\) to Vertex \(y_i\) (a simple path is a path without repetition of vertices).

*** Constraints

- \(3 \leq N \leq 2 \times 10^5\)
- \(1 \leq u_i < v_i\leq N\)
- \((u_i,v_i) \neq (u_j,v_j)\) if \(i \neq j\).
- \(G\) is a connected simple undirected graph with \(N\) vertices and \(N\) edges.
- \(1 \leq Q \leq 2 \times 10^5\)
- \(1 \leq x_i < y_i\leq N\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(u_1\) \(v_1\)
\(u_2\) \(v_2\)
\(\vdots\)
\(u_N\) \(v_N\)
\(Q\)
\(x_1\) \(y_1\)
\(x_2\) \(y_2\)
\(\vdots\)
\(x_Q\) \(y_Q\)
#+end_example

*** Output

Print \(Q\) lines.

The \(i\)-th line \((1 \leq i \leq Q)\) should contain =Yes= if there is a unique simple path from Vertex \(x_i\) to Vertex \(y_i\), and =No= otherwise.

--------------

*** Sample Input 1

#+begin_example
5
1 2
2 3
1 3
1 4
2 5
3
1 2
1 4
1 5
#+end_example

*** Sample Output 1

#+begin_example
No
Yes
No
#+end_example

The simple paths from Vertex \(1\) to \(2\) are \((1,2)\) and \((1,3,2)\), which are not unique, so the answer to the first query is =No=.

The simple path from Vertex \(1\) to \(4\) is \((1,4)\), which is unique, so the answer to the second query is =Yes=.

The simple paths from Vertex \(1\) to \(5\) are \((1,2,5)\) and \((1,3,2,5)\), which are not unique, so the answer to the third query is =No=.

--------------

*** Sample Input 2

#+begin_example
10
3 5
5 7
4 8
2 9
1 2
7 9
1 6
4 10
2 5
2 10
10
1 8
6 9
8 10
6 8
3 10
3 9
1 10
5 8
1 10
7 8
#+end_example

*** Sample Output 2

#+begin_example
Yes
No
Yes
Yes
No
No
Yes
No
Yes
No
#+end_example


** [[https://atcoder.jp/contests/abc265/tasks/abc265_e][E - Warp]]

Score : \(500\) points

*** Problem Statement

Takahashi is at the origin of a two-dimensional plane.\\
Takahashi will repeat teleporting \(N\) times. In each teleportation, he makes one of the following moves:

- Move from the current coordinates \((x,y)\) to \((x+A,y+B)\)
- Move from the current coordinates \((x,y)\) to \((x+C,y+D)\)
- Move from the current coordinates \((x,y)\) to \((x+E,y+F)\)

There are obstacles on \(M\) points \((X_1,Y_1),\ldots,(X_M,Y_M)\) on the plane; he cannot teleport to these coordinates.

How many paths are there resulting from the \(N\) teleportations? Find the count modulo \(998244353\).

*** Constraints

- \(1 \leq N \leq 300\)
- \(0 \leq M \leq 10^5\)
- \(-10^9 \leq A,B,C,D,E,F \leq 10^9\)
- \((A,B)\), \((C,D)\), and \((E,F)\) are distinct.
- \(-10^9 \leq X_i,Y_i \leq 10^9\)
- \((X_i,Y_i)\neq(0,0)\)
- \((X_i,Y_i)\) are distinct.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A\) \(B\) \(C\) \(D\) \(E\) \(F\)
\(X_1\) \(Y_1\)
\(X_2\) \(Y_2\)
\(\vdots\)
\(X_M\) \(Y_M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
2 2
1 1 1 2 1 3
1 2
2 2
#+end_example

*** Sample Output 1

#+begin_example
5
#+end_example

The following \(5\) paths are possible:

- \((0,0)\to(1,1)\to(2,3)\)
- \((0,0)\to(1,1)\to(2,4)\)
- \((0,0)\to(1,3)\to(2,4)\)
- \((0,0)\to(1,3)\to(2,5)\)
- \((0,0)\to(1,3)\to(2,6)\)

--------------

*** Sample Input 2

#+begin_example
10 3
-1000000000 -1000000000 1000000000 1000000000 -1000000000 1000000000
-1000000000 -1000000000
1000000000 1000000000
-1000000000 1000000000
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

--------------

*** Sample Input 3

#+begin_example
300 0
0 0 1 0 0 1
#+end_example

*** Sample Output 3

#+begin_example
292172978
#+end_example


** [[https://atcoder.jp/contests/abc264/tasks/abc264_e][E - Blackout 2]]

Score : \(500\) points

*** Problem Statement

A country has \(N\) cities and \(M\) power plants, which we collectively call places.\\
The places are numbered \(1,2,\dots,N+M\), among which Places \(1,2,\dots,N\) are the cities and Places \(N+1,N+2,\dots,N+M\) are the power plants.

This country has \(E\) power lines. Power Line \(i\) (\(1 \le i \le E\)) connects Place \(U_i\) and Place \(V_i\) bidirectionally.\\
A city is said to be *electrified* if one can reach at least one of the power plants from the city using some power lines.

Now, \(Q\) events will happen. In the \(i\)-th (\(1 \le i \le Q\)) event, Power Line \(X_i\) breaks, making it unusable. Once a power line breaks, it remains broken in the succeeding events.

Find the number of electrified cities right after each events.

*** Constraints

- All values in input are integers.
- \(1 \le N,M\)
- \(N+M \le 2 \times 10^5\)
- \(1 \le Q \le E \le 5 \times 10^5\)
- \(1 \le U_i < V_i \le N+M\)
- If \(i \neq j\), then \(U_i \neq U_j\) or \(V_i \neq V_j\).
- \(1 \le X_i \le E\)
- \(X_i\) are distinct.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(E\)
\(U_1\) \(V_1\)
\(U_2\) \(V_2\)
\(\vdots\)
\(U_E\) \(V_E\)
\(Q\)
\(X_1\)
\(X_2\)
\(\vdots\)
\(X_Q\)
#+end_example

*** Output

Print \(Q\) lines.\\
The \(i\)-th line should contain the number of electrified cities right after the \(i\)-th event.

--------------

*** Sample Input 1

#+begin_example
5 5 10
2 3
4 10
5 10
6 9
2 9
4 8
1 7
3 6
8 10
1 8
6
3
5
8
10
2
7
#+end_example

*** Sample Output 1

#+begin_example
4
4
2
2
2
1
#+end_example

Initially, all cities are electrified.

- The \(1\)-st event breaks Power Line \(3\) that connects Point \(5\) and Point \(10\).
  - Now City \(5\) is no longer electrified, while \(4\) cities remain electrified.
- The \(2\)-nd event breaks Power Line \(5\) that connects Point \(2\) and Point \(9\).
- The \(3\)-rd event breaks Power Line \(8\) that connects Point \(3\) and Point \(6\).
  - Now Cities \(2\) and \(3\) are no longer electrified, while \(2\) cities remain electrified.
- The \(4\)-th event breaks Power Line \(10\) that connects Point \(1\) and Point \(8\).
- The \(5\)-th event breaks Power Line \(2\) that connects Point \(4\) and Point \(10\).
- The \(6\)-th event breaks Power Line \(7\) that connects Point \(1\) and Point \(7\).
  - Now City \(1\) is no longer electrified, while \(1\) city remains electrified.


** [[https://atcoder.jp/contests/abc262/tasks/abc262_d][D - I Hate Non-integer Number]]

Score : \(400\) points

*** Problem Statement

You are given a sequence of positive integers \(A=(a_1,\ldots,a_N)\) of length \(N\).\\
There are \((2^N-1)\) ways to choose one or more terms of \(A\). How many of them have an integer-valued average? Find the count modulo \(998244353\).

*** Constraints

- \(1 \leq N \leq 100\)
- \(1 \leq a_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(a_1\) \(\ldots\) \(a_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3
2 6 2
#+end_example

*** Sample Output 1

#+begin_example
6
#+end_example

For each way to choose terms of \(A\), the average is obtained as follows:

- If just \(a_1\) is chosen, the average is \(\frac{a_1}{1}=\frac{2}{1} = 2\), which is an integer.

- If just \(a_2\) is chosen, the average is \(\frac{a_2}{1}=\frac{6}{1} = 6\), which is an integer.

- If just \(a_3\) is chosen, the average is \(\frac{a_3}{1}=\frac{2}{1} = 2\), which is an integer.

- If \(a_1\) and \(a_2\) are chosen, the average is \(\frac{a_1+a_2}{2}=\frac{2+6}{2} = 4\), which is an integer.

- If \(a_1\) and \(a_3\) are chosen, the average is \(\frac{a_1+a_3}{2}=\frac{2+2}{2} = 2\), which is an integer.

- If \(a_2\) and \(a_3\) are chosen, the average is \(\frac{a_2+a_3}{2}=\frac{6+2}{2} = 4\), which is an integer.

- If \(a_1\), \(a_2\), and \(a_3\) are chosen, the average is \(\frac{a_1+a_2+a_3}{3}=\frac{2+6+2}{3} = \frac{10}{3}\), which is not an integer.

Therefore, \(6\) ways satisfy the condition.

--------------

*** Sample Input 2

#+begin_example
5
5 5 5 5 5
#+end_example

*** Sample Output 2

#+begin_example
31
#+end_example

Regardless of the choice of one or more terms of \(A\), the average equals \(5\).


** [[https://atcoder.jp/contests/abc261/tasks/abc261_e][E - Many Operations]]

Score : \(500\) points

*** Problem Statement

We have a variable \(X\) and \(N\) kinds of operations that change the value of \(X\). Operation \(i\) is represented as a pair of integers \((T_i,A_i)\), and is the following operation:

- if \(T_i=1\), it replaces the value of \(X\) with \(X\ {\rm and}\ A_i\);
- if \(T_i=2\), it replaces the value of \(X\) with \(X\ {\rm or}\ A_i\);
- if \(T_i=3\), it replaces the value of \(X\) with \(X\ {\rm xor}\ A_i\).

Initialize \(X\) with the value of \(C\) and execute the following procedures in order:

- Perform Operation \(1\), and then print the resulting value of \(X\).
- Next, perform Operation \(1, 2\) in this order, and then print the value of \(X\).
- Next, perform Operation \(1, 2, 3\) in this order, and then print the value of \(X\).
- \(\vdots\)
- Next, perform Operation \(1, 2, \ldots, N\) in this order, and then print the value of \(X\).

What are \({\rm and}, {\rm or}, {\rm xor}\)?

The \({\rm and}, {\rm or}, {\rm xor}\) of non-negative integers \(A\) and \(B\) are defined as follows:

- When \(A\ {\rm and}\ B\) is written in base two, the digit in the \(2^k\)'s place (\(k \geq 0\)) is \(1\) if both of the digits in that place of \(A\) and \(B\) are \(1\), and \(0\) otherwise.
- When \(A\ {\rm or}\ B\) is written in base two, the digit in the \(2^k\)'s place (\(k \geq 0\)) is \(1\) if at least one of the digits in that place of \(A\) and \(B\) is \(1\), and \(0\) otherwise.
- When \(A\ {\rm xor}\ B\) is written in base two, the digit in the \(2^k\)'s place (\(k \geq 0\)) is \(1\) if exactly one of the digits in that place of \(A\) and \(B\) is \(1\), and \(0\) otherwise.

For example, \(3\ {\rm and}\ 5 = 1\), \(3\ {\rm or}\ 5 = 7\), and \(3\ {\rm xor}\ 5 = 6\).

*** Constraints

- \(1 \leq N \leq 2\times 10^5\)
- \(1\leq T_i \leq 3\)
- \(0\leq A_i \lt 2^{30}\)
- \(0\leq C \lt 2^{30}\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(C\)
\(T_1\) \(A_1\)
\(T_2\) \(A_2\)
\(\vdots\)
\(T_N\) \(A_N\)
#+end_example

*** Output

Print \(N\) lines, as specified in the Problem Statement.

--------------

*** Sample Input 1

#+begin_example
3 10
3 3
2 5
1 12
#+end_example

*** Sample Output 1

#+begin_example
9
15
12
#+end_example

The initial value of \(X\) is \(10\).

- Operation \(1\) changes \(X\) to \(9\).
- Next, Operation \(1\) changes \(X\) to \(10\), and then Operation \(2\) changes it to \(15\).
- Next, Operation \(1\) changes \(X\) to \(12\), and then Operation \(2\) changes it to \(13\), and then Operation \(3\) changes it to \(12\).

--------------

*** Sample Input 2

#+begin_example
9 12
1 1
2 2
3 3
1 4
2 5
3 6
1 7
2 8
3 9
#+end_example

*** Sample Output 2

#+begin_example
0
2
1
0
5
3
3
11
2
#+end_example


** [[https://atcoder.jp/contests/abc261/tasks/abc261_f][F - Sorting Color Balls]]

Score : \(500\) points

*** Problem Statement

There are \(N\) balls arranged from left to right. The color of the \(i\)-th ball from the left is Color \(C_i\), and an integer \(X_i\) is written on it.

Takahashi wants to rearrange the balls so that the integers written on the balls are non-decreasing from left to right. In other words, his objective is to reach a situation where, for every \(1\leq i\leq N-1\), the number written on the \((i+1)\)-th ball from the left is greater than or equal to the number written on the \(i\)-th ball from the left.

For this, Takahashi can repeat the following operation any number of times (possibly zero):

#+begin_quote
Choose an integer \(i\) such that \(1\leq i\leq N-1\).\\
If the colors of the \(i\)-th and \((i+1)\)-th balls from the left are different, pay a cost of \(1\). (No cost is incurred if the colors are the same).\\
Swap the \(i\)-th and \((i+1)\)-th balls from the left.

#+end_quote

Find the minimum total cost Takahashi needs to pay to achieve his objective.

*** Constraints

- \(2 \leq N \leq 3\times 10^5\)
- \(1\leq C_i\leq N\)
- \(1\leq X_i\leq N\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(C_1\) \(C_2\) \(\ldots\) \(C_N\)
\(X_1\) \(X_2\) \(\ldots\) \(X_N\)
#+end_example

*** Output

Print the minimum total cost Takahashi needs to pay to achieve his objective, as an integer.

--------------

*** Sample Input 1

#+begin_example
5
1 5 2 2 1
3 2 1 2 1
#+end_example

*** Sample Output 1

#+begin_example
6
#+end_example

Let us represent a ball as \((\)Color\(,\) Integer\()\). The initial situation is \((1,3)\), \((5,2)\), \((2,1)\), \((2,2)\), \((1,1)\). Here is a possible sequence of operations for Takahashi:

- Swap the \(1\)-st ball (Color \(1\)) and \(2\)-nd ball (Color \(5\)). Now the balls are arranged in the order \((5,2)\), \((1,3)\), \((2,1)\), \((2,2)\), \((1,1)\).
- Swap the \(2\)-nd ball (Color \(1\)) and \(3\)-rd ball (Color \(2\)). Now the balls are arranged in the order \((5,2)\), \((2,1)\), \((1,3)\), \((2,2)\), \((1,1)\).
- Swap the \(3\)-rd ball (Color \(1\)) and \(4\)-th ball (Color \(2\)). Now the balls are in the order \((5,2)\), \((2,1)\), \((2,2)\), \((1,3)\), \((1,1)\).
- Swap the \(4\)-th ball (Color \(1\)) and \(5\)-th ball (Color \(1\)). Now the balls are in the order \((5,2)\), \((2,1)\), \((2,2)\), \((1,1)\), \((1,3)\).
- Swap the \(3\)-rd ball (Color \(2\)) and \(4\)-th ball (Color \(1\)). Now the balls are in the order\((5,2)\), \((2,1)\), \((1,1)\), \((2,2)\), \((1,3)\).
- Swap the \(1\)-st ball (Color \(5\)) and \(2\)-nd ball (Color \(2\)). Now the balls are in the order \((2,1)\), \((5,2)\), \((1,1)\), \((2,2)\), \((1,3)\).
- Swap the \(2\)-nd ball (Color \(5\)) and \(3\)-rd ball (Color \(1\)). Now the balls are in the order \((2,1)\), \((1,1)\), \((5,2)\), \((2,2)\), \((1,3)\).

After the last operation, the numbers written on the balls are \(1,1,2,2,3\) from left to right, which achieves Takahashi's objective.

The \(1\)-st, \(2\)-nd, \(3\)-rd, \(5\)-th, \(6\)-th, and \(7\)-th operations incur a cost of \(1\) each, for a total of \(6\), which is the minimum. Note that the \(4\)-th operation does not incur a cost since the balls are both in Color \(1\).

--------------

*** Sample Input 2

#+begin_example
3
1 1 1
3 2 1
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

All balls are in the same color, so no cost is incurred in swapping balls.

--------------

*** Sample Input 3

#+begin_example
3
3 1 2
1 1 2
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

Takahashi's objective is already achieved without any operation.


** [[https://atcoder.jp/contests/abc259/tasks/abc259_e][E - LCM on Whiteboard]]

Score : \(500\) points

*** Problem Statement

There are \(N\) integers \(a_1,\ldots,a_N\) written on a whiteboard.\\
Here, \(a_i\) can be represented as \(a_i = p_{i,1}^{e_{i,1}} \times \ldots \times p_{i,m_i}^{e_{i,m_i}}\) using \(m_i\) prime numbers \(p_{i,1} \lt \ldots \lt p_{i,m_i}\) and positive integers \(e_{i,1},\ldots,e_{i,m_i}\).\\
You will choose one of the \(N\) integers to replace it with \(1\).\\
Find the number of values that can be the least common multiple of the \(N\) integers after the replacement.

*** Constraints

- \(1 \leq N \leq 2 \times 10^5\)
- \(1 \leq m_i\)
- \(\sum{m_i} \leq 2 \times 10^5\)
- \(2 \leq p_{i,1} \lt \ldots \lt p_{i,m_i} \leq 10^9\)
- \(p_{i,j}\) is prime.
- \(1 \leq e_{i,j} \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(m_1\)
\(p_{1,1}\) \(e_{1,1}\)
\(\vdots\)
\(p_{1,m_1}\) \(e_{1,m_1}\)
\(m_2\)
\(p_{2,1}\) \(e_{2,1}\)
\(\vdots\)
\(p_{2,m_2}\) \(e_{2,m_2}\)
\(\vdots\)
\(m_N\)
\(p_{N,1}\) \(e_{N,1}\)
\(\vdots\)
\(p_{N,m_N}\) \(e_{N,m_N}\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4
1
7 2
2
2 2
5 1
1
5 1
2
2 1
7 1
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

The integers on the whiteboard are \(a_1 =7^2=49, a_2=2^2 \times 5^1 = 20, a_3 = 5^1 = 5, a_4=2^1 \times 7^1 = 14\).\\
If you replace \(a_1\) with \(1\), the integers on the whiteboard become \(1,20,5,14\), whose least common multiple is \(140\).\\
If you replace \(a_2\) with \(1\), the integers on the whiteboard become \(49,1,5,14\), whose least common multiple is \(490\).\\
If you replace \(a_3\) with \(1\), the integers on the whiteboard become \(49,20,1,14\), whose least common multiple is \(980\).\\
If you replace \(a_4\) with \(1\), the integers on the whiteboard become \(49,20,5,1\), whose least common multiple is \(980\).\\
Therefore, the least common multiple of the \(N\) integers after the replacement can be \(140\), \(490\), or \(980\), so the answer is \(3\).

--------------

*** Sample Input 2

#+begin_example
1
1
998244353 1000000000
#+end_example

*** Sample Output 2

#+begin_example
1
#+end_example

There may be enormous integers on the whiteboard.


** [[https://atcoder.jp/contests/abc258/tasks/abc258_e][E - Packing Potatoes]]

Score : \(500\) points

*** Problem Statement

\(10^{100}\) potatoes are coming from a conveyor belt one by one. The weights of the potatoes are described by a sequence \(W = (W_0, \dots, W_{N-1})\) of length \(N\): the weight of the \(i\)-th potato coming is \(W_{(i-1) \bmod N}\), where \((i-1) \bmod N\) denotes the remainder when \(i - 1\) is divided by \(N\).

Takahashi will prepare an empty box and then pack the potatoes in order, as follows.

- Pack the incoming potato into the box. If the total weight of the potatoes in the box is now \(X\) or greater, seal that box and prepare a new empty box.

You are given \(Q\) queries. In the \(i\)-th query \((1 \leq i \leq Q)\), given a positive integer \(K_i\), find the number of potatoes in the \(K_i\)-th box to be sealed. It can be proved that, under the Constraints of the problem, there will be at least \(K_i\) sealed boxes.

*** Constraints

- \(1 \leq N, Q \leq 2 \times 10^5\)
- \(1 \leq X \leq 10^9\)
- \(1 \leq W_i \leq 10^9 \, (0 \leq i \leq N - 1)\)
- \(1 \leq K_i \leq 10^{12} \, (1 \leq i \leq Q)\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(Q\) \(X\)
\(W_0\) \(W_1\) \(\ldots\) \(W_{N-1}\)
\(K_1\)
\(\vdots\)
\(K_Q\)
#+end_example

*** Output

Print \(Q\) lines. The \(i\)-th line \((1 \leq i \leq Q)\) should contain the answer to the \(i\)-th query.

--------------

*** Sample Input 1

#+begin_example
3 2 5
3 4 1
1
2
#+end_example

*** Sample Output 1

#+begin_example
2
3
#+end_example

Before sealing the \(2\)-nd box, Takahashi will do the following:

- Prepare an empty box.
- Pack the \(1\)-st potato into the box. Now, the total weight of potatoes in the box is \(3\).
- Pack the \(2\)-nd potato into the box. Now, the total weight of potatoes in the box is \(3 + 4 = 7\), which is not less than \(X = 5\), so seal this box.
- Prepare a new empty box.
- Pack the \(3\)-rd potato into the box. Now, the total weight of potatoes in the box is \(1\).
- Pack the \(4\)-th potato into the box. Now, the total weight of potatoes in the box is \(1 + 3 = 4\).
- Pack the \(5\)-th potato into the box. Now, the total weight of potatoes in the box is \(1 + 3 + 4 = 8\), which is not less than \(X = 5\), so seal this box.

The \(1\)-st box sealed contains \(2\) potatoes, and the \(2\)-nd box sealed contains \(3\) potatoes.

--------------

*** Sample Input 2

#+begin_example
10 5 20
5 8 5 9 8 7 4 4 8 2
1
1000
1000000
1000000000
1000000000000
#+end_example

*** Sample Output 2

#+begin_example
4
5
5
5
5
#+end_example


** [[https://atcoder.jp/contests/abc257/tasks/abc257_d][D - Jumping Takahashi 2]]

Score : \(400\) points

*** Problem Statement

There are \(N\) trampolines on a two-dimensional planar town where Takahashi lives. The \(i\)-th trampoline is located at the point \((x_i, y_i)\) and has a power of \(P_i\). Takahashi's jumping ability is denoted by \(S\). Initially, \(S=0\). Every time Takahashi trains, \(S\) increases by \(1\).

Takahashi can jump from the \(i\)-th to the \(j\)-th trampoline if and only if:

- \(P_iS\geq |x_i - x_j| +|y_i - y_j|\).

Takahashi's objective is to become able to choose a starting trampoline such that he can reach any trampoline from the chosen one with some jumps.

At least how many times does he need to train to achieve his objective?

*** Constraints

- \(2 \leq N \leq 200\)
- \(-10^9 \leq x_i,y_i \leq 10^9\)
- \(1 \leq P_i \leq 10^9\)
- \((x_i, y_i) \neq (x_j,y_j)\ (i\neq j)\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(x_1\) \(y_1\) \(P_1\)
\(\vdots\)
\(x_N\) \(y_N\) \(P_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4
-10 0 1
0 0 5
10 0 1
11 0 1
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

If he trains twice, \(S=2\), in which case he can reach any trampoline from the \(2\)-nd one.

For example, he can reach the \(4\)-th trampoline as follows.

- Jump from the \(2\)-nd to the \(3\)-rd trampoline. (Since \(P_2 S = 10\) and \(|x_2-x_3| + |y_2-y_3| = 10\), it holds that \(P_2 S \geq |x_2-x_3| + |y_2-y_3|\).)

- Jump from the \(3\)-rd to the \(4\)-th trampoline. (Since \(P_3 S = 2\) and \(|x_3-x_4| + |y_3-y_4| = 1\), it holds that \(P_3 S \geq |x_3-x_4| + |y_3-y_4|\).)

--------------

*** Sample Input 2

#+begin_example
7
20 31 1
13 4 3
-10 -15 2
34 26 5
-2 39 4
0 -50 1
5 -20 2
#+end_example

*** Sample Output 2

#+begin_example
18
#+end_example


** [[https://atcoder.jp/contests/abc257/tasks/abc257_e][E - Addition and Multiplication 2]]

Score : \(500\) points

*** Problem Statement

Takahashi has an integer \(x\). Initially, \(x=0\).

Takahashi may do the following operation any number of times.

- Choose an integer \(i\ (1\leq i \leq 9)\). Pay \(C_i\) yen (the currency in Japan) to replace \(x\) with \(10x + i\).

Takahashi has a budget of \(N\) yen. Find the maximum possible value of the final \(x\) resulting from operations without exceeding the budget.

*** Constraints

- \(1 \leq N \leq 10^6\)
- \(1 \leq C_i \leq N\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(C_1\) \(C_2\) \(\ldots\) \(C_9\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
5
5 4 3 3 2 5 3 5 3
#+end_example

*** Sample Output 1

#+begin_example
95
#+end_example

For example, the operations where \(i = 9\) and \(i=5\) in this order change \(x\) as:

\(0 \rightarrow 9 \rightarrow 95\).

The amount of money required for these operations is \(C_9 + C_5 = 3 + 2 = 5\) yen, which does not exceed the budget. Since we can prove that we cannot make an integer greater than or equal to \(96\) without exceeding the budget, the answer is \(95\).

--------------

*** Sample Input 2

#+begin_example
20
1 1 1 1 1 1 1 1 1
#+end_example

*** Sample Output 2

#+begin_example
99999999999999999999
#+end_example

Note that the answer may not fit into a \(64\)-bit integer type.


** [[https://atcoder.jp/contests/abc256/tasks/abc256_e][E - Takahashi's Anguish]]

Score : \(500\) points

*** Problem Statement

There are \(N\) people numbered \(1\) through \(N\).\\
Takahashi has decided to choose a sequence \(P = (P_1, P_2, \dots, P_N)\) that is a permutation of integers from \(1\) through \(N\), and give a candy to Person \(P_1\), Person \(P_2\), \(\dots\), and Person \(P_N\), in this order.\\
Since Person \(i\) dislikes Person \(X_i\), if Takahashi gives a candy to Person \(X_i\) prior to Person \(i\), then Person \(i\) gains frustration of \(C_i\); otherwise, Person \(i\)'s frustration is \(0\).\\
Takahashi may arbitrarily choose \(P\). What is the minimum possible sum of their frustration?

*** Constraints

- \(2 \leq N \leq 2 \times 10^5\)
- \(1 \leq X_i \leq N\)
- \(X_i \neq i\)
- \(1 \leq C_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(X_1\) \(X_2\) \(\dots\) \(X_N\)
\(C_1\) \(C_2\) \(\dots\) \(C_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3
2 3 2
1 10 100
#+end_example

*** Sample Output 1

#+begin_example
10
#+end_example

If he lets \(P = (1, 3, 2)\), only Person \(2\) gains a positive amount of frustration, in which case the sum of their frustration is \(10\).\\
Since it is impossible to make the sum of frustration smaller, the answer is \(10\).

--------------

*** Sample Input 2

#+begin_example
8
7 3 5 5 8 4 1 2
36 49 73 38 30 85 27 45
#+end_example

*** Sample Output 2

#+begin_example
57
#+end_example


** [[https://atcoder.jp/contests/abc255/tasks/abc255_e][E - Lucky Numbers]]

Score : \(500\) points

*** Problem Statement

You are given a sequence of \(N-1\) integers \(S = (S_1, S_2, \ldots, S_{N-1})\), and \(M\) distinct integers \(X_1, X_2, \ldots, X_M\), which are called /lucky numbers/.

A sequence of \(N\) integers \(A = (A_1, A_2, \ldots, A_N)\) satisfying the following condition is called a /good sequence/.

#+begin_quote
\(A_i + A_{i+1} = S_i\) holds for every \(i = 1, 2, \ldots, N-1\).

#+end_quote

Find the maximum possible number of terms that are lucky numbers in a good sequence \(A\), that is, the maximum possible number of integers \(i\) between \(1\) and \(N\) such that \(A_i \in \lbrace X_1, X_2, \ldots, X_M \rbrace\).

*** Constraints

- \(2 \leq N \leq 10^5\)
- \(1 \leq M \leq 10\)
- \(-10^9 \leq S_i \leq 10^9\)
- \(-10^9 \leq X_i \leq 10^9\)
- \(X_1 \lt X_2 \lt \cdots \lt X_M\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(S_1\) \(S_2\) \(\ldots\) \(S_{N-1}\)
\(X_1\) \(X_2\) \(\ldots\) \(X_M\)
#+end_example

*** Output

Print the maximum possible number of terms that are lucky numbers in a good sequence \(A\).

--------------

*** Sample Input 1

#+begin_example
9 2
2 3 3 4 -4 -7 -4 -1
-1 5
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

A good sequence \(A = (3, -1, 4, -1, 5, -9, 2, -6, 5)\) contains four terms that are lucky numbers: \(A_2, A_4, A_5, A_9\), which is the maximum possible count.

--------------

*** Sample Input 2

#+begin_example
20 10
-183260318 206417795 409343217 238245886 138964265 -415224774 -499400499 -313180261 283784093 498751662 668946791 965735441 382033304 177367159 31017484 27914238 757966050 878978971 73210901
-470019195 -379631053 -287722161 -231146414 -84796739 328710269 355719851 416979387 431167199 498905398
#+end_example

*** Sample Output 2

#+begin_example
8
#+end_example


** [[https://atcoder.jp/contests/abc254/tasks/abc254_e][E - Small d and k]]

Score : \(500\) points

*** Problem Statement

We have a simple undirected graph with \(N\) vertices and \(M\) edges. The vertices are numbered \(1,\ldots,N\). For each \(i=1,\ldots,M\), the \(i\)-th edge connects Vertex \(a_i\) and Vertex \(b_i\). Additionally, *the degree of each vertex is at most \(3\).*

For each \(i=1,\ldots,Q\), answer the following query.

- Find the sum of indices of vertices whose distances from Vertex \(x_i\) are at most \(k_i\).

*** Constraints

- \(1 \leq N \leq 1.5 \times 10^5\)
- \(0 \leq M \leq \min (\frac{N(N-1)}{2},\frac{3N}{2})\)
- \(1 \leq a_i \lt b_i \leq N\)
- \((a_i,b_i) \neq (a_j,b_j)\), if \(i\neq j\).
- The degree of each vertex in the graph is at most \(3\).
- \(1 \leq Q \leq 1.5 \times 10^5\)
- \(1 \leq x_i \leq N\)
- \(0 \leq k_i \leq 3\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(a_1\) \(b_1\)
\(\vdots\)
\(a_M\) \(b_M\)
\(Q\)
\(x_1\) \(k_1\)
\(\vdots\)
\(x_Q\) \(k_Q\)
#+end_example

*** Output

Print \(Q\) lines. The \(i\)-th line should contain the answer to the \(i\)-th query.

--------------

*** Sample Input 1

#+begin_example
6 5
2 3
3 4
3 5
5 6
2 6
7
1 1
2 2
2 0
2 3
4 1
6 0
4 3
#+end_example

*** Sample Output 1

#+begin_example
1
20
2
20
7
6
20
#+end_example

For the \(1\)-st query, the only vertex whose distance from Vertex \(1\) is at most \(1\) is Vertex \(1\), so the answer is \(1\).\\
For the \(2\)-nd query, the vertices whose distances from Vertex \(2\) are at most \(2\) are Vertex \(2\), \(3\), \(4\), \(5\), and \(6\), so the answer is their sum, \(20\).\\
The \(3\)-rd and subsequent queries can be answered similarly.


** [[https://atcoder.jp/contests/abc252/tasks/abc252_e][E - Road Reduction]]

Score : \(500\) points

*** Problem Statement

The Kingdom of AtCoder has \(N\) cities called City \(1,2,\ldots,N\) and \(M\) roads called Road \(1,2,\ldots,M\).\\
Road \(i\) connects Cities \(A_i\) and \(B_i\) bidirectionally and has a length of \(C_i\).\\
One can travel between any two cities using some roads.

Under financial difficulties, the kingdom has decided to maintain only \(N-1\) roads so that one can still travel between any two cities using those roads and abandon the rest.

Let \(d_i\) be the total length of the roads one must use when going from City \(1\) to City \(i\) using only maintained roads. Print a choice of roads to maintain that minimizes \(d_2+d_3+\ldots+d_N\).

*** Constraints

- \(2 \leq N \leq 2\times 10^5\)
- \(N-1 \leq M \leq 2\times 10^5\)
- \(1 \leq A_i < B_i \leq N\)
- \((A_i,B_i)\neq(A_j,B_j)\) if \(i\neq j\).
- \(1\leq C_i \leq 10^9\)
- One can travel between any two cities using some roads.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(B_1\) \(C_1\)
\(A_2\) \(B_2\) \(C_2\)
\(\vdots\)
\(A_M\) \(B_M\) \(C_M\)
#+end_example

*** Output

Print the indices of roads to maintain, in arbitrary order, with spaces in between.\\
If multiple solutions exist, you may print any of them.

--------------

*** Sample Input 1

#+begin_example
3 3
1 2 1
2 3 2
1 3 10
#+end_example

*** Sample Output 1

#+begin_example
1 2
#+end_example

Here are the possible choices of roads to maintain and the corresponding values of \(d_i\).

- Maintain Road \(1\) and \(2\): \(d_2=1\), \(d_3=3\).
- Maintain Road \(1\) and \(3\): \(d_2=1\), \(d_3=10\).
- Maintain Road \(2\) and \(3\): \(d_2=12\), \(d_3=10\).

Thus, maintaining Road \(1\) and \(2\) minimizes \(d_2+d_3\).

--------------

*** Sample Input 2

#+begin_example
4 6
1 2 1
1 3 1
1 4 1
2 3 1
2 4 1
3 4 1
#+end_example

*** Sample Output 2

#+begin_example
3 1 2
#+end_example


** [[https://atcoder.jp/contests/abc251/tasks/abc251_d][D - At Most 3 (Contestant ver.)]]

Score : \(400\) points

*** Problem Statement

You are given an integer \(W\).\\
You are going to prepare some weights so that all of the conditions below are satisfied.

- The number of weights is between \(1\) and \(300\), inclusive.
- Each weight has a mass of positive integer not exceeding \(10^6\).
- Every integer between \(1\) and \(W\), inclusive, is a *good integer*. Here, a positive integer \(n\) is said to be a good integer if the following condition is satisfied:
  - We can choose *at most \(3\)* different weights from the prepared weights with a total mass of \(n\).

Print a combination of weights that satisfies the conditions.

*** Constraints

- \(1 \leq W \leq 10^6\)
- \(W\) is an integer.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(W\)
#+end_example

*** Output

Print in the following format, where \(N\) is the number of weights and \(A_i\) is the mass of the \(i\)-th weight. If multiple solutions exist, printing any of them is accepted.

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
#+end_example

Here, \(N\) and \(A_1,A_2,\dots,A_N\) should satisfy the following conditions:

- \(1 \leq N \leq 300\)
- \(1 \leq A_i \leq 10^6\)

--------------

*** Sample Input 1

#+begin_example
6
#+end_example

*** Sample Output 1

#+begin_example
3
1 2 3
#+end_example

In the output above, \(3\) weights with masses \(1\), \(2\), and \(3\) are prepared.\\
This output satisfies the conditions. Especially, regarding the \(3\)-rd condition, we can confirm that every integer between \(1\) and \(W\), inclusive, is a good integer.

- If we choose only the \(1\)-st weight, it has a total mass of \(1\).
- If we choose only the \(2\)-nd weight, it has a total mass of \(2\).
- If we choose only the \(3\)-rd weight, it has a total mass of \(3\).
- If we choose the \(1\)-st and the \(3\)-rd weights, they have a total mass of \(4\).
- If we choose the \(2\)-nd and the \(3\)-rd weights, they have a total mass of \(5\).
- If we choose the \(1\)-st, the \(2\)-nd, and the \(3\)-rd weights, they have a total mass of \(6\).

--------------

*** Sample Input 2

#+begin_example
12
#+end_example

*** Sample Output 2

#+begin_example
6
2 5 1 2 5 1
#+end_example

You may prepare multiple weights with the same mass.


** [[https://atcoder.jp/contests/abc251/tasks/abc251_e][E - Takahashi and Animals]]

Score : \(500\) points

*** Problem Statement

Takahashi is with \(N\) animals. The \(N\) animals are called Animal \(1\), Animal \(2\), \(\ldots\), Animal \(N\).

Takahashi will perform the following \(N\) kinds of action. Each action can be performed any number of (possibly zero) times.

- Pay \(A_1\) yen (the currency in Japan) to feed Animals \(1\) and \(2\).
- Pay \(A_2\) yen to feed Animals \(2\) and \(3\).
- Pay \(A_3\) yen to feed Animals \(3\) and \(4\).
- \(\cdots\)
- Pay \(A_i\) yen to feed Animals \(i\) and \((i+1)\).
- \(\cdots\)
- Pay \(A_{N-2}\) yen to feed Animals \((N-2)\) and \((N-1)\).
- Pay \(A_{N-1}\) yen to feed Animals \((N-1)\) and \(N\).
- Pay \(A_N\) yen to feed Animals \(N\) and \(1\).

Note that the \(N\)-th action above feeds "Animals \(N\) and \(1\)."

Print the minimum possible total cost to feed every animal at least once.

*** Constraints

- \(2 \leq N \leq 3 \times 10^5\)
- \(1 \leq A_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\ldots\) \(A_N\)
#+end_example

*** Output

Print the minimum possible total cost to feed every animal at least once.

--------------

*** Sample Input 1

#+begin_example
5
2 5 3 2 5
#+end_example

*** Sample Output 1

#+begin_example
7
#+end_example

If Takahashi performs the \(1\)-st, \(3\)-rd, and \(4\)-th actions once each, Animals \(1\), \(2\), \(3\), \(4\), and \(5\) are fed once, once, once, twice, once, respectively, so every animal is fed at least once. The total cost to do so is \(A_1 + A_3 + A_4 = 2 + 3 + 2 = 7\) yen, which is the minimum possible.

--------------

*** Sample Input 2

#+begin_example
20
29 27 79 27 30 4 93 89 44 88 70 75 96 3 78 39 97 12 53 62
#+end_example

*** Sample Output 2

#+begin_example
426
#+end_example


** [[https://atcoder.jp/contests/abc250/tasks/abc250_e][E - Prefix Equality]]

Score : \(500\) points

*** Problem Statement

You are given integer sequences \(A = (a_1,\ldots,a_N)\) and \(B = (b_1,\ldots,b_N)\), each of length \(N\).

For \(i=1,...,Q\), answer the query in the following format.

- If the set of values contained in the first \(x_i\) terms of \(A\), \((a_1,\ldots,a_{x_i})\), and the set of values contained in the first \(y_i\) terms of \(B\), \((b_1,\ldots,b_{y_i})\), are equal, then print =Yes=; otherwise, print =No=.

*** Constraints

- \(1 \leq N,Q \leq 2 \times 10^5\)
- \(1 \leq a_i,b_i \leq 10^9\)
- \(1 \leq x_i,y_i \leq N\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(a_1\) \(\ldots\) \(a_N\)
\(b_1\) \(\ldots\) \(b_N\)
\(Q\)
\(x_1\) \(y_1\)
\(\vdots\)
\(x_Q\) \(y_Q\)
#+end_example

*** Output

Print \(Q\) lines. The \(i\)-th line should contain the response to the \(i\)-th query.

--------------

*** Sample Input 1

#+begin_example
5
1 2 3 4 5
1 2 2 4 3
7
1 1
2 2
2 3
3 3
4 4
4 5
5 5
#+end_example

*** Sample Output 1

#+begin_example
Yes
Yes
Yes
No
No
Yes
No
#+end_example

Note that sets are a concept where it matters only whether each value is contained or not.\\
For the \(3\)-rd query, the first \(2\) terms of \(A\) contain one \(1\) and one \(2\), while the first \(3\) terms of \(B\) contain one \(1\) and two \(2\)'s. However, the sets of values contained in the segments are both \(\{ 1,2 \}\), which are equal.\\
Also, for the \(6\)-th query, the values appear in different orders, but they are still equal as sets.


** [[https://atcoder.jp/contests/abc248/tasks/abc248_e][E - K-colinear Line]]

Score : \(500\) points

*** Problem Statement

You are given \(N\) points in the coordinate plane. For each \(1\leq i\leq N\), the \(i\)-th point is at the coordinates \((X_i, Y_i)\).

Find the number of lines in the plane that pass \(K\) or more of the \(N\) points.\\
If there are infinitely many such lines, print =Infinity=.

*** Constraints

- \(1 \leq K \leq N \leq 300\)
- \(\lvert X_i \rvert, \lvert Y_i \rvert \leq 10^9\)
- \(X_i\neq X_j\) or \(Y_i\neq Y_j\), if \(i\neq j\).
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(X_1\) \(Y_1\)
\(X_2\) \(Y_2\)
\(\vdots\)
\(X_N\) \(Y_N\)
#+end_example

*** Output

Print the number of lines in the plane that pass \(K\) or more of the \(N\) points, or =Infinity= if there are infinitely many such lines.

--------------

*** Sample Input 1

#+begin_example
5 2
0 0
1 0
0 1
-1 0
0 -1
#+end_example

*** Sample Output 1

#+begin_example
6
#+end_example

The six lines \(x=0\), \(y=0\), \(y=x\pm 1\), and \(y=-x\pm 1\) satisfy the requirement.\\
For example, \(x=0\) passes the first, third, and fifth points.

Thus, \(6\) should be printed.

--------------

*** Sample Input 2

#+begin_example
1 1
0 0
#+end_example

*** Sample Output 2

#+begin_example
Infinity
#+end_example

Infinitely many lines pass the origin.

Thus, =Infinity= should be printed.


** [[https://atcoder.jp/contests/abc247/tasks/abc247_e][E - Max Min]]

Score : \(500\) points

*** Problem Statement

We have a number sequence \(A = (A_1, A_2, \dots, A_N)\) of length \(N\) and integers \(X\) and \(Y\). Find the number of pairs of integers \((L, R)\) satisfying all the conditions below.

- \(1 \leq L \leq R \leq N\)
- The maximum value of \(A_L, A_{L+1}, \dots, A_R\) is \(X\), and the minimum is \(Y\).

*** Constraints

- \(1 \leq N \leq 2 \times 10^5\)
- \(1 \leq A_i \leq 2 \times 10^5\)
- \(1 \leq Y \leq X \leq 2 \times 10^5\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(X\) \(Y\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4 3 1
1 2 3 1
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

\(4\) pairs satisfy the conditions: \((L,R)=(1,3),(1,4),(2,4),(3,4)\).

--------------

*** Sample Input 2

#+begin_example
5 2 1
1 3 2 4 1
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

No pair \((L,R)\) satisfies the condition.

--------------

*** Sample Input 3

#+begin_example
5 1 1
1 1 1 1 1
#+end_example

*** Sample Output 3

#+begin_example
15
#+end_example

It may hold that \(X=Y\).

--------------

*** Sample Input 4

#+begin_example
10 8 1
2 7 1 8 2 8 1 8 2 8
#+end_example

*** Sample Output 4

#+begin_example
36
#+end_example


** [[https://atcoder.jp/contests/abc246/tasks/abc246_e][E - Bishop 2]]

Score : \(500\) points

*During the time of the contest, the memory limit was set to 2GB. However, due to a change in the judging environment, the memory limit has now been set to 1GB. Please note that it has been confirmed that solutions can still achieve an Acceptable Completion (AC) within this memory limit.*

*** Problem Statement

We have an \(N \times N\) chessboard. Let \((i, j)\) denote the square at the \(i\)-th row from the top and \(j\)-th column from the left of this board.\\
The board is described by \(N\) strings \(S_i\).\\
The \(j\)-th character of the string \(S_i\), \(S_{i,j}\), means the following.

- If \(S_{i,j}=\) =.=, the square \((i, j)\) is empty.
- If \(S_{i,j}=\) =#=, the square \((i, j)\) is occupied by a white pawn, which cannot be moved or removed.

We have put a white bishop on the square \((A_x, A_y)\).\\
Find the minimum number of moves needed to move this bishop from \((A_x, A_y)\) to \((B_x, B_y)\) according to the rules of chess (see Notes).\\
If it cannot be moved to \((B_x, B_y)\), report =-1= instead.

*** Notes

A white [[https://en.wikipedia.org/wiki/Bishop_(chess)][bishop]] on the square \((i, j)\) can go to the following positions in one move.

- For each positive integer \(d\), it can go to \((i+d,j+d)\) if all of the conditions are satisfied.

  - The square \((i+d,j+d)\) exists in the board.
  - For every positive integer \(l \le d\), \((i+l,j+l)\) is not occupied by a white pawn.

- For each positive integer \(d\), it can go to \((i+d,j-d)\) if all of the conditions are satisfied.

  - The square \((i+d,j-d)\) exists in the board.
  - For every positive integer \(l \le d\), \((i+l,j-l)\) is not occupied by a white pawn.

- For each positive integer \(d\), it can go to \((i-d,j+d)\) if all of the conditions are satisfied.

  - The square \((i-d,j+d)\) exists in the board.
  - For every positive integer \(l \le d\), \((i-l,j+l)\) is not occupied by a white pawn.

- For each positive integer \(d\), it can go to \((i-d,j-d)\) if all of the conditions are satisfied.

  - The square \((i-d,j-d)\) exists in the board.
  - For every positive integer \(l \le d\), \((i-l,j-l)\) is not occupied by a white pawn.

*** Constraints

- \(2 \le N \le 1500\)
- \(1 \le A_x,A_y \le N\)
- \(1 \le B_x,B_y \le N\)
- \((A_x,A_y) \neq (B_x,B_y)\)
- \(S_i\) is a string of length \(N\) consisting of =.= and =#=.
- \(S_{A_x,A_y}=\) =.=
- \(S_{B_x,B_y}=\) =.=

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_x\) \(A_y\)
\(B_x\) \(B_y\)
\(S_1\)
\(S_2\)
\(\vdots\)
\(S_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
5
1 3
3 5
....#
...#.
.....
.#...
#....
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

We can move the bishop from \((1,3)\) to \((3,5)\) in three moves as follows, but not in two or fewer moves.

- \((1,3) \rightarrow (2,2) \rightarrow (4,4) \rightarrow (3,5)\)

--------------

*** Sample Input 2

#+begin_example
4
3 2
4 2
....
....
....
....
#+end_example

*** Sample Output 2

#+begin_example
-1
#+end_example

There is no way to move the bishop from \((3,2)\) to \((4,2)\).

--------------

*** Sample Input 3

#+begin_example
18
18 1
1 18
..................
.####.............
.#..#..####.......
.####..#..#..####.
.#..#..###...#....
.#..#..#..#..#....
.......####..#....
.............####.
..................
..................
.####.............
....#..#..#.......
.####..#..#..####.
.#.....####..#....
.####.....#..####.
..........#..#..#.
.............####.
..................
#+end_example

*** Sample Output 3

#+begin_example
9
#+end_example


** [[https://atcoder.jp/contests/abc245/tasks/abc245_e][E - Wrapping Chocolate]]

Score : \(500\) points

*** Problem Statement

Takahashi has \(N\) pieces of chocolate. The \(i\)-th piece has a rectangular shape with a width of \(A_i\) centimeters and a length of \(B_i\) centimeters.\\
He also has \(M\) boxes. The \(i\)-th box has a rectangular shape with a width of \(C_i\) centimeters and a length of \(D_i\) centimeters.

Determine whether it is possible to put the \(N\) pieces of chocolate in the boxes under the conditions below.

- A box can contain at most one piece of chocolate.
- \(A_i \leq C_j\) and \(B_i \leq D_j\) must hold when putting the \(i\)-th piece of chocolate in the \(j\)-th box (they cannot be rotated).

*** Constraints

- \(1 \leq N \leq M \leq 2\times 10^5\)
- \(1 \leq A_i,B_i,C_i,D_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(\ldots\) \(A_N\)
\(B_1\) \(\ldots\) \(B_N\)
\(C_1\) \(\ldots\) \(C_M\)
\(D_1\) \(\ldots\) \(D_M\)
#+end_example

*** Output

If it is possible to put the \(N\) pieces of chocolate in the boxes, print =Yes=; otherwise, print =No=.

--------------

*** Sample Input 1

#+begin_example
2 3
2 4
3 2
8 1 5
2 10 5
#+end_example

*** Sample Output 1

#+begin_example
Yes
#+end_example

We can put the first piece of chocolate in the third box and the second piece in the first box.

--------------

*** Sample Input 2

#+begin_example
2 2
1 1
2 2
100 1
100 1
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

A box can contain at most one piece of chocolate.

--------------

*** Sample Input 3

#+begin_example
1 1
10
100
100
10
#+end_example

*** Sample Output 3

#+begin_example
No
#+end_example

--------------

*** Sample Input 4

#+begin_example
1 1
10
100
10
100
#+end_example

*** Sample Output 4

#+begin_example
Yes
#+end_example


** [[https://atcoder.jp/contests/abc245/tasks/abc245_f][F - Endless Walk]]

Score : \(500\) points

*** Problem Statement

We have a simple directed graph \(G\) with \(N\) vertices and \(M\) edges. The vertices are labeled as Vertex \(1\), Vertex \(2\), \(\ldots\), Vertex \(N\). The \(i\)-th edge \((1\leq i\leq M)\) goes from Vertex \(U_i\) to Vertex \(V_i\).

Takahashi will start at a vertex and repeatedly travel on \(G\) from one vertex to another along a directed edge. How many vertices of \(G\) have the following condition: Takahashi can start at that vertex and continue traveling indefinitely by carefully choosing the path?

*** Constraints

- \(1 \leq N \leq 2\times 10^5\)
- \(0 \leq M \leq \min(N(N-1), 2\times 10^5)\)
- \(1 \leq U_i,V_i\leq N\)
- \(U_i\neq V_i\)
- \((U_i,V_i)\neq (U_j,V_j)\) if \(i\neq j\).
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(U_1\) \(V_1\)
\(U_2\) \(V_2\)
\(\vdots\)
\(U_M\) \(V_M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
5 5
1 2
2 3
3 4
4 2
4 5
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

When starting at Vertex \(2\), Takahashi can continue traveling indefinitely: \(2\) \(\to\) \(3\) \(\to\) \(4\) \(\to\) \(2\) \(\to\) \(3\) \(\to\) \(\cdots\) The same goes when starting at Vertex \(3\) or Vertex \(4\). From Vertex \(1\), he can first go to Vertex \(2\) and then continue traveling indefinitely again.\\
On the other hand, from Vertex \(5\), he cannot move at all.

Thus, four vertices ―Vertex \(1\), \(2\), \(3\), and \(4\)― satisfy the conditions, so \(4\) should be printed.

--------------

*** Sample Input 2

#+begin_example
3 2
1 2
2 1
#+end_example

*** Sample Output 2

#+begin_example
2
#+end_example

Note that, in a simple directed graph, there may be two edges in opposite directions between the same pair of vertices. Additionally, \(G\) may not be connected.


** [[https://atcoder.jp/contests/abc242/tasks/abc242_d][D - ABC Transform]]

Score : \(400\) points

*** Problem Statement

You are given a string \(S\) consisting of =A=, =B=, =C=.

Let \(S^{(0)}:=S\). For \(i=1,2,3,\ldots\), let \(S^{(i)}\) be the result of simultaneously replacing the characters of \(S^{(i-1)}\) as follows: =A= → =BC=, =B= → =CA=, =C= → =AB=.

Answer \(Q\) queries. The \(i\)-th query is as follows.

- Print the \(k_i\)-th character from the beginning of \(S^{(t_i)}\).

*** Constraints

- \(S\) is a string of length between \(1\) and \(10^5\) (inclusive) consisting of =A=, =B=, =C=.
- \(1 \leq Q \leq 10^5\)
- \(0 \leq t_i \leq 10^{18}\)
- \(1 \leq k_i \leq \min(10^{18},\) the length of \(S^{(t_i)})\)
- \(Q, t_i, k_i\) are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(S\)
\(Q\)
\(t_1\) \(k_1\)
\(t_2\) \(k_2\)
\(\hspace{0.4cm}\vdots\)
\(t_Q\) \(k_Q\)
#+end_example

*** Output

Process the \(Q\) queries in ascending order of index, that is, in the given order. Each answer should be followed by a newline.

--------------

*** Sample Input 1

#+begin_example
ABC
4
0 1
1 1
1 3
1 6
#+end_example

*** Sample Output 1

#+begin_example
A
B
C
B
#+end_example

We have \(S^{(0)}=\)=ABC=, \(S^{(1)}=\)=BCCAAB=.

Thus, the answers to the queries are =A=, =B=, =C=, =B= in the given order.

--------------

*** Sample Input 2

#+begin_example
CBBAACCCCC
5
57530144230160008 659279164847814847
29622990657296329 861239705300265164
509705228051901259 994708708957785197
176678501072691541 655134104344481648
827291290937314275 407121144297426665
#+end_example

*** Sample Output 2

#+begin_example
A
A
C
A
A
#+end_example


** [[https://atcoder.jp/contests/abc242/tasks/abc242_e][E - (∀x∀)]]

Score : \(500\) points

*** Problem Statement

Solve the following problem for \(T\) test cases.

Given an integer \(N\) and a string \(S\), find the number of strings \(X\) that satisfy all of the conditions below, modulo \(998244353\).

- \(X\) is a string of length \(N\) consisting of uppercase English letters.
- \(X\) is a palindrome.
- \(X \le S\) in lexicographical order.
  - That is, \(X=S\) or \(X\) is lexicographically smaller than \(S\).

*** Constraints

- \(1 \le T \le 250000\)
- \(N\) is an integer between \(1\) and \(10^6\) (inclusive).
- In a single input, the sum of \(N\) over the test cases is at most \(10^6\).
- \(S\) is a string of length \(N\) consisting of uppercase English letters.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(T\)
\(\mathrm{case}_1\)
\(\mathrm{case}_2\)
\(\vdots\)
\(\mathrm{case}_T\)
#+end_example

Here, \(\mathrm{case}_i\) represents the \(i\)-th test case.

Each test case is in the following format:

#+begin_example
\(N\)
\(S\)
#+end_example

*** Output

Print \(T\) lines. The \(i\)-th line should contain the answer for the \(i\)-th test case as an integer.

--------------

*** Sample Input 1

#+begin_example
5
3
AXA
6
ABCZAZ
30
QWERTYUIOPASDFGHJKLZXCVBNMQWER
28
JVIISNEOXHSNEAAENSHXOENSIIVJ
31
KVOHEEMSOZZASHENDIGOJRTJVMVSDWW
#+end_example

*** Sample Output 1

#+begin_example
24
29
212370247
36523399
231364016
#+end_example

This input contains five test cases.

Test case #1:\\
The \(24\) strings satisfying the conditions are =AAA=\(,\) =ABA=\(,\) =ACA=\(,...,\) =AXA=.

Test case #2:\\
\(S\) may not be a palindrome.

Test case #3:\\
Be sure to find the count modulo \(998244353\).


** [[https://atcoder.jp/contests/abc241/tasks/abc241_e][E - Putting Candies]]

Score : \(500\) points

*** Problem Statement

You are given a sequence \(A=(A_0,A_1,\ldots,A_{N-1})\) of length \(N\).\\
There is an initially empty dish. Takahashi is going to repeat the following operation \(K\) times.

- Let \(X\) be the number of candies on the dish. He puts \(A_{(X\bmod N)}\) more candies on the dish. Here, \(X\bmod N\) denotes the remainder when \(X\) is divided by \(N\).

Find how many candies are on the dish after the \(K\) operations.

*** Constraints

- \(2 \leq N \leq 2\times 10^5\)
- \(1 \leq K \leq 10^{12}\)
- \(1 \leq A_i\leq 10^6\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(A_0\) \(A_1\) \(\ldots\) \(A_{N-1}\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
5 3
2 1 6 3 1
#+end_example

*** Sample Output 1

#+begin_example
11
#+end_example

The number of candies on the dish transitions as follows.

- In the \(1\)-st operation, we have \(X=0\), so \(A_{(0\mod 5)}=A_0=2\) more candies will be put on the dish.
- In the \(2\)-nd operation, we have \(X=2\), so \(A_{(2\mod 5)}=A_2=6\) more candies will be put on the dish.
- In the \(3\)-rd operation, we have \(X=8\), so \(A_{(8\mod 5)}=A_3=3\) more candies will be put on the dish.

Thus, after the \(3\) operations, there will be \(11\) candies on the dish. Note that you must *not* print the remainder divided by \(N\).

--------------

*** Sample Input 2

#+begin_example
10 1000000000000
260522 914575 436426 979445 648772 690081 933447 190629 703497 47202
#+end_example

*** Sample Output 2

#+begin_example
826617499998784056
#+end_example

The answer may not fit into a \(32\)-bit integer type.


** [[https://atcoder.jp/contests/abc240/tasks/abc240_f][F - Sum Sum Max]]

Score : \(500\) points

*** Problem Statement

There are integer sequences \(A, B, C\) of length \(M\) each.

\(C\) is represented by integers \(x_1, \dots, x_N, y_1, \dots, y_N\). The first \(y_1\) terms of \(C\) are \(x_1\), the subsequent \(y_2\) terms are \(x_2\), \(\ldots\), the last \(y_N\) terms are \(x_N\).

\(B\) is defined by \(B_i = \sum_{k = 1}^i C_k \, (1 \leq i \leq M)\).

\(A\) is defined by \(A_i = \sum_{k = 1}^i B_k \, (1 \leq i \leq M)\).

Find the maximum value among \(A_1, \dots, A_M\).

You will be given \(T\) test cases to solve.

*** Constraints

- \(1 \leq T \leq 2 \times 10^5\)
- \(1 \leq N \leq 2 \times 10^5\)
- The sum of \(N\) in a single file is at most \(2 \times 10^5\).
- \(1 \leq M \leq 10^9\)
- \(|x_i| \leq 4 \, (1 \leq i \leq N)\)
- \(y_i \gt 0 \, (1 \leq i \leq N)\)
- \(\sum_{k = 1}^N y_k = M\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(T\)
\(\mathrm{case}_1\)
\(\vdots\)
\(\mathrm{case}_T\)
#+end_example

Each case is in the following format:

#+begin_example
\(N\) \(M\)
\(x_1\) \(y_1\)
\(\vdots\)
\(x_N\) \(y_N\)
#+end_example

*** Output

Print \(T\) lines. The \(i\)-th line \((1 \leq i \leq T)\) should contain the answer to the \(i\)-th test case.

--------------

*** Sample Input 1

#+begin_example
3
3 7
-1 2
2 3
-3 2
10 472
-4 12
1 29
2 77
-1 86
0 51
3 81
3 17
-2 31
-4 65
4 23
1 1000000000
4 1000000000
#+end_example

*** Sample Output 1

#+begin_example
4
53910
2000000002000000000
#+end_example

In the first test case, we have:

- \(C = (-1, -1, 2, 2, 2, -3, -3)\)
- \(B = (-1, -2, 0, 2, 4, 1, -2)\)
- \(A = (-1, -3, -3, -1, 3, 4, 2)\)

Thus, the maximum value among \(A_1, \dots, A_M\) is \(4\).


** [[https://atcoder.jp/contests/abc238/tasks/abc238_e][E - Range Sums]]

Score : \(500\) points

*** Problem Statement

Takahashi has a secret integer sequence \(a\). You know that the length of \(a\) is \(N\).

You want to guess the contents of \(a\). He has promised to give you the following \(Q\) additional pieces of information.

- The \(i\)-th information: the value \(a_{l_i}+a_{l_i+1}+\cdots+a_{r_i}\).

Is it possible to determine the sum of all elements in \(a\), \(a_1+a_2+\cdots+a_N\), if the \(Q\) pieces of promised information are given?

*** Constraints

- \(1 \leq N \leq 2 \times 10^5\)
- \(1 \leq Q \leq \min(2 \times 10^5,\frac{N(N+1)}{2})\)
- \(1 \leq l_i \leq r_i \leq N\)
- \((l_i,r_i) \neq (l_j,r_j)\ (i \neq j)\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(Q\)
\(l_1\) \(r_1\)
\(l_2\) \(r_2\)
\(\hspace{0.4cm}\vdots\)
\(l_Q\) \(r_Q\)
#+end_example

*** Output

If it is possible to determine the sum of all elements in \(a\), print =Yes=; otherwise, print =No=.

--------------

*** Sample Input 1

#+begin_example
3 3
1 2
2 3
2 2
#+end_example

*** Sample Output 1

#+begin_example
Yes
#+end_example

From the first and second information, we can find the value \(a_1+a_2+a_2+a_3\). By subtracting the value of \(a_2\) from it, we can determine the value \(a_1+a_2+a_3\).

--------------

*** Sample Input 2

#+begin_example
4 3
1 3
1 2
2 3
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

We can determine the sum of the first \(3\) elements of \(a\), but not the sum of all elements.

--------------

*** Sample Input 3

#+begin_example
4 4
1 1
2 2
3 3
1 4
#+end_example

*** Sample Output 3

#+begin_example
Yes
#+end_example

The fourth information directly gives us the sum of all elements.


** [[https://atcoder.jp/contests/abc237/tasks/abc237_e][E - Skiing]]

Score : \(500\) points

*** Problem Statement

AtCoder Ski Area has \(N\) open spaces called Space \(1\), Space \(2\), \(\ldots\), Space \(N\). The altitude of Space \(i\) is \(H_i\). There are \(M\) slopes that connect two spaces bidirectionally. The \(i\)-th slope \((1 \leq i \leq M)\) connects Space \(U_i\) and Space \(V_i\). It is possible to travel between any two spaces using some slopes.

Takahashi can only travel between spaces by using slopes. Each time he goes through a slope, his *happiness* changes. Specifically, when he goes from Space \(X\) to Space \(Y\) by using the slope that directly connects them, his happiness changes as follows.

- If the altitude of Space \(X\) is strictly higher than that of Space \(Y\), the happiness *increases* by their difference: \(H_X-H_Y\).
- If the altitude of Space \(X\) is strictly lower than that of Space \(Y\), the happiness *decreases* by their difference multiplied by \(2\): \(2(H_Y-H_X)\).
- If the altitude of Space \(X\) is equal to that of Space \(Y\), the happiness does not change.

The happiness may be a negative value.

Initially, Takahashi is in Space \(1\), and his happiness is \(0\). Find his maximum possible happiness after going through any number of slopes (possibly zero), ending in any space.

*** Constraints

- \(2 \leq N \leq 2\times 10^5\)
- \(N-1 \leq M \leq \min( 2\times 10^5,\frac{N(N-1)}{2})\)
- \(0 \leq H_i\leq 10^8\) \((1 \leq i \leq N)\)
- \(1 \leq U_i < V_i \leq N\) \((1 \leq i \leq M)\)
- \((U_i,V_i) \neq (U_j, V_j)\) if \(i \neq j\).
- All values in input are integers.
- It is possible to travel between any two spaces using some slopes.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(H_1\) \(H_2\) \(\ldots\) \(H_N\)
\(U_1\) \(V_1\)
\(U_2\) \(V_2\)
\(\vdots\)
\(U_M\) \(V_M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4 4
10 8 12 5
1 2
1 3
2 3
3 4
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

If Takahashi takes the route Space \(1\) \(\to\) Space \(3\) \(\to\) Space \(4\), his happiness changes as follows.

- When going from Space \(1\) (altitude \(10\)) to Space \(3\) (altitude \(12\)), it decreases by \(2\times (12-10)=4\) and becomes \(0-4=-4\).
- When going from Space \(3\) (altitude \(12\)) to Space \(4\) (altitude \(5\)), it increases by \(12-5=7\) and becomes \(-4+7=3\).

If he ends the travel here, the final happiness will be \(3\), which is the maximum possible value.

--------------

*** Sample Input 2

#+begin_example
2 1
0 10
1 2
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

His happiness is maximized by not moving at all.


** [[https://atcoder.jp/contests/abc235/tasks/abc235_e][E - MST + 1]]

Score : \(500\) points

*** Problem Statement

Given is a weighted undirected connected graph \(G\) with \(N\) vertices and \(M\) edges, which may contain self-loops and multi-edges.\\
The vertices are labeled as Vertex \(1\), Vertex \(2\), \(\dots\), Vertex \(N\).\\
The edges are labeled as Edge \(1\), Edge \(2\), \(\ldots\), Edge \(M\). Edge \(i\) connects Vertex \(a_i\) and Vertex \(b_i\) and has a weight of \(c_i\). Here, for every pair of integers \((i, j)\) such that \(1 \leq i \lt j \leq M\), \(c_i \neq c_j\) holds.

Process the \(Q\) queries explained below.\\
The \(i\)-th query gives a triple of integers \((u_i, v_i, w_i)\). Here, for every integer \(j\) such that \(1 \leq j \leq M\), \(w_i \neq c_j\) holds.\\
Let \(e_i\) be an undirected edge that connects Vertex \(u_i\) and Vertex \(v_i\) and has a weight of \(w_i\). Consider the graph \(G_i\) obtained by adding \(e_i\) to \(G\). It can be proved that the minimum spanning tree \(T_i\) of \(G_i\) is uniquely determined. Does \(T_i\) contain \(e_i\)? Print the answer as =Yes= or =No=.

Note that the queries do not change \(T\). In other words, even though Query \(i\) considers the graph obtained by adding \(e_i\) to \(G\), the \(G\) in other queries does not have \(e_i\).

What is minimum spanning tree?

The *spanning tree* of \(G\) is a tree with all of the vertices in \(G\) and some of the edges in \(G\).\\
The *minimum spanning tree* of \(G\) is the tree with the minimum total weight of edges among the spanning trees of \(G\).

*** Constraints

- \(2 \leq N \leq 2 \times 10^5\)
- \(N - 1 \leq M \leq 2 \times 10^5\)
- \(1 \leq a_i \leq N\) \((1 \leq i \leq M)\)
- \(1 \leq b_i \leq N\) \((1 \leq i \leq M)\)
- \(1 \leq c_i \leq 10^9\) \((1 \leq i \leq M)\)
- \(c_i \neq c_j\) \((1 \leq i \lt j \leq M)\)
- The graph \(G\) is connected.
- \(1 \leq Q \leq 2 \times 10^5\)
- \(1 \leq u_i \leq N\) \((1 \leq i \leq Q)\)
- \(1 \leq v_i \leq N\) \((1 \leq i \leq Q)\)
- \(1 \leq w_i \leq 10^9\) \((1 \leq i \leq Q)\)
- \(w_i \neq c_j\) \((1 \leq i \leq Q, 1 \leq j \leq M)\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(Q\)
\(a_1\) \(b_1\) \(c_1\)
\(a_2\) \(b_2\) \(c_2\)
\(\vdots\)
\(a_M\) \(b_M\) \(c_M\)
\(u_1\) \(v_1\) \(w_1\)
\(u_2\) \(v_2\) \(w_2\)
\(\vdots\)
\(u_Q\) \(v_Q\) \(w_Q\)
#+end_example

*** Output

Print \(Q\) lines. The \(i\)-th line should contain the answer to Query \(i\): =Yes= or =No=.

--------------

*** Sample Input 1

#+begin_example
5 6 3
1 2 2
2 3 3
1 3 6
2 4 5
4 5 9
3 5 8
1 3 1
3 4 7
3 5 7
#+end_example

*** Sample Output 1

#+begin_example
Yes
No
Yes
#+end_example

Below, let \((u,v,w)\) denote an undirected edge that connects Vertex \(u\) and Vertex \(v\) and has the weight of \(w\). Here is an illustration of \(G\):

[[https://img.atcoder.jp/ghi/15ac15edee5a8b055f65192d7323d43b.png]]

For example, Query \(1\) considers the graph \(G_1\) obtained by adding \(e_1 = (1,3,1)\) to \(G\). The minimum spanning tree \(T_1\) of \(G_1\) has the edge set \(\lbrace (1,2,2),(1,3,1),(2,4,5),(3,5,8) \rbrace\), which contains \(e_1\), so =Yes= should be printed.

--------------

*** Sample Input 2

#+begin_example
2 3 2
1 2 100
1 2 1000000000
1 1 1
1 2 2
1 1 5
#+end_example

*** Sample Output 2

#+begin_example
Yes
No
#+end_example


** [[https://atcoder.jp/contests/abc234/tasks/abc234_f][F - Reordering]]

Score : \(500\) points

*** Problem Statement

Given is a string \(S\). How many different strings can be obtained as a permutation of a non-empty, *not necessarily contiguous* subsequence of \(S\)?

Since the count can be enormous, print it modulo \(998244353\).

*** Constraints

- \(S\) is a string of length \(1\) and \(5000\) (inclusive) consisting of lowercase English letters.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(S\)
#+end_example

*** Output

Print the number of different strings that can be obtained as a permutation of a subsequence of \(S\), modulo \(998244353\).

--------------

*** Sample Input 1

#+begin_example
aab
#+end_example

*** Sample Output 1

#+begin_example
8
#+end_example

There are \(8\) different strings that can be obtained as a permutation of a subsequence of \(S\): =a=, =b=, =aa=, =ab=, =ba=, =aab=, =aba=, =baa=.

--------------

*** Sample Input 2

#+begin_example
aaa
#+end_example

*** Sample Output 2

#+begin_example
3
#+end_example

--------------

*** Sample Input 3

#+begin_example
abcdefghijklmnopqrstuvwxyz
#+end_example

*** Sample Output 3

#+begin_example
149621752
#+end_example

Be sure to print the count modulo \(998244353\).


** [[https://atcoder.jp/contests/abc232/tasks/abc232_e][E - Rook Path]]

Score : \(500\) points

*** Problem Statement

There is a \(H \times W\)-square grid with \(H\) horizontal rows and \(W\) vertical columns. Let \((i, j)\) denote the square at the \(i\)-th row from the top and \(j\)-th column from the left.

The grid has a rook, initially on \((x_1, y_1)\). Takahashi will do the following operation \(K\) times.

- Move the rook to a square that shares the row or column with the square currently occupied by the rook. Here, it must move to a square different from the current one.

How many ways are there to do the \(K\) operations so that the rook will be on \((x_2, y_2)\) in the end? Since the answer can be enormous, find it modulo \(998244353\).

*** Constraints

- \(2 \leq H, W \leq 10^9\)
- \(1 \leq K \leq 10^6\)
- \(1 \leq x_1, x_2 \leq H\)
- \(1 \leq y_1, y_2 \leq W\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\) \(K\)
\(x_1\) \(y_1\) \(x_2\) \(y_2\)
#+end_example

*** Output

Print the number of ways to do the \(K\) operations so that the rook will be on \((x_2, y_2)\) in the end, modulo \(998244353\).

--------------

*** Sample Input 1

#+begin_example
2 2 2
1 2 2 1
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

We have the following two ways.

- First, move the rook from \((1, 2)\) to \((1, 1)\). Second, move it from \((1, 1)\) to \((2, 1)\).
- First, move the rook from \((1, 2)\) to \((2, 2)\). Second, move it from \((2, 2)\) to \((2, 1)\).

--------------

*** Sample Input 2

#+begin_example
1000000000 1000000000 1000000
1000000000 1000000000 1000000000 1000000000
#+end_example

*** Sample Output 2

#+begin_example
24922282
#+end_example

Be sure to find the count modulo \(998244353\).

--------------

*** Sample Input 3

#+begin_example
3 3 3
1 3 3 3
#+end_example

*** Sample Output 3

#+begin_example
9
#+end_example


** [[https://atcoder.jp/contests/abc231/tasks/abc231_f][F - Jealous Two]]

Score : \(500\) points

*** Problem Statement

Snuke is planning on giving one gift each to Takahashi and Aoki.\\
There are \(N\) candidates for the gifts. Takahashi's impression of the \(i\)-th candidate is \(A_i\), and Aoki's impression of it is \(B_i\).

The two are very jealous. If Takahashi's impression of the gift Aoki gets is greater than Takahashi's impression of the gift Takahashi gets, Takahashi gets jealous of Aoki and starts fighting, and vice versa.

Among the \(N^2\) possible ways of giving the gifts, how many do not lead to fighting?

*** Constraints

- \(1 \leq N \leq 2\times 10^5\)
- \(0 \leq A_i \leq 10^9\)
- \(0 \leq B_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(\ldots\) \(A_N\)
\(B_1\) \(\ldots\) \(B_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3
50 100 150
1 3 2
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

For example, if we give the \(1\)-st candidate to Takahashi and the \(2\)-nd candidate to Aoki, Takahashi's impression of the gift Aoki gets is \(100\), while Takahashi's impression of the gift Takahashi gets is \(50\), so Takahashi gets jealous of Aoki and starts fighting.

As another example, if we give the \(3\)-rd candidate to Takahashi and the \(2\)-nd candidate to Aoki, the two will not start fighting.

Note that it is allowed to give the same gift to the two.

--------------

*** Sample Input 2

#+begin_example
3
123456789 123456 123
987 987654 987654321
#+end_example

*** Sample Output 2

#+begin_example
6
#+end_example

--------------

*** Sample Input 3

#+begin_example
10
3 1 4 1 5 9 2 6 5 3
2 7 1 8 2 8 1 8 2 8
#+end_example

*** Sample Output 3

#+begin_example
37
#+end_example


** [[https://atcoder.jp/contests/abc228/tasks/abc228_e][E - Integer Sequence Fair]]

Score : \(500\) points

*** Problem Statement

Integer Sequence Exhibition is taking place, where integer sequences are gathered in one place and evaluated. Here, every integer sequence of length \(N\) consisting of integers between \(1\) and \(K\) (inclusive) is evaluated and given an integer score between \(1\) and \(M\) (inclusive).

Print the number, modulo \(998244353\), of ways to give each of the evaluated sequences a score between \(1\) and \(M\).

Here, two ways are said to be different when there is an evaluated sequence \(A = (A_1, A_2, \ldots, A_N)\) that is given different scores by the two ways.

*** Constraints

- \(1 \leq N, K, M \leq 10^{18}\)
- \(N\), \(K\), and \(M\) are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\) \(M\)
#+end_example

*** Output

Print the number, modulo \(998244353\), of ways to give each of the evaluated sequences a score between \(1\) and \(M\).

--------------

*** Sample Input 1

#+begin_example
2 2 2
#+end_example

*** Sample Output 1

#+begin_example
16
#+end_example

Four sequences are evaluated: \((1, 1)\), \((1, 2)\), \((2, 1)\), and \((2, 2)\). There are \(16\) ways to give each of these sequences a score between \(1\) and \(2\), as follows.

- Give \(1\) to \((1, 1)\), \(1\) to \((1, 2)\), \(1\) to \((2, 1)\), and \(1\) to \((2, 2)\)
- Give \(1\) to \((1, 1)\), \(1\) to \((1, 2)\), \(1\) to \((2, 1)\), and \(2\) to \((2, 2)\)
- Give \(1\) to \((1, 1)\), \(1\) to \((1, 2)\), \(2\) to \((2, 1)\), and \(1\) to \((2, 2)\)
- Give \(1\) to \((1, 1)\), \(1\) to \((1, 2)\), \(2\) to \((2, 1)\), and \(2\) to \((2, 2)\)
- \(\cdots\)
- Give \(2\) to \((1, 1)\), \(2\) to \((1, 2)\), \(2\) to \((2, 1)\), and \(2\) to \((2, 2)\)

Thus, we print \(16\).

--------------

*** Sample Input 2

#+begin_example
3 14 15926535
#+end_example

*** Sample Output 2

#+begin_example
109718301
#+end_example

Be sure to print the count modulo \(998244353\).


** [[https://atcoder.jp/contests/abc226/tasks/abc226_e][E - Just one]]

Score : \(500\) points

*** Problem Statement

Given is an undirected graph with \(N\) vertices and \(M\) edges. The vertices are called Vertex \(1\), Vertex \(2\), \(\ldots\), Vertex \(N\), and the edges are called Edge \(1\), Edge \(2\), \(\ldots\), Edge \(M\). Edge \(i\) \((1 \leq i \leq M)\) connects Vertex \(U_i\) and Vertex \(V_i\). It is guaranteed that the graph is simple: it has no self-loops and no multi-edges.

There are \(2^M\) ways to direct every edge in this graph. We want each vertex to have exactly one edge going from that vertex to another vertex. How many ways are there to direct the edges in that way? Since the answer may be enormous, print it modulo \(998244353\).

*** Constraints

- \(2 \leq N \leq 2\times 10^5\)
- \(1 \leq M \leq 2\times 10^5\)
- \(1 \leq U_i,V_i \leq N\)
- \(U_i \neq V_i\)
- All values in input are integers.
- The given graph is simple.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(U_1\) \(V_1\)
\(U_2\) \(V_2\)
\(\vdots\)
\(U_M\) \(V_M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3 3
1 2
1 3
2 3
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

There are two ways to direct the edges to achieve the objective:

- \(1\rightarrow 2\) , \(2\rightarrow 3\) , \(1\leftarrow 3\)
- \(1\leftarrow 2\) , \(2\leftarrow 3\) , \(1\rightarrow 3\)

--------------

*** Sample Input 2

#+begin_example
2 1
1 2
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

It is obviously impossible to make every vertex have one edge going from that vertex.

--------------

*** Sample Input 3

#+begin_example
7 7
1 2
2 3
3 4
4 2
5 6
6 7
7 5
#+end_example

*** Sample Output 3

#+begin_example
4
#+end_example


** [[https://atcoder.jp/contests/abc224/tasks/abc224_d][D - 8 Puzzle on Graph]]

Score : \(400\) points

*** Problem Statement

Takahashi found a puzzle along some road.\\
It is composed of an undirected graph with nine vertices and \(M\) edges, and eight pieces.

The nine vertices of the graph are called Vertex \(1\), Vertex \(2\), \(\ldots\), Vertex \(9\). For each \(i = 1, 2, \ldots, M\), the \(i\)-th edge connects Vertex \(u_i\) and Vertex \(v_i\).\\
The eight pieces are called Piece \(1\), Piece \(2\), \(\ldots\), Piece \(8\). For each \(j = 1, 2, \ldots, 8\), Piece \(j\) is on Vertex \(p_j\).\\
Here, it is guaranteed that all pieces are on distinct vertices. Note that there is exactly one /empty/ vertex without a piece.

Takahashi can do the following operation on the puzzle any number of times (possibly zero).

#+begin_quote
Choose a piece on a vertex adjacent to the empty vertex, and move it to the empty vertex.

#+end_quote

By repeating this operation, he aims to /complete/ the puzzle. The puzzle is considered complete when the following holds.

- For each \(j = 1, 2, \ldots, 8\), Piece \(j\) is on Vertex \(j\).

Determine whether it is possible for Takahashi to complete the puzzle. If it is possible, find the minimum number of operations needed to do so.

*** Constraints

- \(0 \leq M \leq 36\)
- \(1 \leq u_i, v_i \leq 9\)
- The given graph has no multi-edges or self-loops.
- \(1 \leq p_j \leq 9\)
- \(j \neq j' \Rightarrow p_j \neq p_{j'}\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(M\)
\(u_1\) \(v_1\)
\(u_2\) \(v_2\)
\(\vdots\)
\(u_M\) \(v_M\)
\(p_1\) \(p_2\) \(\ldots\) \(p_8\)
#+end_example

*** Output

If it is possible for Takahashi to complete the puzzle, find the minimum number of operations needed to do so. Otherwise, print \(-1\).

--------------

*** Sample Input 1

#+begin_example
5
1 2
1 3
1 9
2 9
3 9
3 9 2 4 5 6 7 8
#+end_example

*** Sample Output 1

#+begin_example
5
#+end_example

The following procedure completes the puzzle in five operations.

1. Move Piece \(2\) from Vertex \(9\) to Vertex \(1\).
2. Move Piece \(3\) from Vertex \(2\) to Vertex \(9\).
3. Move Piece \(2\) from Vertex \(1\) to Vertex \(2\).
4. Move Piece \(1\) from Vertex \(3\) to Vertex \(1\).
5. Move Piece \(3\) from Vertex \(9\) to Vertex \(3\).

On the other hand, it is impossible to complete the puzzle in less than five operations. Thus, we should print \(5\).\\
Note that the given graph may not be connected.

--------------

*** Sample Input 2

#+begin_example
5
1 2
1 3
1 9
2 9
3 9
1 2 3 4 5 6 7 8
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

The puzzle is already complete from the beginning. Thus, the minimum number of operations needed to complete the puzzle is \(0\).

--------------

*** Sample Input 3

#+begin_example
12
8 5
9 6
4 5
4 1
2 5
8 9
2 1
3 6
8 7
6 5
7 4
2 3
1 2 3 4 5 6 8 7
#+end_example

*** Sample Output 3

#+begin_example
-1
#+end_example

No sequence of operations can complete the puzzle, so we should print \(-1\).

--------------

*** Sample Input 4

#+begin_example
12
6 5
5 4
4 1
4 7
8 5
2 1
2 5
6 9
3 6
9 8
8 7
3 2
2 3 4 6 1 9 7 8
#+end_example

*** Sample Output 4

#+begin_example
16
#+end_example


** [[https://atcoder.jp/contests/abc223/tasks/abc223_e][E - Placing Rectangles]]

Score : \(500\) points

*** Problem Statement

For positive integers \(X\) and \(Y\), a rectangle in a two-dimensional plane that satisfies the conditions below is said to be *good*.

- Every edge is parallel to the \(x\)- or \(y\)-axis.
- For every vertex, its \(x\)-coordinate is an integer between \(0\) and \(X\) (inclusive), and \(y\)-coordinate is an integer between \(0\) and \(Y\) (inclusive).

Determine whether it is possible to place the following three good rectangles without overlapping: a good rectangle of an area at least \(A\), another of an area at least \(B\), and another of an area at least \(C\).

Here, three rectangles are considered to be non-overlapping when the intersection of any two of them has an area of \(0\).

*** Constraints

- \(1 \leq X, Y \leq 10^9\)
- \(1 \leq A, B, C \leq 10^{18}\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(X\) \(Y\) \(A\) \(B\) \(C\)
#+end_example

*** Output

If it is possible to place three rectangles under the conditions specified in the Problem Statement, print =Yes=; otherwise, print =No=.

--------------

*** Sample Input 1

#+begin_example
3 3 2 2 3
#+end_example

*** Sample Output 1

#+begin_example
Yes
#+end_example

The figure below shows a possible placement, where the number in a rectangle represents its area.

We can see that \(2 \geq A, 3 \geq B, 3 \geq C\), satisfying the conditions.

[[https://img.atcoder.jp/ghi/abc223e_sample.png]]

--------------

*** Sample Input 2

#+begin_example
3 3 4 4 1
#+end_example

*** Sample Output 2

#+begin_example
No
#+end_example

There is no possible placement under the conditions.

--------------

*** Sample Input 3

#+begin_example
1000000000 1000000000 1000000000000000000 1000000000000000000 1000000000000000000
#+end_example

*** Sample Output 3

#+begin_example
No
#+end_example


** [[https://atcoder.jp/contests/abc222/tasks/abc222_e][E - Red and Blue Tree]]

Score : \(500\) points

*** Problem Statement

Given are a tree with \(N\) vertices, a sequence of \(M\) numbers \(A=(A_1,\ldots,A_M)\), and an integer \(K\).\\
The vertices are numbered \(1\) through \(N\), and the \(i\)-th edge connects Vertices \(U_i\) and \(V_i\).

We will paint each of the \(N-1\) edges of this tree red or blue. Among the \(2^{N-1}\) such ways, find the number of ones that satisfies the following condition, modulo \(998244353\).

Condition:\\
Let us put a piece on Vertex \(A_1\), and for each \(i=1,\ldots,M-1\) in this order, move it from Vertex \(A_i\) to Vertex \(A_{i+1}\) along the edges in the shortest path. After all of these movements, \(R-B=K\) holds, where \(R\) and \(B\) are the numbers of times the piece traverses a red edge and a blue edge, respectively.

*** Constraints

- \(2 \leq N \leq 1000\)
- \(2 \leq M \leq 100\)
- \(|K| \leq 10^5\)
- \(1 \leq A_i \leq N\)
- \(1\leq U_i,V_i\leq N\)
- The given graph is a tree.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(K\)
\(A_1\) \(A_2\) \(\ldots\) \(A_M\)
\(U_1\) \(V_1\)
\(\vdots\)
\(U_{N-1}\) \(V_{N-1}\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
4 5 0
2 3 2 1 4
1 2
2 3
3 4
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

If we paint the \(1\)-st and \(3\)-rd edges red and the \(2\)-nd edge blue, the piece will traverse the following numbers of red and blue edges:

- \(0\) red edges and \(1\) blue edge when moving from Vertex \(2\) to \(3\),
- \(0\) red edges and \(1\) blue edge when moving from Vertex \(3\) to \(2\),
- \(1\) red edge and \(0\) blue edges when moving from Vertex \(2\) to \(1\),
- \(2\) red edges and \(1\) blue edge when moving from Vertex \(1\) to \(4\),

for a total of \(3\) red edges and \(3\) blue edges, satisfying the condition.

[[https://img.atcoder.jp/ghi/f9b2b199fb6eedaca02e15ff556b72b1.png]]

Another way to satisfy the condition is to paint the \(1\)-st and \(3\)-rd edges blue and the \(2\)-nd edge red. There is no other way to satisfy it, so the answer is \(2\).

--------------

*** Sample Input 2

#+begin_example
3 10 10000
1 2 1 2 1 2 2 1 1 2
1 2
1 3
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

There may be no way to paint the tree to satisfy the condition.

--------------

*** Sample Input 3

#+begin_example
10 2 -1
1 10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
#+end_example

*** Sample Output 3

#+begin_example
126
#+end_example

--------------

*** Sample Input 4

#+begin_example
5 8 -1
1 4 1 4 2 1 3 5
1 2
4 1
3 1
1 5
#+end_example

*** Sample Output 4

#+begin_example
2
#+end_example


** [[https://atcoder.jp/contests/abc221/tasks/abc221_e][E - LEQ]]

Score : \(500\) points

*** Problem Statement

Given is a sequence of \(N\) integers: \(A = (A_1, A_2, \dots, A_N)\).

Find the number of (not necessarily contiguous) subsequences \(A'=(A'_1,A'_2,\ldots,A'_k)\) of length at least \(2\) that satisfy the following condition:

- \(A'_1 \leq A'_k\).

Since the count can be enormous, print it modulo \(998244353\).

Here, two subsequences are distinguished when they originate from different sets of indices, even if they are the same as sequences.

*** Constraints

- \(2 \leq N \leq 3 \times 10^5\)
- \(1 \leq A_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\ldots\) \(A_N\)
#+end_example

*** Output

Print the number of (not necessarily contiguous) subsequences \(A'=(A'_1,A'_2,\ldots,A'_k)\) of length at least \(2\) that satisfy the condition in Problem Statement.

--------------

*** Sample Input 1

#+begin_example
3
1 2 1
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

\(A=(1,2,1)\) has four (not necessarily contiguous) subsequences of length at least \(2\): \((1,2)\), \((1,1)\), \((2,1)\), \((1,2,1)\).

Three of them, \((1,2)\), \((1,1)\), \((1,2,1)\), satisfy the condition in Problem Statement.

--------------

*** Sample Input 2

#+begin_example
3
1 2 2
#+end_example

*** Sample Output 2

#+begin_example
4
#+end_example

Note that two subsequences are distinguished when they originate from different sets of indices, even if they are the same as sequences.

In this Sample, there are four subsequences, \((1,2)\), \((1,2)\), \((2,2)\), \((1,2,2)\), that satisfy the condition.

--------------

*** Sample Input 3

#+begin_example
3
3 2 1
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

There may be no subsequence that satisfies the condition.

--------------

*** Sample Input 4

#+begin_example
10
198495780 28463047 859606611 212983738 946249513 789612890 782044670 700201033 367981604 302538501
#+end_example

*** Sample Output 4

#+begin_example
830
#+end_example


** [[https://atcoder.jp/contests/abc220/tasks/abc220_e][E - Distance on Large Perfect Binary Tree]]

Score : \(500\) points

*** Problem Statement

We have a tree with \(2^N-1\) vertices.\\
The vertices are numbered \(1\) through \(2^N-1\). For each \(1\leq i < 2^{N-1}\), the following edges exist:

- an undirected edge connecting Vertex \(i\) and Vertex \(2i\),
- an undirected edge connecting Vertex \(i\) and Vertex \(2i+1\).

There is no other edge.

Let the distance between two vertices be the number of edges in the simple path connecting those two vertices.

Find the number, modulo \(998244353\), of pairs of vertices \((i, j)\) such that the distance between them is \(D\).

*** Constraints

- \(2 \leq N \leq 10^6\)
- \(1 \leq D \leq 2\times 10^6\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(D\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3 2
#+end_example

*** Sample Output 1

#+begin_example
14
#+end_example

The following figure describes the given tree.

[[https://img.atcoder.jp/ghi/86d098048a50638decb39ed6659d32cf.png]]

There are \(14\) pairs of vertices such that the distance between them is \(2\): \((1,4),(1,5),(1,6),(1,7),(2,3),(3,2),(4,1),(4,5),(5,1),(5,4),(6,1),(6,7),(7,1),(7,6)\).

--------------

*** Sample Input 2

#+begin_example
14142 17320
#+end_example

*** Sample Output 2

#+begin_example
11284501
#+end_example


** [[https://atcoder.jp/contests/abc220/tasks/abc220_f][F - Distance Sums 2]]

Score : \(500\) points

*** Problem Statement

Given is a tree with \(N\) vertices. The vertices are numbered \(1,2,\ldots ,N\), and the \(i\)-th edge is an undirected edge connecting Vertices \(u_i\) and \(v_i\).

For each integer \(i\,(1 \leq i \leq N)\), find \(\sum_{j=1}^{N}dis(i,j)\).

Here, \(dis(i,j)\) denotes the minimum number of edges that must be traversed to go from Vertex \(i\) to Vertex \(j\).

*** Constraints

- \(2 \leq N \leq 2 \times 10^5\)
- \(1 \leq u_i < v_i \leq N\)
- The given graph is a tree.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(u_1\) \(v_1\)
\(u_2\) \(v_2\)
\(\vdots\)
\(u_{N-1}\) \(v_{N-1}\)
#+end_example

*** Output

Print \(N\) lines.

The \(i\)-th line should contain \(\sum_{j=1}^{N}dis(i,j)\).

--------------

*** Sample Input 1

#+begin_example
3
1 2
2 3
#+end_example

*** Sample Output 1

#+begin_example
3
2
3
#+end_example

We have:

\(dis(1,1)+dis(1,2)+dis(1,3)=0+1+2=3\),

\(dis(2,1)+dis(2,2)+dis(2,3)=1+0+1=2\),

\(dis(3,1)+dis(3,2)+dis(3,3)=2+1+0=3\).

--------------

*** Sample Input 2

#+begin_example
2
1 2
#+end_example

*** Sample Output 2

#+begin_example
1
1
#+end_example

--------------

*** Sample Input 3

#+begin_example
6
1 6
1 5
1 3
1 4
1 2
#+end_example

*** Sample Output 3

#+begin_example
5
9
9
9
9
9
#+end_example


** [[https://atcoder.jp/contests/abc216/tasks/abc216_f][F - Max Sum Counting]]

Score : \(500\) points

*** Problem Statement

Given are sequences of \(N\) integers each: \(A = (A_1, \dots, A_N)\) and \(B = (B_1, \dots, B_N)\). Find the number of non-empty subsets \(S\) of \(\{1,2,\ldots,N\}\) that satisfy the following condition:

- \(\max_{i \in S} A_i \geq \sum_{i \in S} B_i\).

Since the count can be enormous, print it modulo \(998244353\).

*** Constraints

- \(1 \leq N \leq 5000\)
- \(1 \leq A_i,B_i \leq 5000\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\ldots\) \(A_N\)
\(B_1\) \(B_2\) \(\ldots\) \(B_N\)
#+end_example

*** Output

Print the number of subsets \(S\) that satisfy the condition in the Problem Statement, modulo \(998244353\).

--------------

*** Sample Input 1

#+begin_example
2
3 1
1 2
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

\(\{1,2,\ldots,N\}\) has three subsets: \(\{1\}\), \(\{2\}\), and \(\{1,2\}\).

- For \(S=\{1\}\), we have \(\max_{i \in S} A_i=3\) and \(\sum_{i \in S} B_i=1\).
- For \(S=\{2\}\), we have \(\max_{i \in S} A_i=1\) and \(\sum_{i \in S} B_i=2\).
- For \(S=\{1,2\}\), we have \(\max_{i \in S} A_i=3\) and \(\sum_{i \in S} B_i=3\).

Thus, the condition \(\max_{i \in S} A_i \geq \sum_{i \in S} B_i\) is satisfied by two subsets: \(\{1\}\) and \(\{1,2\}\).

--------------

*** Sample Input 2

#+begin_example
2
1 1
2 2
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

There may be no subsets that satisfy the condition.

--------------

*** Sample Input 3

#+begin_example
20
1937 3980 2689 1208 3640 1979 581 2271 4229 3948 3708 1522 4161 4661 3797 96 3388 3395 2920 2247
4485 2580 174 1156 3770 3396 3558 3500 3494 479 269 3383 1230 1711 3545 3919 134 475 3796 1017
#+end_example

*** Sample Output 3

#+begin_example
476
#+end_example


** [[https://atcoder.jp/contests/abc215/tasks/abc215_e][E - Chain Contestant]]

Score : \(500\) points

*** Problem Statement

AtCoder in another world holds \(10\) types of contests called AAC, ..., AJC. There will be \(N\) contests from now on.\\
The types of these \(N\) contests are given to you as a string \(S\): if the \(i\)-th character of \(S\) is \(x\), the \(i\)-th contest will be A\(x\)C.\\
AtCoDeer will choose and participate in one or more contests from the \(N\) so that the following condition is satisfied.

- In the sequence of contests he will participate in, the contests of the same type are consecutive.
  - Formally, when AtCoDeer participates in \(x\) contests and the \(i\)-th of them is of type \(T_i\), for every triple of integers \((i,j,k)\) such that \(1 \le i < j < k \le x\), \(T_i=T_j\) must hold if \(T_i=T_k\).

Find the number of ways for AtCoDeer to choose contests to participate in, modulo \(998244353\).\\
Two ways to choose contests are considered different when there is a contest \(c\) such that AtCoDeer participates in \(c\) in one way but not in the other.

*** Constraints

- \(1 \le N \le 1000\)
- \(|S|=N\)
- \(S\) consists of uppercase English letters from =A= through =J=.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(S\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
4
BGBH
#+end_example

*** Sample Output 1

#+begin_example
13
#+end_example

For example, participating in the \(1\)-st and \(3\)-rd contests is valid, and so is participating in the \(2\)-nd and \(4\)-th contests.\\
On the other hand, participating in the \(1\)-st, \(2\)-nd, \(3\)-rd, and \(4\)-th contests is invalid, since the participations in ABCs are not consecutive, violating the condition for the triple \((i,j,k)=(1,2,3)\).\\
Additionally, it is not allowed to participate in zero contests.\\
In total, there are \(13\) valid ways to participate in some contests.

--------------

*** Sample Input 2

#+begin_example
100
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBIEIJEIJIJCGCCFGIEBIHFCGFBFAEJIEJAJJHHEBBBJJJGJJJCCCBAAADCEHIIFEHHBGF
#+end_example

*** Sample Output 2

#+begin_example
330219020
#+end_example

Be sure to find the count modulo \(998244353\).


** [[https://atcoder.jp/contests/abc214/tasks/abc214_d][D - Sum of Maximum Weights]]

Score : \(400\) points

*** Problem Statement

We have a tree with \(N\) vertices numbered \(1, 2, \dots, N\).\\
The \(i\)-th edge \((1 \leq i \leq N - 1)\) connects Vertex \(u_i\) and Vertex \(v_i\) and has a weight \(w_i\).

For different vertices \(u\) and \(v\), let \(f(u, v)\) be the greatest weight of an edge contained in the shortest path from Vertex \(u\) to Vertex \(v\).

Find \(\displaystyle \sum_{i = 1}^{N - 1} \sum_{j = i + 1}^N f(i, j)\).

*** Constraints

- \(2 \leq N \leq 10^5\)
- \(1 \leq u_i, v_i \leq N\)
- \(1 \leq w_i \leq 10^7\)
- The given graph is a tree.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(u_1\) \(v_1\) \(w_1\)
\(\vdots\)
\(u_{N - 1}\) \(v_{N - 1}\) \(w_{N - 1}\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3
1 2 10
2 3 20
#+end_example

*** Sample Output 1

#+begin_example
50
#+end_example

We have \(f(1, 2) = 10\), \(f(2, 3) = 20\), and \(f(1, 3) = 20\), so we should print their sum, or \(50\).

--------------

*** Sample Input 2

#+begin_example
5
1 2 1
2 3 2
4 2 5
3 5 14
#+end_example

*** Sample Output 2

#+begin_example
76
#+end_example


** [[https://atcoder.jp/contests/abc213/tasks/abc213_e][E - Stronger Takahashi]]

Score : \(500\) points

*** Problem Statement

There is a town divided into a grid of cells with \(H\) rows and \(W\) columns. The cell at the \(i\)-th row from the top and \(j\)-th column from the left is a passable space if \(S_{i,j}\) is =.= and a block if \(S_{i,j}\) is =#=.

Takahashi will go from his house to a fish market. His house is in the cell at the top-left corner, and the fish market is in the cell at the bottom-right corner.

Takahashi can move one cell up, down, left, or right to a passable cell. He cannot leave the town. He cannot enter a block, either. However, his physical strength allows him to destroy all blocks in a square region with \(2\times 2\) cells of his choice with one punch, making these cells passable.

Find the minimum number of punches needed for Takahashi to reach the fish market.

*** Constraints

- \(2 \leq H,W \leq 500\)
- \(H\) and \(W\) are integers.
- \(S_{i,j}\) is =.= or =#=.
- \(S_{1,1}\) and \(S_{H,W}\) are =.=.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\)
\(S_{1,1} \ldots S_{1,W}\)
\(\vdots\)
\(S_{H,1} \ldots S_{H,W}\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
5 5
..#..
#.#.#
##.##
#.#.#
..#..
#+end_example

*** Sample Output 1

#+begin_example
1
#+end_example

He can reach the fish market by, for example, destroying the blocks in the square region with \(2\times 2\) cells marked =*= below.

#+begin_example
..#..
#.**#
##**#
#.#.#
..#..
#+end_example

It is not required that all of the \(2\times 2\) cells in the region to punch are blocks.

--------------

*** Sample Input 2

#+begin_example
5 7
.......
######.
.......
.######
.......
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

He can reach the fish market without destroying blocks, though he has to go a long way around.

--------------

*** Sample Input 3

#+begin_example
8 8
.#######
########
########
########
########
########
########
#######.
#+end_example

*** Sample Output 3

#+begin_example
5
#+end_example


** [[https://atcoder.jp/contests/abc212/tasks/abc212_e][E - Safety Journey]]

Score : \(500\) points

*** Problem Statement

The Republic of AtCoder has \(N\) cities, called City \(1\), City \(2\), \(\ldots\), City \(N\). Initially, there was a bidirectional road between every pair of different cities, but \(M\) of these roads have become unusable due to deterioration over time. More specifically, for each \(1\leq i \leq M\), the road connecting City \(U_i\) and City \(V_i\) has become unusable.

Takahashi will go for a \(K\)-day trip that starts and ends in City \(1\). Formally speaking, a \(K\)-day trip that starts and ends in City \(1\) is a sequence of \(K+1\) cities \((A_0, A_1, \ldots, A_K)\) such that \(A_0=A_K=1\) holds and for each \(0\leq i\leq K-1\), \(A_i\) and \(A_{i+1}\) are different and there is still a usable road connecting City \(A_i\) and City \(A_{i+1}\).

Print the number of different \(K\)-day trips that start and end in City \(1\), modulo \(998244353\). Here, two \(K\)-day trips \((A_0, A_1, \ldots, A_K)\) and \((B_0, B_1, \ldots, B_K)\) are said to be different when there exists an \(i\) such that \(A_i\neq B_i\).

*** Constraints

- \(2 \leq N \leq 5000\)
- \(0 \leq M \leq \min\left( \frac{N(N-1)}{2},5000 \right)\)
- \(2 \leq K \leq 5000\)
- \(1 \leq U_i<V_i \leq N\)
- All pairs \((U_i, V_i)\) are pairwise distinct.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(K\)
\(U_1\) \(V_1\)
\(:\)
\(U_M\) \(V_M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3 1 4
2 3
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

There are four different trips as follows.

- (\(1,2,1,2,1\))
- (\(1,2,1,3,1\))
- (\(1,3,1,2,1\))
- (\(1,3,1,3,1\))

No other trip is valid, so we should print \(4\).

--------------

*** Sample Input 2

#+begin_example
3 3 3
1 2
1 3
2 3
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

No road remains usable, so there is no valid trip.

--------------

*** Sample Input 3

#+begin_example
5 3 100
1 2
4 5
2 3
#+end_example

*** Sample Output 3

#+begin_example
428417047
#+end_example


** [[https://atcoder.jp/contests/abc210/tasks/abc210_d][D - National Railway]]

Score : \(400\) points

*** Problem Statement

The Kingdom of Takahashi can be represented as a grid with \(H\) rows and \(W\) columns. Let \((i, j)\) denote the square at the \(i\)-th row from the north and \(j\)-th column from the west.

Recently, there have been more and more requests from the kingdom's citizens to build a railway, and now the king, Takahashi, has no choice but to build one.\\
The construction of the railway will have the following two phases.

- First, choose two *different* squares and build a station on each of them. It costs \(A_{i,j}\) yen to build a station on the square \((i, j)\).
- Then, build a railway track connecting these two stations. This costs \(C \times (|i-i'| + |j-j'|)\) yen when the two stations are on the squares \((i, j)\) and \((i', j')\). (\(|x|\) denotes the absolute value of \(x\).)

Takahashi's priority is to spend as little as possible on this construction, rather than to improve convenience for the citizens.\\
Print the minimum possible total cost of the construction of the railway.

*** Constraints

- \(2 \leq H, W \leq 1000\)
- \(1 \leq C \leq 10^9\)
- \(1 \leq A_{ij} \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\) \(C\)
\(A_{1,1}\) \(A_{1,2}\) \(\cdots\) \(A_{1,W}\)
\(\vdots\)
\(A_{H,1}\) \(A_{H,2}\) \(\cdots\) \(A_{H,W}\)
#+end_example

*** Output

Print the minimum possible total cost of the construction of the railway.

--------------

*** Sample Input 1

#+begin_example
3 4 2
1 7 7 9
9 6 3 7
7 8 6 4
#+end_example

*** Sample Output 1

#+begin_example
10
#+end_example

If we build stations on the squares \((1, 1)\) and \((2, 3)\), it will cost \(1 + 3 = 4\) yen to build the stations and \(2 \times (|1-2| + |1-3|) = 6\) yen to build the track, for a total of \(4+6 = 10\) yen. This is the minimum possible total cost of the construction.

--------------

*** Sample Input 2

#+begin_example
3 3 1000000000
1000000 1000000 1
1000000 1000000 1000000
1 1000000 1000000
#+end_example

*** Sample Output 2

#+begin_example
1001000001
#+end_example


** [[https://atcoder.jp/contests/abc201/tasks/abc201_d][D - Game in Momotetsu World]]

Score : \(400\) points

*** Problem Statement

We have a grid with \(H\) rows and \(W\) columns of squares, where each square is blue or red. The square at the \(i\)-th row and \(j\)-th column is blue if \(A_{i, j}\) is =+=, and red if \(A_{i, j}\) is =-=.\\
There is a piece on this grid, which is initially placed on the top-left square. Takahashi and Aoki will play a game using this piece.\\
Each of the two players has \(0\) points in the beginning. They will alternately do the following operation, with Takahashi going first:

- Move the piece one square right or one square down. It is not allowed to move the piece outside the grid. Then, the player (who moved the piece) gets one point if the piece is now on a blue square, and loses one point if the piece is now on a red square.

The game ends when one of the players is unable to do the operation. Then, the player with the greater number of points wins the game if they have different numbers of points. Otherwise, the game is drawn.\\
Find the result of the game when both players play the game to get the best outcome.

*** Constraints

- \(1 \le H, W \le 2000\)
- \(A_{i, j}\) is =+= or =-=.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\)
\(A_{1, 1}A_{1, 2}A_{1, 3} \dots A_{1, W}\)
\(A_{2, 1}A_{2, 2}A_{2, 3} \dots A_{2, W}\)
\(A_{3, 1}A_{3, 2}A_{3, 3} \dots A_{3, W}\)
\(\hspace{2cm}\vdots\)
\(A_{H, 1}A_{H, 2}A_{H, 3} \dots A_{H, W}\)
#+end_example

*** Output

If Takahashi will win, print =Takahashi=; if Aoki will win, print =Aoki=; if the game will be drawn, print =Draw=.

--------------

*** Sample Input 1

#+begin_example
3 3
---
+-+
+--
#+end_example

*** Sample Output 1

#+begin_example
Takahashi
#+end_example

Takahashi has a winning strategy described below.

First, Takahashi moves the piece right, which makes him lose one point because the piece goes to a red square. Now, Takahashi has \(-1\) point and Aoki has \(0\) points. Then,

- if Aoki moves the piece right, Takahashi moves it down;
- if Aoki moves the piece down, Takahashi moves it right.

In either case, Aoki moves the piece to a red square losing one point, and Takahashi moves the piece to a blue square getting one point, which means now Takahashi has \(0\) points and Aoki has \(-1\) point.\\
The piece is now on the square at the \(2\)-nd row from the top and \(3\)-rd column from the left, and Aoki can only choose to move it down, to a red square. Now, Takahashi has \(0\) points and Aoki has \(-2\) points.\\
The piece cannot move right or down anymore, so the game ends. Since Takahashi has the greater number of points, he wins.

--------------

*** Sample Input 2

#+begin_example
2 4
+++-
-+-+
#+end_example

*** Sample Output 2

#+begin_example
Aoki
#+end_example

Aoki can win the game, regardless of what choices Takahashi makes.

--------------

*** Sample Input 3

#+begin_example
1 1
-
#+end_example

*** Sample Output 3

#+begin_example
Draw
#+end_example

In this case, the game immediately ends. Since both players have \(0\) points, the game is drawn.


** [[https://atcoder.jp/contests/abc200/tasks/abc200_d][D - Happy Birthday! 2]]

Score : \(400\) points

*** Problem Statement

You are given a sequence of \(N\) positive integers: \(A = (A_1, A_2, \dots, A_N)\). Determine whether there is a pair of sequences \(B = (B_1, B_2, \dots, B_x), C = (C_1, C_2, \dots, C_y)\) satisfying all of the conditions, and print one such pair if it exists.

- \(1 ≤ x, y ≤ N\).
- \(1 \le B_1 < B_2 < \dots < B_{x} \le N\).
- \(1 \le C_1 < C_2 < \dots < C_{y} \le N\).
- \(B\) and \(C\) are different sequences.
  - Here, we consider \(B\) and \(C\) different when \(x ≠ y\) or there is an integer \(i\ (1 ≤ i ≤ \min(x, y))\) such that \(B_i ≠ C_i\).
- \(A_{B_1} + A_{B_2} + \dots + A_{B_x}\) and \(A_{C_1} + A_{C_2} + \dots + A_{C_y}\) are equal modulo \(200\).

*** Constraints

- All values in input are integers.
- \(2 \le N \le 200\)
- \(1 \le A_i \le 10^9\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(\dots\) \(A_N\)
#+end_example

*** Output

If there is no pair of sequences \(B, C\) satisfying the conditions, print a single line containing =No=.\\
Otherwise, print your choice of \(B\) and \(C\) in the following format:

#+begin_example
Yes
\(x\) \(B_1\) \(B_2\) \(\dots\) \(B_x\)
\(y\) \(C_1\) \(C_2\) \(\dots\) \(C_y\)
#+end_example

The checker is case-insensitive: you can use either uppercase or lowercase letters.

--------------

*** Sample Input 1

#+begin_example
5
180 186 189 191 218
#+end_example

*** Sample Output 1

#+begin_example
Yes
1 1
2 3 4
#+end_example

For \(B=(1),C=(3,4)\), we have \(A_1 = 180,\ A_3 + A_4 = 380\), which are equal modulo \(200\).\\
There are other solutions that will also be accepted, such as:

#+begin_example
yEs
4 2 3 4 5
3 1 2 5
#+end_example

--------------

*** Sample Input 2

#+begin_example
2
123 523
#+end_example

*** Sample Output 2

#+begin_example
Yes
1 1
1 2
#+end_example

--------------

*** Sample Input 3

#+begin_example
6
2013 1012 2765 2021 508 6971
#+end_example

*** Sample Output 3

#+begin_example
No
#+end_example

If there is no pair of sequences satisfying the conditions, print a single line containing =No=.


** [[https://atcoder.jp/contests/abc198/tasks/abc198_d][D - Send More Money]]

Score : \(400\) points

*** Problem Statement

Given strings \(S_1,S_2,S_3\) consisting of lowercase English letters, solve the alphametic \(S_1+S_2=S_3\).

Formally, determine whether there is a triple of *positive* integers \(N_1, N_2, N_3\) satisfying all of the three conditions below, and find one such triple if it exists.\\
Here, \(N'_1, N'_2, N'_3\) are strings representing \(N_1, N_2, N_3\) (without leading zeros) in base ten, respectively.

- \(N'_i\) and \(S_i\) have the same number of characters.
- \(N_1+N_2=N_3\).
- The \(x\)-th character of \(S_i\) and the \(y\)-th character of \(S_j\) is the same if and only if the \(x\)-th character of \(N'_i\) and the \(y\)-th character of \(N'_j\) are the same.

*** Constraints

- Each of \(S_1\), \(S_2\), \(S_3\) is a string of length between \(1\) and \(10\) (inclusive) consisting of lowercase English letters.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(S_1\)
\(S_2\)
\(S_3\)
#+end_example

*** Output

If there is a triple of positive integers \(N_1, N_2, N_3\) satisfying the conditions, print one such triple, using newline as a separator. Otherwise, print =UNSOLVABLE= instead.

--------------

*** Sample Input 1

#+begin_example
a
b
c
#+end_example

*** Sample Output 1

#+begin_example
1
2
3
#+end_example

Outputs such as \((N_1, N_2, N_3) = (4,5,9)\) will also be accepted, but \((1,1,2)\) will not since it violates the third condition (both =a= and =b= correspond to =1=).

--------------

*** Sample Input 2

#+begin_example
x
x
y
#+end_example

*** Sample Output 2

#+begin_example
1
1
2
#+end_example

Outputs such as \((N_1, N_2, N_3) = (3,3,6)\) will also be accepted, but \((1,2,3)\) will not since it violates the third condition (both \(1\) and \(2\) correspond to =x=).

--------------

*** Sample Input 3

#+begin_example
p
q
p
#+end_example

*** Sample Output 3

#+begin_example
UNSOLVABLE
#+end_example

--------------

*** Sample Input 4

#+begin_example
abcd
efgh
ijkl
#+end_example

*** Sample Output 4

#+begin_example
UNSOLVABLE
#+end_example

--------------

*** Sample Input 5

#+begin_example
send
more
money
#+end_example

*** Sample Output 5

#+begin_example
9567
1085
10652
#+end_example


** [[https://atcoder.jp/contests/abc197/tasks/abc197_e][E - Traveler]]

Score : \(500\) points

*** Problem Statement

There are \(N\) balls, called Ball \(1\) through \(N\), on a number line.\\
Ball \(i\) is at the coordinate \(X_i\).\\
Each ball has a color represented by an integer ID between \(1\) and \(N\) (inclusive); the ID of the color of Ball \(i\) is \(C_i\).\\
You are now at the coordinate \(0\). You will collect all the balls by moving along the line at the speed of \(1\) per second, and then return to the coordinate \(0\).\\
Here, you have to collect the balls in a non-descending order of their IDs.\\
When collecting a ball, you have to be at the coordinate of that ball, but it is not mandatory to collect it when you are there.\\
Find the minimum time needed to start at the coordinate \(0\), collect all the balls, and return to the coordinate \(0\).

*** Constraints

- \(1 \le N \le 2 \times 10^5\)
- \(|X_i| \le 10^9\)
- \(X_i \neq X_j (i \neq j)\)
- \(X_i \neq 0\)
- \(1 \le C_i \le N\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(X_1\) \(C_1\)
\(X_2\) \(C_2\)
\(X_3\) \(C_3\)
\(\hspace{15pt} \vdots\)
\(X_N\) \(C_N\)
#+end_example

*** Output

Print the number of seconds needed.

--------------

*** Sample Input 1

#+begin_example
5
2 2
3 1
1 3
4 2
5 3
#+end_example

*** Sample Output 1

#+begin_example
12
#+end_example

The optimal strategy is:

- spend \(3\) seconds to reach the coordinate \(3\) and collect Ball \(2\);
- spend \(1\) second to reach the coordinate \(2\) and collect Ball \(1\);
- spend \(2\) seconds to reach the coordinate \(4\) and collect Ball \(4\);
- spend \(1\) second to reach the coordinate \(5\) and collect Ball \(5\);
- spend \(4\) seconds to reach the coordinate \(1\) and collect Ball \(3\);
- spend \(1\) second to return to the coordinate \(0\).

Here, we collected the balls in a non-descending order of their IDs: \(1, 2, 2, 3, 3\).

--------------

*** Sample Input 2

#+begin_example
9
5 5
-4 4
4 3
6 3
-5 5
-3 2
2 2
3 3
1 4
#+end_example

*** Sample Output 2

#+begin_example
38
#+end_example


** [[https://atcoder.jp/contests/abc196/tasks/abc196_d][D - Hanjo]]

Score : \(400\) points

*** Problem Statement

We have a rectangular room that is \(H\) meters long and \(W\) meters wide.\\
We will cover this room with \(A\) indistinguishable \(2\) meters \(\times\) \(1\) meters rectangular tatami mats and \(B\) indistinguishable \(1\) meter \(\times\) \(1\) meter square tatami mats. The rectangular mats can be used in either direction: they can be \(2\) meters long and \(1\) meter wide, or \(1\) meter long and \(2\) meters wide.\\
How many ways are there to do this?\\
Here, it is guaranteed that \(2A + B = HW\), and two ways are distinguished if they match only after rotation, reflection, or both.

*** Constraints

- All values in input are integers.
- \(1 ≤ H, W\)
- \(HW ≤ 16\)
- \(0 ≤ A, B\)
- \(2A + B = HW\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\) \(A\) \(B\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
2 2 1 2
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

There are four ways as follows:

[[https://img.atcoder.jp/ghi/d01b63c75c91bd87a73e9a4cc43dda28.png]]

--------------

*** Sample Input 2

#+begin_example
3 3 4 1
#+end_example

*** Sample Output 2

#+begin_example
18
#+end_example

There are six ways as follows, and their rotations.

[[https://img.atcoder.jp/ghi/b7a492abe22e30683e8f9a7b309acd52.png]]

--------------

*** Sample Input 3

#+begin_example
4 4 8 0
#+end_example

*** Sample Output 3

#+begin_example
36
#+end_example


** [[https://atcoder.jp/contests/abc192/tasks/abc192_d][D - Base n]]

Score : \(400\) points

*** Problem Statement

Given are a string \(X\) consisting of =0= through =9=, and an integer \(M\).

Let \(d\) be the greatest digit in \(X\).

How many different integers not greater than \(M\) can be obtained by choosing an integer \(n\) not less than \(d+1\) and seeing \(X\) as a base-\(n\) number?

*** Constraints

- \(X\) consists of =0= through =9=.
- The length of \(X\) is between \(1\) and \(60\) (inclusive).
- \(X\) does not begin with a =0=.
- \(1 \leq M \leq 10^{18}\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(X\)
\(M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
22
10
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

The greatest digit in \(X\) is =2=.

- By seeing \(X\) as a base-\(3\) number, we get \(8\).
- By seeing \(X\) as a base-\(4\) number, we get \(10\).

These two values are the only ones that we can obtain and are not greater than \(10\).

--------------

*** Sample Input 2

#+begin_example
999
1500
#+end_example

*** Sample Output 2

#+begin_example
3
#+end_example

The greatest digit in \(X\) is =9=.

- By seeing \(X\) as a base-\(10\) number, we get \(999\).
- By seeing \(X\) as a base-\(11\) number, we get \(1197\).
- By seeing \(X\) as a base-\(12\) number, we get \(1413\).

These three values are the only ones that we can obtain and are not greater than \(1500\).

--------------

*** Sample Input 3

#+begin_example
100000000000000000000000000000000000000000000000000000000000
1000000000000000000
#+end_example

*** Sample Output 3

#+begin_example
1
#+end_example

By seeing \(X\) as a base-\(2\) number, we get \(576460752303423488\), which is the only value that we can obtain and are not greater than \(1000000000000000000\).


** [[https://atcoder.jp/contests/abc191/tasks/abc191_e][E - Come Back Quickly]]

Score : \(500\) points

*** Problem Statement

In the Republic of AtCoder, there are \(N\) towns numbered \(1\) through \(N\) and \(M\) roads numbered \(1\) through \(M\).\\
Road \(i\) is a one-way road from Town \(A_i\) to Town \(B_i\), and it takes \(C_i\) minutes to go through. It is possible that \(A_i = B_i\), and there may be multiple roads connecting the same pair of towns.\\
Takahashi is thinking about taking a walk in the country. We will call a walk *valid* when it goes through one or more roads and returns to the town it starts at.\\
For each town, determine whether there is a valid walk that starts at that town. Additionally, if the answer is yes, find the minimum time such a walk requires.

*** Constraints

- \(1 \le N \le 2000\)
- \(1 \le M \le 2000\)
- \(1 \le A_i \le N\)
- \(1 \le B_i \le N\)
- \(1 \le C_i \le 10^5\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(B_1\) \(C_1\)
\(A_2\) \(B_2\) \(C_2\)
\(A_3\) \(B_3\) \(C_3\)
\(\hspace{25pt} \vdots\)
\(A_M\) \(B_M\) \(C_M\)
#+end_example

*** Output

Print \(N\) lines. The \(i\)-th line \((1 \le i \le N)\) should contain the following:

- if there is a valid walk that starts at Town \(i\), the minimum time required by such a walk;
- otherwise, =-1=.

--------------

*** Sample Input 1

#+begin_example
4 4
1 2 5
2 3 10
3 1 15
4 3 20
#+end_example

*** Sample Output 1

#+begin_example
30
30
30
-1
#+end_example

By Roads \(1, 2, 3\), Towns \(1, 2, 3\) forms a ring that takes \(30\) minutes to go around.\\
From Town \(4\), we can go to Towns \(1, 2, 3\), but then we cannot return to Town \(4\).

--------------

*** Sample Input 2

#+begin_example
4 6
1 2 5
1 3 10
2 4 5
3 4 10
4 1 10
1 1 10
#+end_example

*** Sample Output 2

#+begin_example
10
20
30
20
#+end_example

There may be a road such that \(A_i = B_i\).\\
Here, we can use just Road \(6\) to depart from Town \(1\) and return to that town.

--------------

*** Sample Input 3

#+begin_example
4 7
1 2 10
2 3 30
1 4 15
3 4 25
3 4 20
4 3 20
4 3 30
#+end_example

*** Sample Output 3

#+begin_example
-1
-1
40
40
#+end_example

Note that there may be multiple roads connecting the same pair of towns.


** [[https://atcoder.jp/contests/abc190/tasks/abc190_f][F - Shift and Inversions]]

Score : \(600\) points

*** Problem Statement

Given is a sequence \(A = [a_0, a_1, a_2, \dots, a_{N-1}]\) that is a permutation of \(0, 1, 2, \dots, N - 1\).\\
For each \(k = 0, 1, 2, \dots, N - 1\), find the inversion number of the sequence \(B = [b_0, b_1, b_2, \dots, b_{N-1}]\) defined as \(b_i = a_{i+k \bmod N}\).

What is inversion number?

The inversion number of a sequence \(A = [a_0, a_1, a_2, \dots, a_{N-1}]\) is the number of pairs of indices \((i, j)\) such that \(i < j\) and \(a_i > a_j\).

*** Constraints

- All values in input are integers.
- \(2 ≤ N ≤ 3 \times 10^5\)
- \(a_0, a_1, a_2, \dots, a_{N-1}\) is a permutation of \(0, 1, 2, \dots, N - 1\).

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(a_0\) \(a_1\) \(a_2\) \(\cdots\) \(a_{N-1}\)
#+end_example

*** Output

Print \(N\) lines.\\
The \((i + 1)\)-th line should contain the answer for the case \(k = i\).

--------------

*** Sample Input 1

#+begin_example
4
0 1 2 3
#+end_example

*** Sample Output 1

#+begin_example
0
3
4
3
#+end_example

We have \(A = [0, 1, 2, 3]\).

For \(k = 0\), the inversion number of \(B = [0, 1, 2, 3]\) is \(0\).\\
For \(k = 1\), the inversion number of \(B = [1, 2, 3, 0]\) is \(3\).\\
For \(k = 2\), the inversion number of \(B = [2, 3, 0, 1]\) is \(4\).\\
For \(k = 3\), the inversion number of \(B = [3, 0, 1, 2]\) is \(3\).

--------------

*** Sample Input 2

#+begin_example
10
0 3 1 5 4 2 9 6 8 7
#+end_example

*** Sample Output 2

#+begin_example
9
18
21
28
27
28
33
24
21
14
#+end_example


** [[https://atcoder.jp/contests/abc189/tasks/abc189_e][E - Rotate and Flip]]

Score : \(500\) points

*** Problem Statement

There are \(N\) pieces on a two-dimensional plane. The coordinates of Piece \(i\) are \((X_i,Y_i)\). There may be multiple pieces at the same coordinates.

We will do \(M\) operations \(\mathrm{op}_1, \ldots, \mathrm{op}_M\), one by one. There are four kinds of operations, described below along with their formats in input.

- =1=：Rotate every piece \(90\) degrees clockwise about the origin;
- =2=：Rotate every piece \(90\) degrees counterclockwise about the origin;
- =3 p=：Move each piece to the point symmetric to it about the line \(x=p\);
- =4 p=：Move each piece to the point symmetric to it about the line \(y=p\).

You are given \(Q\) queries. In the \(i\)-th query, given two integers \(A_i\) and \(B_i\), print the coordinates of Piece \(B_i\) just after the \(A_i\)-th operation. Here, the moment just before the \(1\)-st operation is considered to be the moment just after "the \(0\)-th operation".

*** Constraints

- All values in input are integers.
- \(1 \leq N \leq 2\times 10^5\)
- \(1 \leq M \leq 2\times 10^5\)
- \(1 \leq Q \leq 2\times 10^5\)
- \(-10^9 \leq X_i,Y_i \leq 10^9\)
- \(\mathrm{op}_i\) is in the format of one of the four kinds of operations.
- In an operation with the form =3 p= or =4 p=, \(-10^9 \leq p \leq 10^9\).
- \(0 \leq A_i \leq M\)
- \(1 \leq B_i \leq N\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(X_1\) \(Y_1\)
\(\vdots\)
\(X_N\) \(Y_N\)
\(M\)
\(\mathrm{op}_1\)
\(\vdots\)
\(\mathrm{op}_M\)
\(Q\)
\(A_1\) \(B_1\)
\(\vdots\)
\(A_Q\) \(B_Q\)
#+end_example

*** Output

Print the response to each query in its own line: the \(x\)- and \(y\)-coordinates, in this order, with space in between.

--------------

*** Sample Input 1

#+begin_example
1
1 2
4
1
3 3
2
4 2
5
0 1
1 1
2 1
3 1
4 1
#+end_example

*** Sample Output 1

#+begin_example
1 2
2 -1
4 -1
1 4
1 0
#+end_example

Initially, the only piece - Piece \(1\) - is at \((1, 2)\). Each operation moves the piece as follows: \((1,2)\to(2,-1)\to(4,-1)\to(1,4)\to(1,0)\).

--------------

*** Sample Input 2

#+begin_example
2
1000000000 0
0 1000000000
4
3 -1000000000
4 -1000000000
3 1000000000
4 1000000000
2
4 1
4 2
#+end_example

*** Sample Output 2

#+begin_example
5000000000 4000000000
4000000000 5000000000
#+end_example


** [[https://atcoder.jp/contests/abc187/tasks/abc187_e][E - Through Path]]

Score : \(500\) points

*** Problem Statement

We have a tree with \(N\) vertices and \(N-1\) edges, where the vertices are numbered \(1, 2, \dots, N\) and the edges are numbered \(1, 2, \dots, N-1\). Edge \(i\) connects Vertices \(a_i\) and \(b_i\).\\
Each vertex in the tree has an integer written on it. Let \(c_i\) be the integer written on Vertex \(i\). Initially, \(c_i = 0\).

You will be given \(Q\) queries. The \(i\)-th query, consisting of integers \(t_i\), \(e_i\), and \(x_i\), is as follows:

- If \(t_i = 1\): for each Vertex \(v\) reachable from Vertex \(a_{e_i}\) without visiting Vertex \(b_{e_i}\) by traversing edges, replace \(c_v\) with \(c_v + x_i\).
- If \(t_i = 2\): for each Vertex \(v\) reachable from Vertex \(b_{e_i}\) without visiting Vertex \(a_{e_i}\) by traversing edges, replace \(c_v\) with \(c_v + x_i\).

After processing all queries, print the integer written on each vertex.

*** Constraints

- All values in input are integers.
- \(2 \le N \le 2 \times 10^5\)
- \(1 \le a_i, b_i \le N\)
- The given graph is a tree.
- \(1 \le Q \le 2 \times 10^5\)
- \(t_i \in \{1, 2\}\)
- \(1 \le e_i \le N-1\)
- \(1 \le x_i \le 10^9\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(a_1\) \(b_1\)
\(\vdots\)
\(a_{N-1}\) \(b_{N-1}\)
\(Q\)
\(t_1\) \(e_1\) \(x_1\)
\(\vdots\)
\(t_Q\) \(e_Q\) \(x_Q\)
#+end_example

*** Output

Print the values \(c_1, c_2, \dots, c_N\) after processing all queries, each in its own line.

--------------

*** Sample Input 1

#+begin_example
5
1 2
2 3
2 4
4 5
4
1 1 1
1 4 10
2 1 100
2 2 1000
#+end_example

*** Sample Output 1

#+begin_example
11
110
1110
110
100
#+end_example

In the first query, we add \(1\) to each vertex reachable from Vertex \(1\) without visiting Vertex \(2\), that is, Vertex \(1\).\\
In the second query, we add \(10\) to each vertex reachable from Vertex \(4\) without visiting Vertex \(5\), that is, Vertex \(1, 2, 3, 4\).\\
In the third query, we add \(100\) to each vertex reachable from Vertex \(2\) without visiting Vertex \(1\), that is, Vertex \(2, 3, 4, 5\).\\
In the fourth query, we add \(1000\) to each vertex reachable from Vertex \(3\) without visiting Vertex \(2\), that is, Vertex \(3\).

--------------

*** Sample Input 2

#+begin_example
7
2 1
2 3
4 2
4 5
6 1
3 7
7
2 2 1
1 3 2
2 2 4
1 6 8
1 3 16
2 4 32
2 1 64
#+end_example

*** Sample Output 2

#+begin_example
72
8
13
26
58
72
5
#+end_example

--------------

*** Sample Input 3

#+begin_example
11
2 1
1 3
3 4
5 2
1 6
1 7
5 8
3 9
3 10
11 4
10
2 6 688
1 10 856
1 8 680
1 8 182
2 2 452
2 4 183
2 6 518
1 3 612
2 6 339
2 3 206
#+end_example

*** Sample Output 3

#+begin_example
1657
1657
2109
1703
1474
1657
3202
1474
1247
2109
2559
#+end_example


** [[https://atcoder.jp/contests/abc186/tasks/abc186_e][E - Throne]]

Score : \(500\) points

*** Problem Statement

We have \(N\) chairs arranged in a circle, one of which is a throne.

Takahashi is initially sitting on the chair that is \(S\) chairs away from the throne in the clockwise direction. Now, he will repeat the move below.

Move: Go to the chair that is \(K\) chairs away from the chair he is currently sitting on in the clockwise direction.

After how many moves will he be sitting on the throne for the first time? If he is never going to sit on it, report =-1= instead.

You are asked to solve \(T\) test cases.

*** Constraints

- \(1\leq T \leq 100\)
- \(2\leq N \leq 10^9\)
- \(1\leq S < N\)
- \(1\leq K \leq 10^9\)

--------------

*** Input

Input is given from Standard Input in the following format. The first line is in the format below:

#+begin_example
\(T\)
#+end_example

Then, the following \(T\) lines represent \(T\) test cases. Each of these lines is in the format below:

#+begin_example
\(N\) \(S\) \(K\)
#+end_example

*** Output

For each test case, print the answer in its own line.

--------------

*** Sample Input 1

#+begin_example
4
10 4 3
1000 11 2
998244353 897581057 595591169
10000 6 14
#+end_example

*** Sample Output 1

#+begin_example
2
-1
249561088
3571
#+end_example

In the first test case, we have \(10\) chairs, and Takahashi is initially sitting on the chair that is \(4\) chairs away from the throne in the clockwise direction. He will be sitting on the throne after \(2\) moves of moving \(3\) chairs in the clockwise direction.

In the second test case, he will never sit on the throne, so we should print =-1=.


** [[https://atcoder.jp/contests/abc185/tasks/abc185_e][E - Sequence Matching]]

Score : \(500\) points

*** Problem Statement

We have an integer sequence \(A\) of length \(N\) and an integer sequence \(B\) of length \(M\).\\
Takahashi will make a new sequence \(A'\) by removing some elements (possibly zero or all) from \(A\) and concatenating the remaining elements.\\
Similarly, he will make another new sequence \(B'\) by removing some elements (possibly zero or all) from \(B\) and concatenating the remaining elements.\\
Here, he will remove elements so that \(|A'| = |B'|\). (\(|s|\) denotes the length of \(s\) for a sequence \(s\).)\\
Let \(x\) be the total number of elements removed from \(A\) and \(B\), and \(y\) be the number of integers \(i\) such that \(1 \le i \le |A'|\) and \({A'}_i \neq {B'}_i\). Print the minimium possible value of \(x + y\).

*** Constraints

- \(1 \le N, M \le 1000\)
- \(1 \le A_i, B_i \le 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1 \hspace{7pt} A_2 \hspace{7pt} A_3 \hspace{5pt} \dots \hspace{5pt} A_N\)
\(B_1 \hspace{7pt} B_2 \hspace{7pt} B_3 \hspace{5pt} \dots \hspace{5pt} B_M\)
#+end_example

*** Output

Print the minimum possible value of \(x + y\).

--------------

*** Sample Input 1

#+begin_example
4 3
1 2 1 3
1 3 1
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

If we make \(A'\) by removing \(A_4\) from \(A\), and \(B'\) by removing nothing from \(B\), \(x\) will be \(1\).\\
Here, there is just one integer \(i\) such that \(1 \le i \le |A'|\) and \({A'}_i \neq {B'}_i\): \(i = 2\), so \(y\) will be \(1\), and \(x + y\) will be \(2\), which is the minimum possible value.

--------------

*** Sample Input 2

#+begin_example
4 6
1 3 2 4
1 5 2 6 4 3
#+end_example

*** Sample Output 2

#+begin_example
3
#+end_example

If we remove nothing from \(A\) and remove \(B_4, B_6\) from \(B\), we have \(x = 2, y = 1\), and \(x + y = 3\), which is the minimum possible value.

--------------

*** Sample Input 3

#+begin_example
5 5
1 1 1 1 1
2 2 2 2 2
#+end_example

*** Sample Output 3

#+begin_example
5
#+end_example

It is allowed to remove nothing from both \(A\) and \(B\).


** [[https://atcoder.jp/contests/abc184/tasks/abc184_d][D - increment of coins]]

Score : \(400\) points

*** Problem Statement

We have a bag containing \(A\) gold coins, \(B\) silver coins, and \(C\) bronze coins.

Until the bag contains \(100\) coins of the same color, we will repeat the following operation:

Operation: Randomly take out one coin from the bag. (Every coin has an equal probability of being chosen.) Then, put back into the bag two coins of the same kind as the removed coin.

Find the expected value of the number of times the operation is done.

*** Constraints

- \(0 \leq A,B,C \leq 99\)
- \(A+B+C \geq 1\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(A\) \(B\) \(C\)
#+end_example

*** Output

Print the expected value of the number of times the operation is done. Your output will be accepted if its absolute or relative error from the correct value is at most \(10^{-6}\).

--------------

*** Sample Input 1

#+begin_example
99 99 99
#+end_example

*** Sample Output 1

#+begin_example
1.000000000
#+end_example

No matter what coin we take out in the first operation, the bag will contain \(100\) coins of that kind.

--------------

*** Sample Input 2

#+begin_example
98 99 99
#+end_example

*** Sample Output 2

#+begin_example
1.331081081
#+end_example

We will do the second operation only if we take out a gold coin in the first operation. Thus, the expected number of operations is \(2\times \frac{98}{98+99+99}+1\times \frac{99}{98+99+99}+1\times \frac{99}{98+99+99}=1.331081081\ldots\)

--------------

*** Sample Input 3

#+begin_example
0 0 1
#+end_example

*** Sample Output 3

#+begin_example
99.000000000
#+end_example

Each operation adds a bronze coin.

--------------

*** Sample Input 4

#+begin_example
31 41 59
#+end_example

*** Sample Output 4

#+begin_example
91.835008202
#+end_example


** [[https://atcoder.jp/contests/abc184/tasks/abc184_e][E - Third Avenue]]

Score : \(500\) points

*** Problem Statement

There is a town represented as a two-dimensional grid with \(H\) horizontal rows and \(W\) vertical columns.\\
A character \(a_{i,j}\) describes the square at the \(i\)-th row from the top and \(j\)-th column from the left. Here, \(a_{i,j}\) is one of the following: =S= , =G= , =.= , =#= , =a=, ..., and =z=.\\
=#= represents a square that cannot be entered, and =a=, ..., =z= represent squares with teleporters.

Takahashi is initially at the square represented as =S=. In each second, he will make one of the following moves:

- Go to a non-=#= square that is horizontally or vertically adjacent to his current position.
- Choose a square with the same character as that of his current position, and teleport to that square. He can only use this move when he is at a square represented as =a=, ..., or =z=.

Find the shortest time Takahashi needs to reach the square represented as =G= from the one represented as =S=.\\
If the destination is unreachable, report =-1= instead.

*** Constraints

- \(1 \le H, W \le 2000\)
- \(a_{i,j}\) is =S=, =G=, =.=, =#=, or a lowercase English letter.
- There is exactly one square represented as =S= and one square represented as =G=.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\)
\(a_{1,1}\dots a_{1,W}\)
\(\vdots\)
\(a_{H,1}\dots a_{H,W}\)
#+end_example

*** Output

Print the shortest time Takahashi needs to reach the square represented as =G= from the one represented as =S=.\\
If the destination is unreachable from the initial position, print =-1= instead.

--------------

*** Sample Input 1

#+begin_example
2 5
S.b.b
a.a.G
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

Let \((i, j)\) denote the square at the \(i\)-th row from the top and \(j\)-th column from the left.\\
Initially, Takahashi is at \((1, 1)\). One way to reach \((2, 5)\) in four seconds is:

- go from \((1, 1)\) to \((2, 1)\);
- teleport from \((2, 1)\) to \((2, 3)\), which is also an =a= square;
- go from \((2, 3)\) to \((2, 4)\);
- go from \((2, 4)\) to \((2, 5)\).

--------------

*** Sample Input 2

#+begin_example
11 11
S##...#c...
...#d.#.#..
..........#
.#....#...#
#.....bc...
#.##......#
.......c..#
..#........
a..........
d..#...a...
.#........G
#+end_example

*** Sample Output 2

#+begin_example
14
#+end_example

--------------

*** Sample Input 3

#+begin_example
11 11
.#.#.e#a...
.b..##..#..
#....#.#..#
.#dd..#..#.
....#...#e.
c#.#a....#.
.....#..#.e
.#....#b.#.
.#...#..#..
......#c#G.
#..S...#...
#+end_example

*** Sample Output 3

#+begin_example
-1
#+end_example


** [[https://atcoder.jp/contests/abc184/tasks/abc184_f][F - Programming Contest]]

Score : \(600\) points

*** Problem Statement

Takahashi will participate in a programming contest, which lasts for \(T\) minutes and presents \(N\) problems.\\
With his extrasensory perception, he already knows that it will take \(A_i\) minutes to solve the \(i\)-th problem.\\
He will choose zero or more problems to solve from the \(N\) problems so that it takes him no longer than \(T\) minutes in total to solve them.\\
Find the longest possible time it takes him to solve his choice of problems.

*** Constraints

- All values in input are integers.
- \(1 \le N \le 40\)
- \(1 \le T \le 10^9\)
- \(1 \le A_i \le 10^9\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(T\)
\(A_1\) \(\dots\) \(A_N\)
#+end_example

*** Output

Print the answer as an integer.

--------------

*** Sample Input 1

#+begin_example
5 17
2 3 5 7 11
#+end_example

*** Sample Output 1

#+begin_example
17
#+end_example

If he chooses the \(1\)-st, \(2\)-nd, \(3\)-rd, and \(4\)-th problems, it takes him \(2+3+5+7=17\) minutes in total to solve them, which is the longest possible time not exceeding \(T=17\) minutes.

--------------

*** Sample Input 2

#+begin_example
6 100
1 2 7 5 8 10
#+end_example

*** Sample Output 2

#+begin_example
33
#+end_example

It is optimal to solve all the problems.

--------------

*** Sample Input 3

#+begin_example
6 100
101 102 103 104 105 106
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

He cannot solve any of the problems.

--------------

*** Sample Input 4

#+begin_example
7 273599681
6706927 91566569 89131517 71069699 75200339 98298649 92857057
#+end_example

*** Sample Output 4

#+begin_example
273555143
#+end_example

If he chooses the \(2\)-nd, \(3\)-rd, and \(7\)-th problems, it takes him \(273555143\) minutes in total to solve them.


** [[https://atcoder.jp/contests/abc183/tasks/abc183_e][E - Queen on Grid]]

Score : \(500\) points

*** Problem Statement

We have a grid with \(H\) horizontal rows and \(W\) vertical columns of squares. Square \((i,j)\), which is at the \(i\)-th row from the top and \(j\)-th column from the left, is /wall/ if \(S_{ij}\) is =#= and /road/ if \(S_{ij}\) is =.=.

There is a queen, the chess piece, at Square \((1, 1)\). In one move, it can move any number of squares to the right, downwards, or diagonally to the lower right to a road square without jumping over wall squares.

In how many ways can the queen travel from Square \((1, 1)\) to Square \((H, W)\)? Find the count modulo \((10^9+7)\).

Here, two ways to travel are considered different if and only if there exists \(i\) such that the position of the queen after the \(i\)-th move is different in those two ways.

*** Constraints

- \(2 \leq H,W \leq 2000\)
- \(S_{ij}\) is =#= or =.=.
- \(S_{11}\) and \(S_{HW}\) are =.=.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\)
\(S_{11}\ldots S_{1W}\)
\(\vdots\)
\(S_{H1}\ldots S_{HW}\)
#+end_example

*** Output

Print the number of ways, modulo \((10^9+7)\), in which the queen can travel from Square \((1, 1)\) to Square \((H, W)\).

--------------

*** Sample Input 1

#+begin_example
3 3
...
.#.
...
#+end_example

*** Sample Output 1

#+begin_example
10
#+end_example

There are \(10\) ways to travel, as follows:

- \((1,1)\to (1,2)\to (1,3)\to (2,3)\to (3,3)\)
- \((1,1)\to (1,2)\to (1,3)\to (3,3)\)
- \((1,1)\to (1,2)\to (2,3)\to (3,3)\)
- \((1,1)\to (1,3)\to (2,3)\to (3,3)\)
- \((1,1)\to (1,3)\to (3,3)\)
- \((1,1)\to (2,1)\to (3,1)\to (3,2)\to (3,3)\)
- \((1,1)\to (2,1)\to (3,1)\to (3,3)\)
- \((1,1)\to (2,1)\to (3,2)\to (3,3)\)
- \((1,1)\to (3,1)\to (3,2)\to (3,3)\)
- \((1,1)\to (3,1)\to (3,3)\)

--------------

*** Sample Input 2

#+begin_example
4 4
...#
....
..#.
....
#+end_example

*** Sample Output 2

#+begin_example
84
#+end_example

From \((1,1)\), the queen can move to \((1,2)\), \((1,3)\), \((2,1)\), \((2,2)\), \((3,1)\), or \((4,1)\).

One possible path to \((4,4)\) is \((1,1)\to (3,1)\to (3,2)\to (4,3)\to (4,4)\).

--------------

*** Sample Input 3

#+begin_example
8 10
..........
..........
..........
..........
..........
..........
..........
..........
#+end_example

*** Sample Output 3

#+begin_example
13701937
#+end_example

Find the count modulo \((10^9+7)\).


** [[https://atcoder.jp/contests/abc183/tasks/abc183_f][F - Confluence]]

Score : \(600\) points

*** Problem Statement

\(N\) students are about to go to school. Student \(i\) belongs to Class \(C_i\).

After leaving home, each student will head to school while repeatedly joining up with a group of other students. Once students join up with each other, they will not separate.

You will be given \(Q\) queries that should be processed in order. There are two kinds of queries, in the following formats, that mean the following:

- =1 a b=: The group containing Student \(a\) and the group containing Student \(b\) merges. (If they are already in the same group, nothing happens.)
- =2 x y=: You are asked to find the number of students belonging to Class \(y\) who are already in the same group as Student \(x\) (including Student \(x\)) at the time of this query.

*** Constraints

- \(1 \leq N \leq 2 \times 10^5\)
- \(1 \leq Q \leq 2 \times 10^5\)
- \(1 \leq C_i,a,b,x,y \leq N\)
- In a query in the format =1 a b=, \(a \neq b\).
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(Q\)
\(C_1\) \(\ldots\) \(C_N\)
\(Query_1\)
\(\vdots\)
\(Query_Q\)
#+end_example

*** Output

Print the answers to the queries in the format =2 x y=, each in its own line, in order.

--------------

*** Sample Input 1

#+begin_example
5 5
1 2 3 2 1
1 1 2
1 2 5
2 1 1
1 3 4
2 3 4
#+end_example

*** Sample Output 1

#+begin_example
2
0
#+end_example

At the time of the \(3\)-rd query, Student \(1\) has joined up with Student \(2\) and \(5\). Among these three students, two belong to Class \(1\).

At the time of the \(5\)-th query, Student \(3\) has joined up with Student \(4\). Among these two students, none belongs to Class \(4\).

--------------

*** Sample Input 2

#+begin_example
5 4
2 2 2 2 2
1 1 2
1 1 3
1 2 3
2 2 2
#+end_example

*** Sample Output 2

#+begin_example
3
#+end_example

There may be queries in the format =1 a b= for students who already belong to the same group.

--------------

*** Sample Input 3

#+begin_example
12 9
1 2 3 1 2 3 1 2 3 1 2 3
1 1 2
1 3 4
1 5 6
1 7 8
2 2 1
1 9 10
2 5 6
1 4 8
2 6 1
#+end_example

*** Sample Output 3

#+begin_example
1
0
0
#+end_example


** [[https://atcoder.jp/contests/abc180/tasks/abc180_e][E - Traveling Salesman among Aerial Cities]]

Score : \(500\) points

*** Problem Statement

In a three-dimensional space, there are \(N\) cities: City \(1\) through City \(N\). City \(i\) is at point \((X_i,Y_i,Z_i)\).

The cost it takes to travel from a city at point \((a,b,c)\) to a city at point \((p,q,r)\) is \(|p-a|+|q-b|+\max(0,r-c)\).

Find the minimum total cost it takes to start at City \(1\), visit all other cities at least once, and return to City \(1\).

*** Constraints

- \(2 \leq N \leq 17\)
- \(-10^6 \leq X_i,Y_i,Z_i \leq 10^6\)
- No two cities are at the same point.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(X_1\) \(Y_1\) \(Z_1\)
\(\vdots\)
\(X_N\) \(Y_N\) \(Z_N\)
#+end_example

*** Output

Print the minimum total cost it takes to start at City \(1\), visit all other cities at least once, and return to City \(1\).

--------------

*** Sample Input 1

#+begin_example
2
0 0 0
1 2 3
#+end_example

*** Sample Output 1

#+begin_example
9
#+end_example

The cost it takes to travel from City \(1\) to City \(2\) is \(|1-0|+|2-0|+\max(0,3-0)=6\).

The cost it takes to travel from City \(2\) to City \(1\) is \(|0-1|+|0-2|+\max(0,0-3)=3\).

Thus, the total cost will be \(9\).

--------------

*** Sample Input 2

#+begin_example
3
0 0 0
1 1 1
-1 -1 -1
#+end_example

*** Sample Output 2

#+begin_example
10
#+end_example

For example, we can visit the cities in the order \(1\), \(2\), \(1\), \(3\), \(1\) to make the total cost \(10\). Note that we can come back to City \(1\) on the way.

--------------

*** Sample Input 3

#+begin_example
17
14142 13562 373095
-17320 508075 68877
223606 -79774 9979
-24494 -89742 783178
26457 513110 -64591
-282842 7124 -74619
31622 -77660 -168379
-33166 -24790 -3554
346410 16151 37755
-36055 51275 463989
37416 -573867 73941
-3872 -983346 207417
412310 56256 -17661
-42426 40687 -119285
43588 -989435 -40674
-447213 -59549 -99579
45825 7569 45584
#+end_example

*** Sample Output 3

#+begin_example
6519344
#+end_example


** [[https://atcoder.jp/contests/abc179/tasks/abc179_d][D - Leaping Tak]]

Score : \(400\) points

*** Problem Statement

There are \(N\) cells arranged in a row, numbered \(1, 2, \ldots, N\) from left to right.

Tak lives in these cells and is currently on Cell \(1\). He is trying to reach Cell \(N\) by using the procedure described below.

You are given an integer \(K\) that is less than or equal to \(10\), and \(K\) non-intersecting segments \([L_1, R_1], [L_2, R_2], \ldots, [L_K, R_K]\). Let \(S\) be the union of these \(K\) segments. Here, the segment \([l, r]\) denotes the set consisting of all integers \(i\) that satisfy \(l \leq i \leq r\).

- When you are on Cell \(i\), pick an integer \(d\) from \(S\) and move to Cell \(i + d\). You cannot move out of the cells.

To help Tak, find the number of ways to go to Cell \(N\), modulo \(998244353\).

*** Constraints

- \(2 \leq N \leq 2 \times 10^5\)
- \(1 \leq K \leq \min(N, 10)\)
- \(1 \leq L_i \leq R_i \leq N\)
- \([L_i, R_i]\) and \([L_j, R_j]\) do not intersect (\(i \neq j\))
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(L_1\) \(R_1\)
\(L_2\) \(R_2\)
\(:\)
\(L_K\) \(R_K\)
#+end_example

*** Output

Print the number of ways for Tak to go from Cell \(1\) to Cell \(N\), modulo \(998244353\).

--------------

*** Sample Input 1

#+begin_example
5 2
1 1
3 4
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

The set \(S\) is the union of the segment \([1, 1]\) and the segment \([3, 4]\), therefore \(S = \{ 1, 3, 4 \}\) holds.

There are \(4\) possible ways to get to Cell \(5\):

- \(1 \to 2 \to 3 \to 4 \to 5\),
- \(1 \to 2 \to 5\),
- \(1 \to 4 \to 5\) and
- \(1 \to 5\).

--------------

*** Sample Input 2

#+begin_example
5 2
3 3
5 5
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

Because \(S = \{ 3, 5 \}\) holds, you cannot reach to Cell \(5\). Print \(0\).

--------------

*** Sample Input 3

#+begin_example
5 1
1 2
#+end_example

*** Sample Output 3

#+begin_example
5
#+end_example

--------------

*** Sample Input 4

#+begin_example
60 3
5 8
1 3
10 15
#+end_example

*** Sample Output 4

#+begin_example
221823067
#+end_example

Note that you have to print the answer modulo \(998244353\).


** [[https://atcoder.jp/contests/abc176/tasks/abc176_d][D - Wizard in Maze]]

Score : \(400\) points

*** Problem Statement

A maze is composed of a grid of \(H \times W\) squares - \(H\) vertical, \(W\) horizontal.

The square at the \(i\)-th row from the top and the \(j\)-th column from the left - \((i,j)\) - is a wall if \(S_{ij}\) is =#= and a road if \(S_{ij}\) is =.=.

There is a magician in \((C_h,C_w)\). He can do the following two kinds of moves:

- Move A: Walk to a road square that is vertically or horizontally adjacent to the square he is currently in.
- Move B: Use magic to warp himself to a road square in the \(5\times 5\) area centered at the square he is currently in.

In either case, he cannot go out of the maze.

At least how many times does he need to use the magic to reach \((D_h, D_w)\)?

*** Constraints

- \(1 \leq H,W \leq 10^3\)
- \(1 \leq C_h,D_h \leq H\)
- \(1 \leq C_w,D_w \leq W\)
- \(S_{ij}\) is =#= or =.=.
- \(S_{C_h C_w}\) and \(S_{D_h D_w}\) are =.=.
- \((C_h,C_w) \neq (D_h,D_w)\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\)
\(C_h\) \(C_w\)
\(D_h\) \(D_w\)
\(S_{11}\ldots S_{1W}\)
\(\vdots\)
\(S_{H1}\ldots S_{HW}\)
#+end_example

*** Output

Print the minimum number of times the magician needs to use the magic. If he cannot reach \((D_h,D_w)\), print =-1= instead.

--------------

*** Sample Input 1

#+begin_example
4 4
1 1
4 4
..#.
..#.
.#..
.#..
#+end_example

*** Sample Output 1

#+begin_example
1
#+end_example

For example, by walking to \((2,2)\) and then using the magic to travel to \((4,4)\), just one use of magic is enough.

Note that he cannot walk diagonally.

--------------

*** Sample Input 2

#+begin_example
4 4
1 4
4 1
.##.
####
####
.##.
#+end_example

*** Sample Output 2

#+begin_example
-1
#+end_example

He cannot move from there.

--------------

*** Sample Input 3

#+begin_example
4 4
2 2
3 3
....
....
....
....
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

No use of magic is needed.

--------------

*** Sample Input 4

#+begin_example
4 5
1 2
2 5
#.###
####.
#..##
#..##
#+end_example

*** Sample Output 4

#+begin_example
2
#+end_example


** [[https://atcoder.jp/contests/abc176/tasks/abc176_e][E - Bomber]]

Score : \(500\) points

*** Problem Statement

We have a two-dimensional grid with \(H \times W\) squares. There are \(M\) targets to destroy in this grid - the position of the \(i\)-th target is \(\left(h_i, w_i \right)\).

Takahashi will choose one square in this grid, place a bomb there, and ignite it. The bomb will destroy all targets that are in the row or the column where the bomb is placed. It is possible to place the bomb at a square with a target.

Takahashi is trying to maximize the number of targets to destroy. Find the maximum number of targets that can be destroyed.

*** Constraints

- All values in input are integers.
- \(1 \leq H, W \leq 3 \times 10^5\)
- \(1 \leq M \leq \min\left(H\times W, 3 \times 10^5\right)\)
- \(1 \leq h_i \leq H\)
- \(1 \leq w_i \leq W\)
- \(\left(h_i, w_i\right) \neq \left(h_j, w_j\right) \left(i \neq j\right)\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\) \(M\)
\(h_1\) \(w_1\)
\(\vdots\)
\(h_M\) \(w_M\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
2 3 3
2 2
1 1
1 3
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

We can destroy all the targets by placing the bomb at \(\left(1, 2\right)\).

--------------

*** Sample Input 2

#+begin_example
3 3 4
3 3
3 1
1 1
1 2
#+end_example

*** Sample Output 2

#+begin_example
3
#+end_example

--------------

*** Sample Input 3

#+begin_example
5 5 10
2 5
4 3
2 3
5 5
2 2
5 4
5 3
5 1
3 5
1 4
#+end_example

*** Sample Output 3

#+begin_example
6
#+end_example


** [[https://atcoder.jp/contests/abc175/tasks/abc175_d][D - Moving Piece]]

Score : \(400\) points

*** Problem Statement

Takahashi will play a game using a piece on an array of squares numbered \(1, 2, \cdots, N\). Square \(i\) has an integer \(C_i\) written on it. Also, he is given a permutation of \(1, 2, \cdots, N\): \(P_1, P_2, \cdots, P_N\).

Now, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between \(1\) and \(K\) (inclusive):

- In one move, if the piece is now on Square \(i\) \((1 \leq i \leq N)\), move it to Square \(P_i\). Here, his score increases by \(C_{P_i}\).

Help him by finding the maximum possible score at the end of the game. (The score is \(0\) at the beginning of the game.)

*** Constraints

- \(2 \leq N \leq 5000\)
- \(1 \leq K \leq 10^9\)
- \(1 \leq P_i \leq N\)
- \(P_i \neq i\)
- \(P_1, P_2, \cdots, P_N\) are all different.
- \(-10^9 \leq C_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(P_1\) \(P_2\) \(\cdots\) \(P_N\)
\(C_1\) \(C_2\) \(\cdots\) \(C_N\)
#+end_example

*** Output

Print the maximum possible score at the end of the game.

--------------

*** Sample Input 1

#+begin_example
5 2
2 4 5 1 3
3 4 -10 -8 8
#+end_example

*** Sample Output 1

#+begin_example
8
#+end_example

When we start at some square of our choice and make at most two moves, we have the following options:

- If we start at Square \(1\), making one move sends the piece to Square \(2\), after which the score is \(4\). Making another move sends the piece to Square \(4\), after which the score is \(4 + (-8) = -4\).
- If we start at Square \(2\), making one move sends the piece to Square \(4\), after which the score is \(-8\). Making another move sends the piece to Square \(1\), after which the score is \(-8 + 3 = -5\).
- If we start at Square \(3\), making one move sends the piece to Square \(5\), after which the score is \(8\). Making another move sends the piece to Square \(3\), after which the score is \(8 + (-10) = -2\).
- If we start at Square \(4\), making one move sends the piece to Square \(1\), after which the score is \(3\). Making another move sends the piece to Square \(2\), after which the score is \(3 + 4 = 7\).
- If we start at Square \(5\), making one move sends the piece to Square \(3\), after which the score is \(-10\). Making another move sends the piece to Square \(5\), after which the score is \(-10 + 8 = -2\).

The maximum score achieved is \(8\).

--------------

*** Sample Input 2

#+begin_example
2 3
2 1
10 -7
#+end_example

*** Sample Output 2

#+begin_example
13
#+end_example

--------------

*** Sample Input 3

#+begin_example
3 3
3 1 2
-1000 -2000 -3000
#+end_example

*** Sample Output 3

#+begin_example
-1000
#+end_example

We have to make at least one move.

--------------

*** Sample Input 4

#+begin_example
10 58
9 1 6 7 8 4 3 2 10 5
695279662 988782657 -119067776 382975538 -151885171 -177220596 -169777795 37619092 389386780 980092719
#+end_example

*** Sample Output 4

#+begin_example
29507023469
#+end_example

The absolute value of the answer may be enormous.


** [[https://atcoder.jp/contests/abc175/tasks/abc175_e][E - Picking Goods]]

Score : \(500\) points

*** Problem Statement

There are \(K\) items placed on a grid of squares with \(R\) rows and \(C\) columns. Let \((i, j)\) denote the square at the \(i\)-th row (\(1 \leq i \leq R\)) and the \(j\)-th column (\(1 \leq j \leq C\)). The \(i\)-th item is at \((r_i, c_i)\) and has the value \(v_i\).

Takahashi will begin at \((1, 1)\), the start, and get to \((R, C)\), the goal. When he is at \((i, j)\), he can move to \((i + 1, j)\) or \((i, j + 1)\) (but cannot move to a non-existent square).

He can pick up items on the squares he visits, including the start and the goal, but at most three for each row. It is allowed to ignore the item on a square he visits.

Find the maximum possible sum of the values of items he picks up.

*** Constraints

- \(1 \leq R, C \leq 3000\)
- \(1 \leq K \leq \min(2 \times 10^5, R \times C)\)
- \(1 \leq r_i \leq R\)
- \(1 \leq c_i \leq C\)
- \((r_i, c_i) \neq (r_j, c_j) (i \neq j)\)
- \(1 \leq v_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(R\) \(C\) \(K\)
\(r_1\) \(c_1\) \(v_1\)
\(r_2\) \(c_2\) \(v_2\)
\(:\)
\(r_K\) \(c_K\) \(v_K\)
#+end_example

*** Output

Print the maximum possible sum of the values of items Takahashi picks up.

--------------

*** Sample Input 1

#+begin_example
2 2 3
1 1 3
2 1 4
1 2 5
#+end_example

*** Sample Output 1

#+begin_example
8
#+end_example

He has two ways to get to the goal:

- Visit \((1, 1)\), \((1, 2)\), and \((2, 2)\), in this order. In this case, the total value of the items he can pick up is \(3 + 5 = 8\).
- Visit \((1, 1)\), \((2, 1)\), and \((2, 2)\), in this order. In this case, the total value of the items he can pick up is \(3 + 4 = 7\).

Thus, the maximum possible sum of the values of items he picks up is \(8\).

--------------

*** Sample Input 2

#+begin_example
2 5 5
1 1 3
2 4 20
1 2 1
1 3 4
1 4 2
#+end_example

*** Sample Output 2

#+begin_example
29
#+end_example

We have four items in the \(1\)-st row. The optimal choices are as follows:

- Visit \((1, 1)\) \((1, 2)\), \((1, 3)\), \((1, 4)\), \((2, 4)\), and \((2, 5)\), in this order, and pick up all items except the one on \((1, 2)\). Then, the total value of the items he picks up will be \(3 + 4 + 2 + 20 = 29\).

--------------

*** Sample Input 3

#+begin_example
4 5 10
2 5 12
1 5 12
2 3 15
1 2 20
1 1 28
2 4 26
3 2 27
4 5 21
3 5 10
1 3 10
#+end_example

*** Sample Output 3

#+begin_example
142
#+end_example


** [[https://atcoder.jp/contests/abc174/tasks/abc174_e][E - Logs]]

Score : \(500\) points

*** Problem Statement

We have \(N\) logs of lengths \(A_1,A_2,\cdots A_N\).

We can cut these logs at most \(K\) times in total. When a log of length \(L\) is cut at a point whose distance from an end of the log is \(t\) \((0<t<L)\), it becomes two logs of lengths \(t\) and \(L-t\).

Find the shortest possible length of the longest log after at most \(K\) cuts, and print it after rounding up to an integer.

*** Constraints

- \(1 \leq N \leq 2 \times 10^5\)
- \(0 \leq K \leq 10^9\)
- \(1 \leq A_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(A_1\) \(A_2\) \(\cdots\) \(A_N\)
#+end_example

*** Output

Print an integer representing the answer.

--------------

*** Sample Input 1

#+begin_example
2 3
7 9
#+end_example

*** Sample Output 1

#+begin_example
4
#+end_example

- First, we will cut the log of length \(7\) at a point whose distance from an end of the log is \(3.5\), resulting in two logs of length \(3.5\) each.
- Next, we will cut the log of length \(9\) at a point whose distance from an end of the log is \(3\), resulting in two logs of length \(3\) and \(6\).
- Lastly, we will cut the log of length \(6\) at a point whose distance from an end of the log is \(3.3\), resulting in two logs of length \(3.3\) and \(2.7\).

In this case, the longest length of a log will be \(3.5\), which is the shortest possible result. After rounding up to an integer, the output should be \(4\).

--------------

*** Sample Input 2

#+begin_example
3 0
3 4 5
#+end_example

*** Sample Output 2

#+begin_example
5
#+end_example

--------------

*** Sample Input 3

#+begin_example
10 10
158260522 877914575 602436426 24979445 861648772 623690081 433933447 476190629 262703497 211047202
#+end_example

*** Sample Output 3

#+begin_example
292638192
#+end_example


** [[https://atcoder.jp/contests/abc174/tasks/abc174_f][F - Range Set Query]]

Score : \(600\) points

*** Problem Statement

We have \(N\) colored balls arranged in a row from left to right; the color of the \(i\)-th ball from the left is \(c_i\).

You are given \(Q\) queries. The \(i\)-th query is as follows: how many different colors do the \(l_i\)-th through \(r_i\)-th balls from the left have?

*** Constraints

- \(1\leq N,Q \leq 5 \times 10^5\)
- \(1\leq c_i \leq N\)
- \(1\leq l_i \leq r_i \leq N\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(Q\)
\(c_1\) \(c_2\) \(\cdots\) \(c_N\)
\(l_1\) \(r_1\)
\(l_2\) \(r_2\)
\(:\)
\(l_Q\) \(r_Q\)
#+end_example

*** Output

Print \(Q\) lines. The \(i\)-th line should contain the response to the \(i\)-th query.

--------------

*** Sample Input 1

#+begin_example
4 3
1 2 1 3
1 3
2 4
3 3
#+end_example

*** Sample Output 1

#+begin_example
2
3
1
#+end_example

- The \(1\)-st, \(2\)-nd, and \(3\)-rd balls from the left have the colors \(1\), \(2\), and \(1\) - two different colors.
- The \(2\)-st, \(3\)-rd, and \(4\)-th balls from the left have the colors \(2\), \(1\), and \(3\) - three different colors.
- The \(3\)-rd ball from the left has the color \(1\) - just one color.

--------------

*** Sample Input 2

#+begin_example
10 10
2 5 6 5 2 1 7 9 7 2
5 5
2 4
6 7
2 2
7 8
7 9
1 8
6 9
8 10
6 8
#+end_example

*** Sample Output 2

#+begin_example
1
2
2
1
2
2
6
3
3
3
#+end_example


** [[https://atcoder.jp/contests/abc170/tasks/abc170_e][E - Smart Infants]]

Score : \(500\) points

*** Problem Statement

There are \(N\) infants registered in AtCoder, numbered \(1\) to \(N\), and \(2\times 10^5\) kindergartens, numbered \(1\) to \(2\times 10^5\). Infant \(i\) has a rating of \(A_i\) and initially belongs to Kindergarten \(B_i\).

From now on, \(Q\) transfers will happen. After the \(j\)-th transfer, Infant \(C_j\) will belong to Kindergarten \(D_j\).

Here, we define the /evenness/ as follows. For each kindergarten with one or more infants registered in AtCoder, let us find the highest rating of an infant in the kindergarten. The evenness is then defined as the lowest among those ratings.

For each of the \(Q\) transfers, find the evenness just after the transfer.

*** Constraints

- \(1 \leq N,Q \leq 2 \times 10^5\)
- \(1 \leq A_i \leq 10^9\)
- \(1 \leq C_j \leq N\)
- \(1 \leq B_i,D_j \leq 2 \times 10^5\)
- All values in input are integers.
- In the \(j\)-th transfer, Infant \(C_j\) changes the kindergarten it belongs to.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(Q\)
\(A_1\) \(B_1\)
\(A_2\) \(B_2\)
\(:\)
\(A_N\) \(B_N\)
\(C_1\) \(D_1\)
\(C_2\) \(D_2\)
\(:\)
\(C_Q\) \(D_Q\)
#+end_example

*** Output

Print \(Q\) lines. The \(j\)-th line should contain the evenness just after the \(j\)-th transfer.

--------------

*** Sample Input 1

#+begin_example
6 3
8 1
6 2
9 3
1 1
2 2
1 3
4 3
2 1
1 2
#+end_example

*** Sample Output 1

#+begin_example
6
2
6
#+end_example

Initially, Infant \(1, 4\) belongs to Kindergarten \(1\), Infant \(2, 5\) belongs to Kindergarten \(2\), and Infant \(3, 6\) belongs to Kindergarten \(3\).

After the \(1\)-st transfer that makes Infant \(4\) belong to Kindergarten \(3\), Infant \(1\) belongs to Kindergarten \(1\), Infant \(2, 5\) belong to Kindergarten \(2\), and Infant \(3, 4, 6\) belong to Kindergarten \(3\). The highest ratings of an infant in Kindergarten \(1, 2, 3\) are \(8, 6, 9\), respectively. The lowest among them is \(6\), so the \(1\)-st line in the output should contain \(6\).

After the \(2\)-nd transfer that makes Infant \(2\) belong to Kindergarten \(1\), Infant \(1, 2\) belong to Kindergarten \(1\), Infant \(5\) belongs to Kindergarten \(2\), and Infant \(3, 4, 6\) belong to Kindergarten \(3\). The highest ratings of an infant in Kindergarten \(1, 2, 3\) are \(8, 2, 9\), respectively. The lowest among them is \(2\), so the \(2\)-nd line in the output should contain \(2\).

After the \(3\)-rd transfer that makes Infant \(1\) belong to Kindergarten \(2\), Infant \(2\) belongs to Kindergarten \(1\), Infant \(1, 5\) belong to Kindergarten \(2\), and Infant \(3, 4, 6\) belong to Kindergarten \(3\). The highest ratings of an infant in Kindergarten \(1, 2, 3\) are \(6, 8, 9\), respectively. The lowest among them is \(6\), so the \(3\)-rd line in the output should contain \(6\).

--------------

*** Sample Input 2

#+begin_example
2 2
4208 1234
3056 5678
1 2020
2 2020
#+end_example

*** Sample Output 2

#+begin_example
3056
4208
#+end_example


** [[https://atcoder.jp/contests/abc169/tasks/abc169_e][E - Count Median]]

Score : \(500\) points

*** Problem Statement

There are \(N\) integers \(X_1, X_2, \cdots, X_N\), and we know that \(A_i \leq X_i \leq B_i\). Find the number of different values that the median of \(X_1, X_2, \cdots, X_N\) can take.

*** Notes

The median of \(X_1, X_2, \cdots, X_N\) is defined as follows. Let \(x_1, x_2, \cdots, x_N\) be the result of sorting \(X_1, X_2, \cdots, X_N\) in ascending order.

- If \(N\) is odd, the median is \(x_{(N+1)/2}\);
- if \(N\) is even, the median is \((x_{N/2} + x_{N/2+1}) / 2\).

*** Constraints

- \(2 \leq N \leq 2 \times 10^5\)
- \(1 \leq A_i \leq B_i \leq 10^9\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(B_1\)
\(A_2\) \(B_2\)
\(:\)
\(A_N\) \(B_N\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
2
1 2
2 3
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

- If \(X_1 = 1\) and \(X_2 = 2\), the median is \(\frac{3}{2}\);

- if \(X_1 = 1\) and \(X_2 = 3\), the median is \(2\);

- if \(X_1 = 2\) and \(X_2 = 2\), the median is \(2\);

- if \(X_1 = 2\) and \(X_2 = 3\), the median is \(\frac{5}{2}\).

Thus, the median can take three values: \(\frac{3}{2}\), \(2\), and \(\frac{5}{2}\).

--------------

*** Sample Input 2

#+begin_example
3
100 100
10 10000
1 1000000000
#+end_example

*** Sample Output 2

#+begin_example
9991
#+end_example


** [[https://atcoder.jp/contests/abc167/tasks/abc167_e][E - Colorful Blocks]]

Score : \(500\) points

*** Problem Statement

There are \(N\) blocks arranged in a row. Let us paint these blocks.

We will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.

Find the number of ways to paint the blocks under the following conditions:

- For each block, use one of the \(M\) colors, Color \(1\) through Color \(M\), to paint it. It is not mandatory to use all the colors.
- There may be at most \(K\) pairs of adjacent blocks that are painted in the same color.

Since the count may be enormous, print it modulo \(998244353\).

*** Constraints

- All values in input are integers.
- \(1 \leq N, M \leq 2 \times 10^5\)
- \(0 \leq K \leq N - 1\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(K\)
#+end_example

*** Output

Print the answer.

--------------

*** Sample Input 1

#+begin_example
3 2 1
#+end_example

*** Sample Output 1

#+begin_example
6
#+end_example

The following ways to paint the blocks satisfy the conditions: =112=, =121=, =122=, =211=, =212=, and =221=. Here, digits represent the colors of the blocks.

--------------

*** Sample Input 2

#+begin_example
100 100 0
#+end_example

*** Sample Output 2

#+begin_example
73074801
#+end_example

--------------

*** Sample Input 3

#+begin_example
60522 114575 7559
#+end_example

*** Sample Output 3

#+begin_example
479519525
#+end_example


** [[https://atcoder.jp/contests/abc164/tasks/abc164_d][D - Multiple of 2019]]

Score : \(400\) points

*** Problem Statement

Given is a string \(S\) consisting of digits from =1= through =9=.

Find the number of pairs of integers \((i,j)\) (\(1 ≤ i ≤ j ≤ |S|\)) that satisfy the following condition:

Condition: In base ten, the \(i\)-th through \(j\)-th characters of \(S\) form an integer that is a multiple of \(2019\).

*** Constraints

- \(1 ≤ |S| ≤ 200000\)
- \(S\) is a string consisting of digits from =1= through =9=.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(S\)
#+end_example

*** Output

Print the number of pairs of integers \((i,j)\) (\(1 ≤ i ≤ j ≤ |S|\)) that satisfy the condition.

--------------

*** Sample Input 1

#+begin_example
1817181712114
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

Three pairs - \((1,5)\), \((5,9)\), and \((9,13)\) - satisfy the condition.

--------------

*** Sample Input 2

#+begin_example
14282668646
#+end_example

*** Sample Output 2

#+begin_example
2
#+end_example

--------------

*** Sample Input 3

#+begin_example
2119
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

No pairs satisfy the condition.


** [[https://atcoder.jp/contests/abc161/tasks/abc161_f][F - Division or Subtraction]]

Score : \(600\) points

*** Problem Statement

Given is a positive integer \(N\).

We will choose an integer \(K\) between \(2\) and \(N\) (inclusive), then we will repeat the operation below until \(N\) becomes less than \(K\).

- Operation: if \(K\) divides \(N\), replace \(N\) with \(N/K\); otherwise, replace \(N\) with \(N-K\).

In how many choices of \(K\) will \(N\) become \(1\) in the end?

*** Constraints

- \(2 \leq N \leq 10^{12}\)
- \(N\) is an integer.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
#+end_example

*** Output

Print the number of choices of \(K\) in which \(N\) becomes \(1\) in the end.

--------------

*** Sample Input 1

#+begin_example
6
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

There are three choices of \(K\) in which \(N\) becomes \(1\) in the end: \(2\), \(5\), and \(6\).

In each of these choices, \(N\) will change as follows:

- When \(K=2\): \(6 \to 3 \to 1\)
- When \(K=5\): \(6 \to 1\)
- When \(K=6\): \(6 \to 1\)

--------------

*** Sample Input 2

#+begin_example
3141
#+end_example

*** Sample Output 2

#+begin_example
13
#+end_example

--------------

*** Sample Input 3

#+begin_example
314159265358
#+end_example

*** Sample Output 3

#+begin_example
9
#+end_example


** [[https://atcoder.jp/contests/abc159/tasks/abc159_e][E - Dividing Chocolate]]

Score : \(500\) points

*** Problem Statement

We have a chocolate bar partitioned into \(H\) horizontal rows and \(W\) vertical columns of squares.

The square \((i, j)\) at the \(i\)-th row from the top and the \(j\)-th column from the left is dark if \(S_{i,j}\) is =0=, and white if \(S_{i,j}\) is =1=.

We will cut the bar some number of times to divide it into some number of blocks. In each cut, we cut the whole bar by a line running along some boundaries of squares from end to end of the bar.

How many times do we need to cut the bar so that every block after the cuts has \(K\) or less white squares?

*** Constraints

- \(1 \leq H \leq 10\)
- \(1 \leq W \leq 1000\)
- \(1 \leq K \leq H \times W\)
- \(S_{i,j}\) is =0= or =1=.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\) \(K\)
\(S_{1,1}S_{1,2}...S_{1,W}\)
\(:\)
\(S_{H,1}S_{H,2}...S_{H,W}\)
#+end_example

*** Output

Print the number of minimum times the bar needs to be cut so that every block after the cuts has \(K\) or less white squares.

--------------

*** Sample Input 1

#+begin_example
3 5 4
11100
10001
00111
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

For example, cutting between the \(1\)-st and \(2\)-nd rows and between the \(3\)-rd and \(4\)-th columns - as shown in the figure to the left - works.

Note that we cannot cut the bar in the ways shown in the two figures to the right.

[[https://img.atcoder.jp/ghi/ac90dd542639c04402125403b1c319d7.png]]

--------------

*** Sample Input 2

#+begin_example
3 5 8
11100
10001
00111
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

No cut is needed.

--------------

*** Sample Input 3

#+begin_example
4 10 4
1110010010
1000101110
0011101001
1101000111
#+end_example

*** Sample Output 3

#+begin_example
3
#+end_example


** [[https://atcoder.jp/contests/abc157/tasks/abc157_d][D - Friend Suggestions]]

Score : \(400\) points

*** Problem Statement

An SNS has \(N\) users - User \(1\), User \(2\), \(\cdots\), User \(N\).

Between these \(N\) users, there are some relationships - \(M\) /friendships/ and \(K\) /blockships/.

For each \(i = 1, 2, \cdots, M\), there is a bidirectional friendship between User \(A_i\) and User \(B_i\).

For each \(i = 1, 2, \cdots, K\), there is a bidirectional blockship between User \(C_i\) and User \(D_i\).

We define User \(a\) to be a /friend candidate/ for User \(b\) when all of the following four conditions are satisfied:

- \(a \neq b\).
- There is not a friendship between User \(a\) and User \(b\).
- There is not a blockship between User \(a\) and User \(b\).
- There exists a sequence \(c_0, c_1, c_2, \cdots, c_L\) consisting of integers between \(1\) and \(N\) (inclusive) such that \(c_0 = a\), \(c_L = b\), and there is a friendship between User \(c_i\) and \(c_{i+1}\) for each \(i = 0, 1, \cdots, L - 1\).

For each user \(i = 1, 2, ... N\), how many friend candidates does it have?

*** Constraints

- All values in input are integers.
- \(2 ≤ N ≤ 10^5\)
- \(0 \leq M \leq 10^5\)
- \(0 \leq K \leq 10^5\)
- \(1 \leq A_i, B_i \leq N\)
- \(A_i \neq B_i\)
- \(1 \leq C_i, D_i \leq N\)
- \(C_i \neq D_i\)
- \((A_i, B_i) \neq (A_j, B_j) (i \neq j)\)
- \((A_i, B_i) \neq (B_j, A_j)\)
- \((C_i, D_i) \neq (C_j, D_j) (i \neq j)\)
- \((C_i, D_i) \neq (D_j, C_j)\)
- \((A_i, B_i) \neq (C_j, D_j)\)
- \((A_i, B_i) \neq (D_j, C_j)\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\) \(K\)
\(A_1\) \(B_1\)
\(\vdots\)
\(A_M\) \(B_M\)
\(C_1\) \(D_1\)
\(\vdots\)
\(C_K\) \(D_K\)
#+end_example

*** Output

Print the answers in order, with space in between.

--------------

*** Sample Input 1

#+begin_example
4 4 1
2 1
1 3
3 2
3 4
4 1
#+end_example

*** Sample Output 1

#+begin_example
0 1 0 1
#+end_example

There is a friendship between User \(2\) and \(3\), and between \(3\) and \(4\). Also, there is no friendship or blockship between User \(2\) and \(4\). Thus, User \(4\) is a friend candidate for User \(2\).

However, neither User \(1\) or \(3\) is a friend candidate for User \(2\), so User \(2\) has one friend candidate.

--------------

*** Sample Input 2

#+begin_example
5 10 0
1 2
1 3
1 4
1 5
3 2
2 4
2 5
4 3
5 3
4 5
#+end_example

*** Sample Output 2

#+begin_example
0 0 0 0 0
#+end_example

Everyone is a friend of everyone else and has no friend candidate.

--------------

*** Sample Input 3

#+begin_example
10 9 3
10 1
6 7
8 2
2 5
8 4
7 3
10 9
6 4
5 8
2 6
7 5
3 1
#+end_example

*** Sample Output 3

#+begin_example
1 3 5 4 3 3 3 3 1 0
#+end_example


** [[https://atcoder.jp/contests/abc157/tasks/abc157_e][E - Simple String Queries]]

Score : \(500\) points

*** Problem Statement

You are given a string \(S\) of length \(N\) consisting of lowercase English letters.

Process \(Q\) queries of the following two types:

- Type \(1\): change the \(i_q\)-th character of \(S\) to \(c_q\). (Do nothing if the \(i_q\)-th character is already \(c_q\).)
- Type \(2\): answer the number of different characters occurring in the substring of \(S\) between the \(l_q\)-th and \(r_q\)-th characters (inclusive).

*** Constraints

- \(N\), \(Q\), \(i_q\), \(l_q\), and \(r_q\) are integers.
- \(S\) is a string consisting of lowercase English letters.
- \(c_q\) is a lowercase English letter.
- \(1 \leq N \leq 500000\)
- \(1 \leq Q \leq 20000\)
- \(|S| = N\)
- \(1 \leq i_q \leq N\)
- \(1 \leq l_q \leq r_q \leq N\)
- There is at least one query of type \(2\) in each testcase.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(S\)
\(Q\)
\(Query_1\)
\(\vdots\)
\(Query_Q\)
#+end_example

Here, \(Query_i\) in the \(4\)-th through \((Q+3)\)-th lines is one of the following:

#+begin_example
\(1\) \(i_q\) \(c_q\)
#+end_example

#+begin_example
\(2\) \(l_q\) \(r_q\)
#+end_example

*** Output

For each query of type \(2\), print a line containing the answer.

--------------

*** Sample Input 1

#+begin_example
7
abcdbbd
6
2 3 6
1 5 z
2 1 1
1 4 a
1 7 d
2 1 7
#+end_example

*** Sample Output 1

#+begin_example
3
1
5
#+end_example

In the first query, =cdbb= contains three kinds of letters: =b= , =c= , and =d=, so we print \(3\).

In the second query, \(S\) is modified to =abcdzbd=.

In the third query, =a= contains one kind of letter: =a=, so we print \(1\).

In the fourth query, \(S\) is modified to =abcazbd=.

In the fifth query, \(S\) does not change and is still =abcazbd=.

In the sixth query, =abcazbd= contains five kinds of letters: =a=, =b=, =c=, =d=, and =z=, so we print \(5\).


** [[https://atcoder.jp/contests/abc156/tasks/abc156_e][E - Roaming]]

Score : \(500\) points

*** Problem Statement

There is a building with \(n\) rooms, numbered \(1\) to \(n\).

We can move from any room to any other room in the building.

Let us call the following event a *move*: a person in some room \(i\) goes to another room \(j~ (i \neq j)\).

Initially, there was one person in each room in the building.

After that, we know that there were exactly \(k\) moves happened up to now.

We are interested in the number of people in each of the \(n\) rooms now. How many combinations of numbers of people in the \(n\) rooms are possible?

Find the count modulo \((10^9 + 7)\).

*** Constraints

- All values in input are integers.
- \(3 \leq n \leq 2 \times 10^5\)
- \(2 \leq k \leq 10^9\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(n\) \(k\)
#+end_example

*** Output

Print the number of possible combinations of numbers of people in the \(n\) rooms now, modulo \((10^9 + 7)\).

--------------

*** Sample Input 1

#+begin_example
3 2
#+end_example

*** Sample Output 1

#+begin_example
10
#+end_example

Let \(c_1\), \(c_2\), and \(c_3\) be the number of people in Room \(1\), \(2\), and \(3\) now, respectively. There are \(10\) possible combination of \((c_1, c_2, c_3)\):

- \((0, 0, 3)\)
- \((0, 1, 2)\)
- \((0, 2, 1)\)
- \((0, 3, 0)\)
- \((1, 0, 2)\)
- \((1, 1, 1)\)
- \((1, 2, 0)\)
- \((2, 0, 1)\)
- \((2, 1, 0)\)
- \((3, 0, 0)\)

For example, \((c_1, c_2, c_3)\) will be \((0, 1, 2)\) if the person in Room \(1\) goes to Room \(2\) and then one of the persons in Room \(2\) goes to Room \(3\).

--------------

*** Sample Input 2

#+begin_example
200000 1000000000
#+end_example

*** Sample Output 2

#+begin_example
607923868
#+end_example

Print the count modulo \((10^9 + 7)\).

--------------

*** Sample Input 3

#+begin_example
15 6
#+end_example

*** Sample Output 3

#+begin_example
22583772
#+end_example


** [[https://atcoder.jp/contests/abc155/tasks/abc155_e][E - Payment]]

Score: \(500\) points

*** Problem Statement

In the Kingdom of AtCoder, only banknotes are used as currency. There are \(10^{100}+1\) kinds of banknotes, with the values of \(1, 10, 10^2, 10^3, \dots, 10^{(10^{100})}\). You have come shopping at a mall and are now buying a takoyaki machine with a value of \(N\). /(Takoyaki is the name of a Japanese snack.)/

To make the payment, you will choose some amount of money which is at least \(N\) and give it to the clerk. Then, the clerk gives you back the change, which is the amount of money you give minus \(N\).

What will be the minimum possible number of total banknotes used by you and the clerk, when both choose the combination of banknotes to minimize this count?

Assume that you have sufficient numbers of banknotes, and so does the clerk.

*** Constraints

- \(N\) is an integer between \(1\) and \(10^{1,000,000}\) (inclusive).

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
#+end_example

*** Output

Print the minimum possible number of total banknotes used by you and the clerk.

--------------

*** Sample Input 1

#+begin_example
36
#+end_example

*** Sample Output 1

#+begin_example
8
#+end_example

If you give four banknotes of value \(10\) each, and the clerk gives you back four banknotes of value \(1\) each, a total of eight banknotes are used.

The payment cannot be made with less than eight banknotes in total, so the answer is \(8\).

--------------

*** Sample Input 2

#+begin_example
91
#+end_example

*** Sample Output 2

#+begin_example
3
#+end_example

If you give two banknotes of value \(100, 1\), and the clerk gives you back one banknote of value \(10\), a total of three banknotes are used.

--------------

*** Sample Input 3

#+begin_example
314159265358979323846264338327950288419716939937551058209749445923078164062862089986280348253421170
#+end_example

*** Sample Output 3

#+begin_example
243
#+end_example


** [[https://atcoder.jp/contests/abc154/tasks/abc154_e][E - Almost Everywhere Zero]]

Score : \(500\) points

*** Problem Statement

Find the number of integers between \(1\) and \(N\) (inclusive) that contains exactly \(K\) non-zero digits when written in base ten.

*** Constraints

- \(1 \leq N < 10^{100}\)
- \(1 \leq K \leq 3\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(K\)
#+end_example

*** Output

Print the count.

--------------

*** Sample Input 1

#+begin_example
100
1
#+end_example

*** Sample Output 1

#+begin_example
19
#+end_example

The following \(19\) integers satisfy the condition:

- \(1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100\)

--------------

*** Sample Input 2

#+begin_example
25
2
#+end_example

*** Sample Output 2

#+begin_example
14
#+end_example

The following \(14\) integers satisfy the condition:

- \(11,12,13,14,15,16,17,18,19,21,22,23,24,25\)

--------------

*** Sample Input 3

#+begin_example
314159
2
#+end_example

*** Sample Output 3

#+begin_example
937
#+end_example

--------------

*** Sample Input 4

#+begin_example
9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
3
#+end_example

*** Sample Output 4

#+begin_example
117879300
#+end_example


** [[https://atcoder.jp/contests/abc153/tasks/abc153_f][F - Silver Fox vs Monster]]

Score : \(600\) points

*** Problem Statement

Silver Fox is fighting with \(N\) monsters.

The monsters are standing in a row, and we can assume them to be standing on a number line. The \(i\)-th monster, standing at the coordinate \(X_i\), has the /health/ of \(H_i\).

Silver Fox can use bombs to attack the monsters. Using a bomb at the coordinate \(x\) decreases the healths of all monsters between the coordinates \(x-D\) and \(x+D\) (inclusive) by \(A\). There is no way other than bombs to decrease the monster's health.

Silver Fox wins when all the monsters' healths become \(0\) or below.

Find the minimum number of bombs needed to win.

*** Constraints

- \(1 \leq N \leq 2 \times 10^5\)
- \(0 \leq D \leq 10^9\)
- \(1 \leq A \leq 10^9\)
- \(0 \leq X_i \leq 10^9\)
- \(1 \leq H_i \leq 10^9\)
- \(X_i\) are distinct.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(D\) \(A\)
\(X_1\) \(H_1\)
\(:\)
\(X_N\) \(H_N\)
#+end_example

*** Output

Print the minimum number of bombs needed to win.

--------------

*** Sample Input 1

#+begin_example
3 3 2
1 2
5 4
9 2
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

First, let us use a bomb at the coordinate \(4\) to decrease the first and second monsters' health by \(2\).

Then, use a bomb at the coordinate \(6\) to decrease the second and third monsters' health by \(2\).

Now, all the monsters' healths are \(0\). We cannot make all the monsters' health drop to \(0\) or below with just one bomb.

--------------

*** Sample Input 2

#+begin_example
9 4 1
1 5
2 4
3 3
4 2
5 1
6 2
7 3
8 4
9 5
#+end_example

*** Sample Output 2

#+begin_example
5
#+end_example

We should use five bombs at the coordinate \(5\).

--------------

*** Sample Input 3

#+begin_example
3 0 1
300000000 1000000000
100000000 1000000000
200000000 1000000000
#+end_example

*** Sample Output 3

#+begin_example
3000000000
#+end_example

Watch out for overflow.


** [[https://atcoder.jp/contests/abc152/tasks/abc152_e][E - Flatten]]

Score : \(500\) points

*** Problem Statement

Given are \(N\) positive integers \(A_1,...,A_N\).

Consider positive integers \(B_1, ..., B_N\) that satisfy the following condition.

Condition: For any \(i, j\) such that \(1 \leq i < j \leq N\), \(A_i B_i = A_j B_j\) holds.

Find the minimum possible value of \(B_1 + ... + B_N\) for such \(B_1,...,B_N\).

Since the answer can be enormous, print the sum modulo (\(10^9 +7\)).

*** Constraints

- \(1 \leq N \leq 10^4\)
- \(1 \leq A_i \leq 10^6\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(...\) \(A_N\)
#+end_example

*** Output

Print the minimum possible value of \(B_1 + ... + B_N\) for \(B_1,...,B_N\) that satisfy the condition, modulo (\(10^9 +7\)).

--------------

*** Sample Input 1

#+begin_example
3
2 3 4
#+end_example

*** Sample Output 1

#+begin_example
13
#+end_example

Let \(B_1=6\), \(B_2=4\), and \(B_3=3\), and the condition will be satisfied.

--------------

*** Sample Input 2

#+begin_example
5
12 12 12 12 12
#+end_example

*** Sample Output 2

#+begin_example
5
#+end_example

We can let all \(B_i\) be \(1\).

--------------

*** Sample Input 3

#+begin_example
3
1000000 999999 999998
#+end_example

*** Sample Output 3

#+begin_example
996989508
#+end_example

Print the sum modulo \((10^9+7)\).


** [[https://atcoder.jp/contests/abc151/tasks/abc151_e][E - Max-Min Sums]]

Score : \(500\) points

*** Problem Statement

For a finite set of integers \(X\), let \(f(X)=\max X - \min X\).

Given are \(N\) integers \(A_1,...,A_N\).

We will choose \(K\) of them and let \(S\) be the set of the integers chosen. If we distinguish elements with different indices even when their values are the same, there are \({}_N C_K\) ways to make this choice. Find the sum of \(f(S)\) over all those ways.

Since the answer can be enormous, print it \(\bmod (10^9+7)\).

*** Constraints

- \(1 \leq N \leq 10^5\)
- \(1 \leq K \leq N\)
- \(|A_i| \leq 10^9\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(A_1\) \(...\) \(A_N\)
#+end_example

*** Output

Print the answer \(\bmod (10^9+7)\).

--------------

*** Sample Input 1

#+begin_example
4 2
1 1 3 4
#+end_example

*** Sample Output 1

#+begin_example
11
#+end_example

There are six ways to choose \(S\): \(\{1,1\},\{1,3\},\{1,4\},\{1,3\},\{1,4\}, \{3,4\}\) (we distinguish the two \(1\)s). The value of \(f(S)\) for these choices are \(0,2,3,2,3,1\), respectively, for the total of \(11\).

--------------

*** Sample Input 2

#+begin_example
6 3
10 10 10 -10 -10 -10
#+end_example

*** Sample Output 2

#+begin_example
360
#+end_example

There are \(20\) ways to choose \(S\). In \(18\) of them, \(f(S)=20\), and in \(2\) of them, \(f(S)=0\).

--------------

*** Sample Input 3

#+begin_example
3 1
1 1 1
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

--------------

*** Sample Input 4

#+begin_example
10 6
1000000000 1000000000 1000000000 1000000000 1000000000 0 0 0 0 0
#+end_example

*** Sample Output 4

#+begin_example
999998537
#+end_example

Print the sum \(\bmod (10^9+7)\).


** [[https://atcoder.jp/contests/abc150/tasks/abc150_d][D - Semi Common Multiple]]

Score : \(400\) points

*** Problem Statement

Given are a sequence \(A= {a_1,a_2,......a_N}\) of \(N\) positive even numbers, and an integer \(M\).

Let a /semi-common multiple/ of \(A\) be a positive integer \(X\) that satisfies the following condition for every \(k\) \((1 \leq k \leq N)\):

- There exists a non-negative integer \(p\) such that \(X= a_k \times (p+0.5)\).

Find the number of semi-common multiples of \(A\) among the integers between \(1\) and \(M\) (inclusive).

*** Constraints

- \(1 \leq N \leq 10^5\)
- \(1 \leq M \leq 10^9\)
- \(2 \leq a_i \leq 10^9\)
- \(a_i\) is an even number.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(a_1\) \(a_2\) \(...\) \(a_N\)
#+end_example

*** Output

Print the number of semi-common multiples of \(A\) among the integers between \(1\) and \(M\) (inclusive).

--------------

*** Sample Input 1

#+begin_example
2 50
6 10
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

- \(15 = 6 \times 2.5 \)
- \(15 = 10 \times 1.5 \)
- \(45 = 6 \times 7.5 \)
- \(45 = 10 \times 4.5 \)

Thus, \(15\) and \(45\) are semi-common multiples of \(A\). There are no other semi-common multiples of \(A\) between \(1\) and \(50\), so the answer is \(2\).

--------------

*** Sample Input 2

#+begin_example
3 100
14 22 40
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

The answer can be \(0\).

--------------

*** Sample Input 3

#+begin_example
5 1000000000
6 6 2 6 2
#+end_example

*** Sample Output 3

#+begin_example
166666667
#+end_example


** [[https://atcoder.jp/contests/abc148/tasks/abc148_f][F - Playing Tag on Tree]]

Score : \(600\) points

*** Problem Statement

We have a tree with \(N\) vertices. The \(i\)-th edge connects Vertex \(A_i\) and \(B_i\) bidirectionally.

Takahashi is standing at Vertex \(u\), and Aoki is standing at Vertex \(v\).

Now, they will play a game of tag as follows:

- \(1\). If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Takahashi moves to a vertex of his choice that is adjacent to his current vertex.

- \(2\). If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Aoki moves to a vertex of his choice that is adjacent to his current vertex.

- \(3\). Go back to step \(1\).

Takahashi performs his moves so that the game ends as late as possible, while Aoki performs his moves so that the game ends as early as possible.

Find the number of moves Aoki will perform before the end of the game if both Takahashi and Aoki know each other's position and strategy.

It can be proved that the game is bound to end.

*** Constraints

- \(2 \leq N \leq 10^5\)
- \(1 \leq u,v \leq N\)
- \(u \neq v\)
- \(1 \leq A_i,B_i \leq N\)
- The given graph is a tree.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(u\) \(v\)
\(A_1\) \(B_1\)
\(:\)
\(A_{N-1}\) \(B_{N-1}\)
#+end_example

*** Output

Print the number of moves Aoki will perform before the end of the game.

--------------

*** Sample Input 1

#+begin_example
5 4 1
1 2
2 3
3 4
3 5
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

If both players play optimally, the game will progress as follows:

- Takahashi moves to Vertex \(3\).
- Aoki moves to Vertex \(2\).
- Takahashi moves to Vertex \(5\).
- Aoki moves to Vertex \(3\).
- Takahashi moves to Vertex \(3\).

Here, Aoki performs two moves.

Note that, in each move, it is prohibited to stay at the current vertex.

--------------

*** Sample Input 2

#+begin_example
5 4 5
1 2
1 3
1 4
1 5
#+end_example

*** Sample Output 2

#+begin_example
1
#+end_example

--------------

*** Sample Input 3

#+begin_example
2 1 2
1 2
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

--------------

*** Sample Input 4

#+begin_example
9 6 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
#+end_example

*** Sample Output 4

#+begin_example
5
#+end_example


** [[https://atcoder.jp/contests/abc147/tasks/abc147_d][D - Xor Sum 4]]

Score : \(400\) points

*** Problem Statement

We have \(N\) integers. The \(i\)-th integer is \(A_i\).

Find \(\sum_{i=1}^{N-1}\sum_{j=i+1}^{N} (A_i \text{ XOR } A_j)\), modulo \((10^9+7)\).

What is \(\text{ XOR }\)?

The XOR of integers \(A\) and \(B\), \(A \text{ XOR } B\), is defined as follows:

- When \(A \text{ XOR } B\) is written in base two, the digit in the \(2^k\)'s place (\(k \geq 0\)) is \(1\) if either \(A\) or \(B\), but not both, has \(1\) in the \(2^k\)'s place, and \(0\) otherwise.

For example, \(3 \text{ XOR } 5 = 6\). (In base two: \(011 \text{ XOR } 101 = 110\).)

*** Constraints

- \(2 \leq N \leq 3 \times 10^5\)
- \(0 \leq A_i < 2^{60}\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\) \(A_2\) \(...\) \(A_N\)
#+end_example

*** Output

Print the value \(\sum_{i=1}^{N-1}\sum_{j=i+1}^{N} (A_i \text{ XOR } A_j)\), modulo \((10^9+7)\).

--------------

*** Sample Input 1

#+begin_example
3
1 2 3
#+end_example

*** Sample Output 1

#+begin_example
6
#+end_example

We have \((1\text{ XOR } 2)+(1\text{ XOR } 3)+(2\text{ XOR } 3)=3+2+1=6\).

--------------

*** Sample Input 2

#+begin_example
10
3 1 4 1 5 9 2 6 5 3
#+end_example

*** Sample Output 2

#+begin_example
237
#+end_example

--------------

*** Sample Input 3

#+begin_example
10
3 14 159 2653 58979 323846 2643383 27950288 419716939 9375105820
#+end_example

*** Sample Output 3

#+begin_example
103715602
#+end_example

Print the sum modulo \((10^9+7)\).


** [[https://atcoder.jp/contests/abc146/tasks/abc146_f][F - Sugoroku]]

Score : \(600\) points

*** Problem Statement

Takahashi is playing a board game called Sugoroku.

On the board, there are \(N + 1\) squares numbered \(0\) to \(N\). Takahashi starts at Square \(0\), and he has to stop exactly at Square \(N\) to win the game.

The game uses a roulette with the \(M\) numbers from \(1\) to \(M\). In each turn, Takahashi spins the roulette. If the number \(x\) comes up when he is at Square \(s\), he moves to Square \(s+x\). If this makes him go beyond Square \(N\), he loses the game.

Additionally, some of the squares are Game Over Squares. He also loses the game if he stops at one of those squares. You are given a string \(S\) of length \(N + 1\), representing which squares are Game Over Squares. For each \(i\) \((0 \leq i \leq N)\), Square \(i\) is a Game Over Square if \(S[i] = 1\) and not if \(S[i] = 0\).

Find the sequence of numbers coming up in the roulette in which Takahashi can win the game in the fewest number of turns possible. If there are multiple such sequences, find the lexicographically smallest such sequence. If Takahashi cannot win the game, print \(-1\).

*** Constraints

- \(1 \leq N \leq 10^5\)
- \(1 \leq M \leq 10^5\)
- \(|S| = N + 1\)
- \(S\) consists of =0= and =1=.
- \(S[0] =\) =0=
- \(S[N] =\) =0=

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(S\)
#+end_example

*** Output

If Takahashi can win the game, print the lexicographically smallest sequence among the shortest sequences of numbers coming up in the roulette in which Takahashi can win the game, with spaces in between.

If Takahashi cannot win the game, print \(-1\).

--------------

*** Sample Input 1

#+begin_example
9 3
0001000100
#+end_example

*** Sample Output 1

#+begin_example
1 3 2 3
#+end_example

If the numbers \(1\), \(3\), \(2\), \(3\) come up in this order, Takahashi can reach Square \(9\) via Square \(1\), \(4\), and \(6\). He cannot reach Square \(9\) in three or fewer turns, and this is the lexicographically smallest sequence in which he reaches Square \(9\) in four turns.

--------------

*** Sample Input 2

#+begin_example
5 4
011110
#+end_example

*** Sample Output 2

#+begin_example
-1
#+end_example

Takahashi cannot reach Square \(5\).

--------------

*** Sample Input 3

#+begin_example
6 6
0101010
#+end_example

*** Sample Output 3

#+begin_example
6
#+end_example


** [[https://atcoder.jp/contests/abc145/tasks/abc145_e][E - All-you-can-eat]]

Score : \(500\) points

*** Problem Statement

Takahashi is at an all-you-can-eat restaurant.

The restaurant offers \(N\) kinds of dishes. It takes \(A_i\) minutes to eat the \(i\)-th dish, whose deliciousness is \(B_i\).

The restaurant has the following rules:

- You can only order one dish at a time. The dish ordered will be immediately served and ready to eat.
- You cannot order the same kind of dish more than once.
- Until you finish eating the dish already served, you cannot order a new dish.
- After \(T-0.5\) minutes from the first order, you can no longer place a new order, but you can continue eating the dish already served.

Let Takahashi's happiness be the sum of the deliciousness of the dishes he eats in this restaurant.

What is the maximum possible happiness achieved by making optimal choices?

*** Constraints

- \(2 \leq N \leq 3000\)
- \(1 \leq T \leq 3000\)
- \(1 \leq A_i \leq 3000\)
- \(1 \leq B_i \leq 3000\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(T\)
\(A_1\) \(B_1\)
\(:\)
\(A_N\) \(B_N\)
#+end_example

*** Output

Print the maximum possible happiness Takahashi can achieve.

--------------

*** Sample Input 1

#+begin_example
2 60
10 10
100 100
#+end_example

*** Sample Output 1

#+begin_example
110
#+end_example

By ordering the first and second dishes in this order, Takahashi's happiness will be \(110\).

Note that, if we manage to order a dish in time, we can spend any amount of time to eat it.

--------------

*** Sample Input 2

#+begin_example
3 60
10 10
10 20
10 30
#+end_example

*** Sample Output 2

#+begin_example
60
#+end_example

Takahashi can eat all the dishes within \(60\) minutes.

--------------

*** Sample Input 3

#+begin_example
3 60
30 10
30 20
30 30
#+end_example

*** Sample Output 3

#+begin_example
50
#+end_example

By ordering the second and third dishes in this order, Takahashi's happiness will be \(50\).

We cannot order three dishes, in whatever order we place them.

--------------

*** Sample Input 4

#+begin_example
10 100
15 23
20 18
13 17
24 12
18 29
19 27
23 21
18 20
27 15
22 25
#+end_example

*** Sample Output 4

#+begin_example
145
#+end_example


** [[https://atcoder.jp/contests/abc144/tasks/abc144_e][E - Gluttony]]

Score: \(500\) points

*** Problem Statement

Takahashi will take part in an eating contest. Teams of \(N\) members will compete in this contest, and Takahashi's team consists of \(N\) players numbered \(1\) through \(N\) from youngest to oldest. The /consumption coefficient/ of Member \(i\) is \(A_i\).

In the contest, \(N\) foods numbered \(1\) through \(N\) will be presented, and the /difficulty/ of Food \(i\) is \(F_i\). The details of the contest are as follows:

- A team should assign one member to each food, and should not assign the same member to multiple foods.
- It will take \(x \times y\) seconds for a member to finish the food, where \(x\) is the consumption coefficient of the member and \(y\) is the difficulty of the dish.
- The score of a team is the longest time it takes for an individual member to finish the food.

Before the contest, Takahashi's team decided to do some training. In one set of training, a member can reduce his/her consumption coefficient by \(1\), as long as it does not go below \(0\). However, for financial reasons, the \(N\) members can do at most \(K\) sets of training in total.

What is the minimum possible score of the team, achieved by choosing the amounts of members' training and allocating the dishes optimally?

*** Constraints

- All values in input are integers.
- \(1 \leq N \leq 2 \times 10^5\)
- \(0 \leq K \leq 10^{18}\)
- \(1 \leq A_i \leq 10^6\ (1 \leq i \leq N)\)
- \(1 \leq F_i \leq 10^6\ (1 \leq i \leq N)\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(A_1\) \(A_2\) \(...\) \(A_N\)
\(F_1\) \(F_2\) \(...\) \(F_N\)
#+end_example

*** Output

Print the minimum possible score of the team.

--------------

*** Sample Input 1

#+begin_example
3 5
4 2 1
2 3 1
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

They can achieve the score of \(2\), as follows:

- Member \(1\) does \(4\) sets of training and eats Food \(2\) in \((4-4) \times 3 = 0\) seconds.
- Member \(2\) does \(1\) set of training and eats Food \(3\) in \((2-1) \times 1 = 1\) second.
- Member \(3\) does \(0\) sets of training and eats Food \(1\) in \((1-0) \times 2 = 2\) seconds.

They cannot achieve a score of less than \(2\), so the answer is \(2\).

--------------

*** Sample Input 2

#+begin_example
3 8
4 2 1
2 3 1
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

They can choose not to do exactly \(K\) sets of training.

--------------

*** Sample Input 3

#+begin_example
11 14
3 1 4 1 5 9 2 6 5 3 5
8 9 7 9 3 2 3 8 4 6 2
#+end_example

*** Sample Output 3

#+begin_example
12
#+end_example


** [[https://atcoder.jp/contests/abc142/tasks/abc142_e][E - Get Everything]]

Score : \(500\) points

*** Problem Statement

We have \(N\) locked treasure boxes, numbered \(1\) to \(N\).

A shop sells \(M\) keys. The \(i\)-th key is sold for \(a_i\) yen (the currency of Japan), and it can unlock \(b_i\) of the boxes: Box \(c_{i1}\), \(c_{i2}\), \(...\), \(c_{i{b_i}}\). Each key purchased can be used any number of times.

Find the minimum cost required to unlock all the treasure boxes. If it is impossible to unlock all of them, print \(-1\).

*** Constraints

- All values in input are integers.
- \(1 \leq N \leq 12\)
- \(1 \leq M \leq 10^3\)
- \(1 \leq a_i \leq 10^5\)
- \(1 \leq b_i \leq N\)
- \(1 \leq c_{i1} < c_{i2} < ... < c_{i{b_i}} \leq N\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(a_1\) \(b_1\)
\(c_{11}\) \(c_{12}\) \(...\) \(c_{1{b_1}}\)
\(:\)
\(a_M\) \(b_M\)
\(c_{M1}\) \(c_{M2}\) \(...\) \(c_{M{b_M}}\)
#+end_example

*** Output

Print the minimum cost required to unlock all the treasure boxes. If it is impossible to unlock all of them, print \(-1\).

--------------

*** Sample Input 1

#+begin_example
2 3
10 1
1
15 1
2
30 2
1 2
#+end_example

*** Sample Output 1

#+begin_example
25
#+end_example

We can unlock all the boxes by purchasing the first and second keys, at the cost of \(25\) yen, which is the minimum cost required.

--------------

*** Sample Input 2

#+begin_example
12 1
100000 1
2
#+end_example

*** Sample Output 2

#+begin_example
-1
#+end_example

We cannot unlock all the boxes.

--------------

*** Sample Input 3

#+begin_example
4 6
67786 3
1 3 4
3497 1
2
44908 3
2 3 4
2156 3
2 3 4
26230 1
2
86918 1
3
#+end_example

*** Sample Output 3

#+begin_example
69942
#+end_example


** [[https://atcoder.jp/contests/abc141/tasks/abc141_e][E - Who Says a Pun?]]

Score : \(500\) points

*** Problem Statement

Given is a string \(S\) of length \(N\).

Find the maximum length of a non-empty string that occurs twice or more in \(S\) as contiguous substrings without overlapping.

More formally, find the maximum positive integer \(len\) such that there exist integers \(l_1\) and \(l_2\) ( \(1 \leq l_1, l_2 \leq N - len + 1\) ) that satisfy the following:

- \(l_1 + len \leq l_2\)

- \(S[l_1+i] = S[l_2+i] (i = 0, 1, ..., len - 1)\)

If there is no such integer \(len\), print \(0\).

*** Constraints

- \(2 \leq N \leq 5 \times 10^3\)
- \(|S| = N\)
- \(S\) consists of lowercase English letters.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(S\)
#+end_example

*** Output

Print the maximum length of a non-empty string that occurs twice or more in \(S\) as contiguous substrings without overlapping. If there is no such non-empty string, print \(0\) instead.

--------------

*** Sample Input 1

#+begin_example
5
ababa
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

The strings satisfying the conditions are: =a=, =b=, =ab=, and =ba=. The maximum length among them is \(2\), which is the answer. Note that =aba= occurs twice in \(S\) as contiguous substrings, but there is no pair of integers \(l_1\) and \(l_2\) mentioned in the statement such that \(l_1 + len \leq l_2\).

--------------

*** Sample Input 2

#+begin_example
2
xy
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

No non-empty string satisfies the conditions.

--------------

*** Sample Input 3

#+begin_example
13
strangeorange
#+end_example

*** Sample Output 3

#+begin_example
5
#+end_example


** [[https://atcoder.jp/contests/abc139/tasks/abc139_e][E - League]]

Score : \(500\) points

*** Problem Statement

\(N\) players will participate in a tennis tournament. We will call them Player \(1\), Player \(2\), \(\ldots\), Player \(N\).

The tournament is round-robin format, and there will be \(N(N-1)/2\) matches in total. Is it possible to schedule these matches so that all of the following conditions are satisfied? If the answer is yes, also find the minimum number of days required.

- Each player plays at most one matches in a day.
- Each player \(i\) \((1 \leq i \leq N)\) plays one match against Player \(A_{i, 1}, A_{i, 2}, \ldots, A_{i, N-1}\) in this order.

*** Constraints

- \(3 \leq N \leq 1000\)
- \(1 \leq A_{i, j} \leq N\)
- \(A_{i, j} \neq i\)
- \(A_{i, 1}, A_{i, 2}, \ldots, A_{i, N-1}\) are all different.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_{1, 1}\) \(A_{1, 2}\) \(\ldots\) \(A_{1, N-1}\)
\(A_{2, 1}\) \(A_{2, 2}\) \(\ldots\) \(A_{2, N-1}\)
\(:\)
\(A_{N, 1}\) \(A_{N, 2}\) \(\ldots\) \(A_{N, N-1}\)
#+end_example

*** Output

If it is possible to schedule all the matches so that all of the conditions are satisfied, print the minimum number of days required; if it is impossible, print =-1=.

--------------

*** Sample Input 1

#+begin_example
3
2 3
1 3
1 2
#+end_example

*** Sample Output 1

#+begin_example
3
#+end_example

All the conditions can be satisfied if the matches are scheduled for three days as follows:

- Day \(1\): Player \(1\) vs Player \(2\)
- Day \(2\): Player \(1\) vs Player \(3\)
- Day \(3\): Player \(2\) vs Player \(3\)

This is the minimum number of days required.

--------------

*** Sample Input 2

#+begin_example
4
2 3 4
1 3 4
4 1 2
3 1 2
#+end_example

*** Sample Output 2

#+begin_example
4
#+end_example

All the conditions can be satisfied if the matches are scheduled for four days as follows:

- Day \(1\): Player \(1\) vs Player \(2\), Player \(3\) vs Player \(4\)
- Day \(2\): Player \(1\) vs Player \(3\)
- Day \(3\): Player \(1\) vs Player \(4\), Player \(2\) vs Player \(3\)
- Day \(4\): Player \(2\) vs Player \(4\)

This is the minimum number of days required.

--------------

*** Sample Input 3

#+begin_example
3
2 3
3 1
1 2
#+end_example

*** Sample Output 3

#+begin_example
-1
#+end_example

Any scheduling of the matches violates some condition.


** [[https://atcoder.jp/contests/abc138/tasks/abc138_e][E - Strings of Impurity]]

Score : \(500\) points

*** Problem Statement

Given are two strings \(s\) and \(t\) consisting of lowercase English letters. Determine if there exists an integer \(i\) satisfying the following condition, and find the minimum such \(i\) if it exists.

- Let \(s'\) be the concatenation of \(10^{100}\) copies of \(s\). \(t\) is a subsequence of the string \({s'}_1{s'}_2\ldots{s'}_i\) (the first \(i\) characters in \(s'\)).

*** Notes

- A subsequence of a string \(a\) is a string obtained by deleting zero or more characters from \(a\) and concatenating the remaining characters without changing the relative order. For example, the subsequences of =contest= include =net=, =c=, and =contest=.

*** Constraints

- \(1 \leq |s| \leq 10^5\)
- \(1 \leq |t| \leq 10^5\)
- \(s\) and \(t\) consists of lowercase English letters.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(s\)
\(t\)
#+end_example

*** Output

If there exists an integer \(i\) satisfying the following condition, print the minimum such \(i\); otherwise, print =-1=.

--------------

*** Sample Input 1

#+begin_example
contest
son
#+end_example

*** Sample Output 1

#+begin_example
10
#+end_example

\(t =\) =son= is a subsequence of the string =contestcon= (the first \(10\) characters in \(s' =\) =contestcontestcontest...=), so \(i = 10\) satisfies the condition.

On the other hand, \(t\) is not a subsequence of the string =contestco= (the first \(9\) characters in \(s'\)), so \(i = 9\) does not satisfy the condition.

Similarly, any integer less than \(9\) does not satisfy the condition, either. Thus, the minimum integer \(i\) satisfying the condition is \(10\).

--------------

*** Sample Input 2

#+begin_example
contest
programming
#+end_example

*** Sample Output 2

#+begin_example
-1
#+end_example

\(t =\) =programming= is not a substring of \(s' =\) =contestcontestcontest...=. Thus, there is no integer \(i\) satisfying the condition.

--------------

*** Sample Input 3

#+begin_example
contest
sentence
#+end_example

*** Sample Output 3

#+begin_example
33
#+end_example

Note that the answer may not fit into a \(32\)-bit integer type, though we cannot put such a case here.


** [[https://atcoder.jp/contests/abc137/tasks/abc137_d][D - Summer Vacation]]

Score : \(400\) points

*** Problem Statement

There are \(N\) one-off jobs available. If you take the \(i\)-th job and complete it, you will earn the reward of \(B_i\) after \(A_i\) days from the day you do it.

You can take and complete at most one of these jobs in a day.

However, you cannot retake a job that you have already done.

Find the maximum total reward that you can earn no later than \(M\) days from today.

You can already start working today.

*** Constraints

- All values in input are integers.
- \(1 \leq N \leq 10^5\)
- \(1 \leq M \leq 10^5\)
- \(1 \leq A_i \leq 10^5\)
- \(1 \leq B_i \leq 10^4\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(B_1\)
\(A_2\) \(B_2\)
\(\vdots\)
\(A_N\) \(B_N\)
#+end_example

*** Output

Print the maximum total reward that you can earn no later than \(M\) days from today.

--------------

*** Sample Input 1

#+begin_example
3 4
4 3
4 1
2 2
#+end_example

*** Sample Output 1

#+begin_example
5
#+end_example

You can earn the total reward of \(5\) by taking the jobs as follows:

- Take and complete the first job today. You will earn the reward of \(3\) after four days from today.
- Take and complete the third job tomorrow. You will earn the reward of \(2\) after two days from tomorrow, that is, after three days from today.

--------------

*** Sample Input 2

#+begin_example
5 3
1 2
1 3
1 4
2 1
2 3
#+end_example

*** Sample Output 2

#+begin_example
10
#+end_example

--------------

*** Sample Input 3

#+begin_example
1 1
2 1
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example


** [[https://atcoder.jp/contests/abc135/tasks/abc135_d][D - Digits Parade]]

Score : \(400\) points

*** Problem Statement

Given is a string \(S\). Each character in \(S\) is either a digit (=0=, ..., =9=) or =?=.

Among the integers obtained by replacing each occurrence of =?= with a digit, how many have a remainder of \(5\) when divided by \(13\)? An integer may begin with \(0\).

Since the answer can be enormous, print the count modulo \(10^9+7\).

*** Constraints

- \(S\) is a string consisting of digits (=0=, ..., =9=) and =?=.
- \(1 \leq |S| \leq 10^5\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(S\)
#+end_example

*** Output

Print the number of integers satisfying the condition, modulo \(10^9+7\).

--------------

*** Sample Input 1

#+begin_example
??2??5
#+end_example

*** Sample Output 1

#+begin_example
768
#+end_example

For example, \(482305, 002865,\) and \(972665\) satisfy the condition.

--------------

*** Sample Input 2

#+begin_example
?44
#+end_example

*** Sample Output 2

#+begin_example
1
#+end_example

Only \(044\) satisfies the condition.

--------------

*** Sample Input 3

#+begin_example
7?4
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

We may not be able to produce an integer satisfying the condition.

--------------

*** Sample Input 4

#+begin_example
?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???
#+end_example

*** Sample Output 4

#+begin_example
153716888
#+end_example


** DONE [[https://atcoder.jp/contests/abc134/tasks/abc134_e][E - Sequence Decomposing]]
CLOSED: [2024-09-23 Mon 19:22]

Score : \(500\) points

*** Problem Statement

You are given a sequence with \(N\) integers: \(A = \{ A_1, A_2, \cdots, A_N \}\). For each of these \(N\) integers, we will choose a color and paint the integer with that color. Here the following condition must be satisfied:

- If \(A_i\) and \(A_j\) \((i < j)\) are painted with the same color, \(A_i < A_j\).

Find the minimum number of colors required to satisfy the condition.

*** Constraints

- \(1 \leq N \leq 10^5\)
- \(0 \leq A_i \leq 10^9\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(A_1\)
\(:\)
\(A_N\)
#+end_example

*** Output

Print the minimum number of colors required to satisfy the condition.

--------------

*** Sample Input 1

#+begin_example
5
2
1
4
5
3
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

We can satisfy the condition with two colors by, for example, painting \(2\) and \(3\) red and painting \(1\), \(4\), and \(5\) blue.

--------------

*** Sample Input 2

#+begin_example
4
0
0
0
0
#+end_example

*** Sample Output 2

#+begin_example
4
#+end_example

We have to paint all the integers with distinct colors.


** [[https://atcoder.jp/contests/abc133/tasks/abc133_e][E - Virus Tree 2]]

Score : \(500\) points

*** Problem Statement

You are given a tree with \(N\) vertices and \(N-1\) edges. The vertices are numbered \(1\) to \(N\), and the \(i\)-th edge connects Vertex \(a_i\) and \(b_i\).

You have coloring materials of \(K\) colors. For each vertex in the tree, you will choose one of the \(K\) colors to paint it, so that the following condition is satisfied:

- If the distance between two different vertices \(x\) and \(y\) is less than or equal to two, \(x\) and \(y\) have different colors.

How many ways are there to paint the tree? Find the count modulo \(1\ 000\ 000\ 007\).

What is tree?

A tree is a kind of graph. For detail, please see: [[https://ja.wikipedia.org/wiki/%E6%9C%A8_(%E6%95%B0%E5%AD%A6)][Wikipedia "Tree (graph theory)"]]

What is distance?

The distance between two vertices \(x\) and \(y\) is the minimum number of edges one has to traverse to get from \(x\) to \(y\).

*** Constraints

- \(1 \leq N,K \leq 10^5\)
- \(1 \leq a_i,b_i \leq N\)
- The given graph is a tree.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(a_1\) \(b_1\)
\(a_2\) \(b_2\)
\(.\)
\(.\)
\(.\)
\(a_{N-1}\) \(b_{N-1}\)
#+end_example

*** Output

Print the number of ways to paint the tree, modulo \(1\ 000\ 000\ 007\).

--------------

*** Sample Input 1

#+begin_example
4 3
1 2
2 3
3 4
#+end_example

*** Sample Output 1

#+begin_example
6
#+end_example

[[https://img.atcoder.jp/ghi/491cd56a53e99ba7677ee4827b8f767a.png]]

There are six ways to paint the tree.

--------------

*** Sample Input 2

#+begin_example
5 4
1 2
1 3
1 4
4 5
#+end_example

*** Sample Output 2

#+begin_example
48
#+end_example

--------------

*** Sample Input 3

#+begin_example
16 22
12 1
3 1
4 16
7 12
6 2
2 15
5 16
14 16
10 11
3 10
3 13
8 6
16 8
9 12
4 3
#+end_example

*** Sample Output 3

#+begin_example
271414432
#+end_example


** DONE [[https://atcoder.jp/contests/abc131/tasks/abc131_e][E - Friendships]] [[file:20240710T095931--abc131-e-friendship__atcoder/main.c][solution.c]]
CLOSED: [2024-07-13 Sat 09:43]

Score: \(500\) points

*** Problem Statement

Does there exist an undirected graph with \(N\) vertices satisfying the following conditions?

- The graph is simple and connected.
- The vertices are numbered \(1, 2, ..., N\).
- Let \(M\) be the number of edges in the graph. The edges are numbered \(1, 2, ..., M\), the length of each edge is \(1\), and Edge \(i\) connects Vertex \(u_i\) and Vertex \(v_i\).
- There are exactly \(K\) pairs of vertices \((i,\ j)\ (i < j)\) such that the shortest distance between them is \(2\).

If there exists such a graph, construct an example.

*** Constraints

- All values in input are integers.
- \(2 \leq N \leq 100\)
- \(0 \leq K \leq \frac{N(N - 1)}{2}\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
#+end_example

*** Output

If there does not exist an undirected graph with \(N\) vertices satisfying the conditions, print =-1=.

If there exists such a graph, print an example in the following format (refer to Problem Statement for what the symbols stand for):

#+begin_example
\(M\)
\(u_1\) \(v_1\)
\(:\)
\(u_M\) \(v_M\)
#+end_example

If there exist multiple graphs satisfying the conditions, any of them will be accepted.

--------------

*** Sample Input 1

#+begin_example
5 3
#+end_example

*** Sample Output 1

#+begin_example
5
4 3
1 2
3 1
4 5
2 3
#+end_example

This graph has three pairs of vertices such that the shortest distance between them is \(2\): \((1,\ 4)\), \((2,\ 4)\), and \((3,\ 5)\). Thus, the condition is satisfied.

--------------

*** Sample Input 2

#+begin_example
5 8
#+end_example

*** Sample Output 2

#+begin_example
-1
#+end_example

There is no graph satisfying the conditions.


** [[https://atcoder.jp/contests/abc129/tasks/abc129_e][E - Sum Equals Xor]]

Score : \(500\) points

*** Problem Statement

You are given a positive integer \(L\) in base two. How many pairs of non-negative integers \((a, b)\) satisfy the following conditions?

- \(a + b \leq L\)
- \(a + b = a \text{ XOR } b\)

Since there can be extremely many such pairs, print the count modulo \(10^9 + 7\).

What is XOR?

The XOR of integers \(A\) and \(B\), \(A \text{ XOR } B\), is defined as follows:

- When \(A \text{ XOR } B\) is written in base two, the digit in the \(2^k\)'s place (\(k \geq 0\)) is \(1\) if either \(A\) or \(B\), but not both, has \(1\) in the \(2^k\)'s place, and \(0\) otherwise.

For example, \(3 \text{ XOR } 5 = 6\). (In base two: \(011 \text{ XOR } 101 = 110\).)

*** Constraints

- \(L\) is given in base two, without leading zeros.
- \(1 \leq L < 2^{100\ 001}\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(L\)
#+end_example

*** Output

Print the number of pairs \((a, b)\) that satisfy the conditions, modulo \(10^9 + 7\).

--------------

*** Sample Input 1

#+begin_example
10
#+end_example

*** Sample Output 1

#+begin_example
5
#+end_example

Five pairs \((a, b)\) satisfy the conditions: \((0, 0), (0, 1), (1, 0), (0, 2)\) and \((2, 0)\).

--------------

*** Sample Input 2

#+begin_example
1111111111111111111
#+end_example

*** Sample Output 2

#+begin_example
162261460
#+end_example


** [[https://atcoder.jp/contests/abc128/tasks/abc128_d][D - equeue]]

Score : \(400\) points

*** Problem Statement

Your friend gave you a dequeue \(D\) as a birthday present.

\(D\) is a horizontal cylinder that contains a row of \(N\) jewels.

The /values/ of the jewels are \(V_1, V_2, ..., V_N\) from left to right. There may be jewels with negative values.

In the beginning, you have no jewel in your hands.

You can perform at most \(K\) operations on \(D\), chosen from the following, at most \(K\) times (possibly zero):

- Operation A: Take out the leftmost jewel contained in \(D\) and have it in your hand. You cannot do this operation when \(D\) is empty.

- Operation B: Take out the rightmost jewel contained in \(D\) and have it in your hand. You cannot do this operation when \(D\) is empty.

- Operation C: Choose a jewel in your hands and insert it to the left end of \(D\). You cannot do this operation when you have no jewel in your hand.

- Operation D: Choose a jewel in your hands and insert it to the right end of \(D\). You cannot do this operation when you have no jewel in your hand.

Find the maximum possible sum of the values of jewels in your hands after the operations.

*** Constraints

- All values in input are integers.
- \(1 \leq N \leq 50\)
- \(1 \leq K \leq 100\)
- \(-10^7 \leq V_i \leq 10^7\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(V_1\) \(V_2\) \(...\) \(V_N\)
#+end_example

*** Output

Print the maximum possible sum of the values of jewels in your hands after the operations.

--------------

*** Sample Input 1

#+begin_example
6 4
-10 8 2 1 2 6
#+end_example

*** Sample Output 1

#+begin_example
14
#+end_example

After the following sequence of operations, you have two jewels of values \(8\) and \(6\) in your hands for a total of \(14\), which is the maximum result.

- Do operation A. You take out the jewel of value \(-10\) from the left end of \(D\).
- Do operation B. You take out the jewel of value \(6\) from the right end of \(D\).
- Do operation A. You take out the jewel of value \(8\) from the left end of \(D\).
- Do operation D. You insert the jewel of value \(-10\) to the right end of \(D\).

--------------

*** Sample Input 2

#+begin_example
6 4
-6 -100 50 -2 -5 -3
#+end_example

*** Sample Output 2

#+begin_example
44
#+end_example

--------------

*** Sample Input 3

#+begin_example
6 3
-6 -100 50 -2 -5 -3
#+end_example

*** Sample Output 3

#+begin_example
0
#+end_example

It is optimal to do no operation.


** [[https://atcoder.jp/contests/abc126/tasks/abc126_d][D - Even Relation]]

Score : \(400\) points

*** Problem Statement

We have a tree with \(N\) vertices numbered \(1\) to \(N\). The \(i\)-th edge in the tree connects Vertex \(u_i\) and Vertex \(v_i\), and its length is \(w_i\). Your objective is to paint each vertex in the tree white or black (it is fine to paint all vertices the same color) so that the following condition is satisfied:

- For any two vertices painted in the same color, the distance between them is an even number.

Find a coloring of the vertices that satisfies the condition and print it. It can be proved that at least one such coloring exists under the constraints of this problem.

*** Constraints

- All values in input are integers.
- \(1 \leq N \leq 10^5\)
- \(1 \leq u_i < v_i \leq N\)
- \(1 \leq w_i \leq 10^9\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
\(u_1\) \(v_1\) \(w_1\)
\(u_2\) \(v_2\) \(w_2\)
\(.\)
\(.\)
\(.\)
\(u_{N - 1}\) \(v_{N - 1}\) \(w_{N - 1}\)
#+end_example

*** Output

Print a coloring of the vertices that satisfies the condition, in \(N\) lines. The \(i\)-th line should contain =0= if Vertex \(i\) is painted white and =1= if it is painted black.

If there are multiple colorings that satisfy the condition, any of them will be accepted.

--------------

*** Sample Input 1

#+begin_example
3
1 2 2
2 3 1
#+end_example

*** Sample Output 1

#+begin_example
0
0
1
#+end_example

--------------

*** Sample Input 2

#+begin_example
5
2 5 2
2 3 10
1 3 8
3 4 2
#+end_example

*** Sample Output 2

#+begin_example
1
0
1
0
1
#+end_example


** [[https://atcoder.jp/contests/abc126/tasks/abc126_e][E - 1 or 2]]

Score : \(500\) points

*** Problem Statement

There are \(N\) cards placed face down in a row. On each card, an integer \(1\) or \(2\) is written.

Let \(A_i\) be the integer written on the \(i\)-th card.

Your objective is to guess \(A_1, A_2, ..., A_N\) correctly.

You know the following facts:

- For each \(i = 1, 2, ..., M\), the value \(A_{X_i} + A_{Y_i} + Z_i\) is an even number.

You are a magician and can use the following magic any number of times:

*Magic*: Choose one card and know the integer \(A_i\) written on it. The cost of using this magic is \(1\).

What is the minimum cost required to determine all of \(A_1, A_2, ..., A_N\)?

It is guaranteed that there is no contradiction in given input.

*** Constraints

- All values in input are integers.
- \(2 \leq N \leq 10^5\)
- \(1 \leq M \leq 10^5\)
- \(1 \leq X_i < Y_i \leq N\)
- \(1 \leq Z_i \leq 100\)
- The pairs \((X_i, Y_i)\) are distinct.
- There is no contradiction in input. (That is, there exist integers \(A_1, A_2, ..., A_N\) that satisfy the conditions.)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(X_1\) \(Y_1\) \(Z_1\)
\(X_2\) \(Y_2\) \(Z_2\)
\(\vdots\)
\(X_M\) \(Y_M\) \(Z_M\)
#+end_example

*** Output

Print the minimum total cost required to determine all of \(A_1, A_2, ..., A_N\).

--------------

*** Sample Input 1

#+begin_example
3 1
1 2 1
#+end_example

*** Sample Output 1

#+begin_example
2
#+end_example

You can determine all of \(A_1, A_2, A_3\) by using the magic for the first and third cards.

--------------

*** Sample Input 2

#+begin_example
6 5
1 2 1
2 3 2
1 3 3
4 5 4
5 6 5
#+end_example

*** Sample Output 2

#+begin_example
2
#+end_example

--------------

*** Sample Input 3

#+begin_example
100000 1
1 100000 100
#+end_example

*** Sample Output 3

#+begin_example
99999
#+end_example


** [[https://atcoder.jp/contests/abc123/tasks/abc123_d][D - Cake 123]]

Score: \(400\) points

*** Problem Statement

The Patisserie AtCoder sells cakes with number-shaped candles. There are \(X\), \(Y\) and \(Z\) kinds of cakes with \(1\)-shaped, \(2\)-shaped and \(3\)-shaped candles, respectively. Each cake has an integer value called /deliciousness/, as follows:

- The deliciousness of the cakes with \(1\)-shaped candles are \(A_1, A_2, ..., A_X\).
- The deliciousness of the cakes with \(2\)-shaped candles are \(B_1, B_2, ..., B_Y\).
- The deliciousness of the cakes with \(3\)-shaped candles are \(C_1, C_2, ..., C_Z\).

Takahashi decides to buy three cakes, one for each of the three shapes of the candles, to celebrate ABC 123.\\
There are \(X \times Y \times Z\) such ways to choose three cakes.\\
We will arrange these \(X \times Y \times Z\) ways in descending order of the sum of the deliciousness of the cakes.\\
Print the sums of the deliciousness of the cakes for the first, second, \(...\), \(K\)-th ways in this list.

*** Constraints

- \(1 \leq X \leq 1 \ 000\)
- \(1 \leq Y \leq 1 \ 000\)
- \(1 \leq Z \leq 1 \ 000\)
- \(1 \leq K \leq \min(3 \ 000, X \times Y \times Z)\)
- \(1 \leq A_i \leq 10 \ 000 \ 000 \ 000\)
- \(1 \leq B_i \leq 10 \ 000 \ 000 \ 000\)
- \(1 \leq C_i \leq 10 \ 000 \ 000 \ 000\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(X\) \(Y\) \(Z\) \(K\)
\(A_1 \ A_2 \ A_3 \ ... \ A_X\)
\(B_1 \ B_2 \ B_3 \ ... \ B_Y\)
\(C_1 \ C_2 \ C_3 \ ... \ C_Z\)
#+end_example

*** Output

Print \(K\) lines. The \(i\)-th line should contain the \(i\)-th value stated in the problem statement.

--------------

*** Sample Input 1

#+begin_example
2 2 2 8
4 6
1 5
3 8
#+end_example

*** Sample Output 1

#+begin_example
19
17
15
14
13
12
10
8
#+end_example

There are \(2 \times 2 \times 2 = 8\) ways to choose three cakes, as shown below in descending order of the sum of the deliciousness of the cakes:

- \((A_2, B_2, C_2)\): \(6 + 5 + 8 = 19\)
- \((A_1, B_2, C_2)\): \(4 + 5 + 8 = 17\)
- \((A_2, B_1, C_2)\): \(6 + 1 + 8 = 15\)
- \((A_2, B_2, C_1)\): \(6 + 5 + 3 = 14\)
- \((A_1, B_1, C_2)\): \(4 + 1 + 8 = 13\)
- \((A_1, B_2, C_1)\): \(4 + 5 + 3 = 12\)
- \((A_2, B_1, C_1)\): \(6 + 1 + 3 = 10\)
- \((A_1, B_1, C_1)\): \(4 + 1 + 3 = 8\)

--------------

*** Sample Input 2

#+begin_example
3 3 3 5
1 10 100
2 20 200
1 10 100
#+end_example

*** Sample Output 2

#+begin_example
400
310
310
301
301
#+end_example

There may be multiple combinations of cakes with the same sum of the deliciousness. For example, in this test case, the sum of \(A_1, B_3, C_3\) and the sum of \(A_3, B_3, C_1\) are both \(301\). However, they are different ways of choosing cakes, so \(301\) occurs twice in the output.

--------------

*** Sample Input 3

#+begin_example
10 10 10 20
7467038376 5724769290 292794712 2843504496 3381970101 8402252870 249131806 6310293640 6690322794 6082257488
1873977926 2576529623 1144842195 1379118507 6003234687 4925540914 3902539811 3326692703 484657758 2877436338
4975681328 8974383988 2882263257 7690203955 514305523 6679823484 4263279310 585966808 3752282379 620585736
#+end_example

*** Sample Output 3

#+begin_example
23379871545
22444657051
22302177772
22095691512
21667941469
21366963278
21287912315
21279176669
21160477018
21085311041
21059876163
21017997739
20703329561
20702387965
20590247696
20383761436
20343962175
20254073196
20210218542
20150096547
#+end_example

Note that the input or output may not fit into a \(32\)-bit integer type.


** [[https://atcoder.jp/contests/abc122/tasks/abc122_d][D - We Like AGC]]

Score : \(400\) points

*** Problem Statement

You are given an integer \(N\). Find the number of strings of length \(N\) that satisfy the following conditions, modulo \(10^9+7\):

- The string does not contain characters other than =A=, =C=, =G= and =T=.
- The string does not contain =AGC= as a substring.
- The condition above cannot be violated by swapping two adjacent characters once.

*** Notes

A substring of a string \(T\) is a string obtained by removing zero or more characters from the beginning and the end of \(T\).

For example, the substrings of =ATCODER= include =TCO=, =AT=, =CODER=, =ATCODER= and (the empty string), but not =AC=.

*** Constraints

- \(3 \leq N \leq 100\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
#+end_example

*** Output

Print the number of strings of length \(N\) that satisfy the following conditions, modulo \(10^9+7\).

--------------

*** Sample Input 1

#+begin_example
3
#+end_example

*** Sample Output 1

#+begin_example
61
#+end_example

There are \(4^3 = 64\) strings of length \(3\) that do not contain characters other than =A=, =C=, =G= and =T=. Among them, only =AGC=, =ACG= and =GAC= violate the condition, so the answer is \(64 - 3 = 61\).

--------------

*** Sample Input 2

#+begin_example
4
#+end_example

*** Sample Output 2

#+begin_example
230
#+end_example

--------------

*** Sample Input 3

#+begin_example
100
#+end_example

*** Sample Output 3

#+begin_example
388130742
#+end_example

Be sure to print the number of strings modulo \(10^9+7\).


** [[https://atcoder.jp/contests/abc120/tasks/abc120_d][D - Decayed Bridges]]

Score : \(400\) points

*** Problem Statement

There are \(N\) islands and \(M\) bridges.

The \(i\)-th bridge connects the \(A_i\)-th and \(B_i\)-th islands bidirectionally.

Initially, we can travel between any two islands using some of these bridges.

However, the results of a survey show that these bridges will all collapse because of aging, in the order from the first bridge to the \(M\)-th bridge.

Let the *inconvenience* be the number of pairs of islands \((a, b)\) (\(a < b\)) such that we are no longer able to travel between the \(a\)-th and \(b\)-th islands using some of the bridges remaining.

For each \(i\) \((1 \leq i \leq M)\), find the inconvenience just after the \(i\)-th bridge collapses.

*** Constraints

- All values in input are integers.
- \(2 \leq N \leq 10^5\)
- \(1 \leq M \leq 10^5\)
- \(1 \leq A_i < B_i \leq N\)
- All pairs \((A_i, B_i)\) are distinct.
- The inconvenience is initially \(0\).

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(M\)
\(A_1\) \(B_1\)
\(A_2\) \(B_2\)
\(\vdots\)
\(A_M\) \(B_M\)
#+end_example

*** Output

In the order \(i = 1, 2, ..., M\), print the inconvenience just after the \(i\)-th bridge collapses. Note that the answer may not fit into a \(32\)-bit integer type.

--------------

*** Sample Input 1

#+begin_example
4 5
1 2
3 4
1 3
2 3
1 4
#+end_example

*** Sample Output 1

#+begin_example
0
0
4
5
6
#+end_example

For example, when the first to third bridges have collapsed, the inconvenience is \(4\) since we can no longer travel between the pairs \((1, 2), (1, 3), (2, 4)\) and \((3, 4)\).

--------------

*** Sample Input 2

#+begin_example
6 5
2 3
1 2
5 6
3 4
4 5
#+end_example

*** Sample Output 2

#+begin_example
8
9
12
14
15
#+end_example

--------------

*** Sample Input 3

#+begin_example
2 1
1 2
#+end_example

*** Sample Output 3

#+begin_example
1
#+end_example


** [[https://atcoder.jp/contests/abc119/tasks/abc119_c][C - Synthetic Kadomatsu]]

Score : \(300\) points

*** Problem Statement

You have \(N\) bamboos. The lengths (in centimeters) of these are \(l_1, l_2, ..., l_N\), respectively.

Your objective is to use some of these bamboos (possibly all) to obtain three bamboos of length \(A, B, C\). For that, you can use the following three kinds of magics any number:

- Extension Magic: Consumes \(1\) /MP/ (magic point). Choose one bamboo and increase its length by \(1\).
- Shortening Magic: Consumes \(1\) MP. Choose one bamboo of length at least \(2\) and decrease its length by \(1\).
- Composition Magic: Consumes \(10\) MP. Choose two bamboos and combine them into one bamboo. The length of this new bamboo is equal to the sum of the lengths of the two bamboos combined. (Afterwards, further magics can be used on this bamboo.)

At least how much MP is needed to achieve the objective?

*** Constraints

- \(3 \leq N \leq 8\)
- \(1 \leq C < B < A \leq 1000\)
- \(1 \leq l_i \leq 1000\)
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(A\) \(B\) \(C\)
\(l_1\)
\(l_2\)
\(:\)
\(l_N\)
#+end_example

*** Output

Print the minimum amount of MP needed to achieve the objective.

--------------

*** Sample Input 1

#+begin_example
5 100 90 80
98
40
30
21
80
#+end_example

*** Sample Output 1

#+begin_example
23
#+end_example

We are obtaining three bamboos of lengths \(100, 90, 80\) from five bamboos \(98, 40, 30, 21, 80\). We already have a bamboo of length \(80\), and we can obtain bamboos of lengths \(100, 90\) by using the magics as follows at the total cost of \(23\) MP, which is optimal.

1. Use Extension Magic twice on the bamboo of length \(98\) to obtain a bamboo of length \(100\). (MP consumed: \(2\))
2. Use Composition Magic on the bamboos of lengths \(40, 30\) to obtain a bamboo of length \(70\). (MP consumed: \(10\))
3. Use Shortening Magic once on the bamboo of length \(21\) to obtain a bamboo of length \(20\). (MP consumed: \(1\))
4. Use Composition Magic on the bamboo of length \(70\) obtained in step 2 and the bamboo of length \(20\) obtained in step 3 to obtain a bamboo of length \(90\). (MP consumed: \(10\))

--------------

*** Sample Input 2

#+begin_example
8 100 90 80
100
100
90
90
90
80
80
80
#+end_example

*** Sample Output 2

#+begin_example
0
#+end_example

If we already have all bamboos of the desired lengths, the amount of MP needed is \(0\). As seen here, we do not necessarily need to use all the bamboos.

--------------

*** Sample Input 3

#+begin_example
8 1000 800 100
300
333
400
444
500
555
600
666
#+end_example

*** Sample Output 3

#+begin_example
243
#+end_example


** [[https://atcoder.jp/contests/abc119/tasks/abc119_d][D - Lazy Faith]]

Score : \(400\) points

*** Problem Statement

Along a road running in an east-west direction, there are \(A\) shrines and \(B\) temples. The \(i\)-th shrine from the west is located at a distance of \(s_i\) meters from the west end of the road, and the \(i\)-th temple from the west is located at a distance of \(t_i\) meters from the west end of the road.

Answer the following \(Q\) queries:

- Query \(i\) (\(1 \leq i \leq Q\)): If we start from a point at a distance of \(x_i\) meters from the west end of the road and freely travel along the road, what is the minimum distance that needs to be traveled in order to visit one shrine and one temple? (It is allowed to pass by more shrines and temples than required.)

*** Constraints

- \(1 \leq A, B \leq 10^5\)
- \(1 \leq Q \leq 10^5\)
- \(1 \leq s_1 < s_2 < ... < s_A \leq 10^{10}\)
- \(1 \leq t_1 < t_2 < ... < t_B \leq 10^{10}\)
- \(1 \leq x_i \leq 10^{10}\)
- \(s_1, ..., s_A, t_1, ..., t_B, x_1, ..., x_Q\) are all different.
- All values in input are integers.

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(A\) \(B\) \(Q\)
\(s_1\)
\(:\)
\(s_A\)
\(t_1\)
\(:\)
\(t_B\)
\(x_1\)
\(:\)
\(x_Q\)
#+end_example

*** Output

Print \(Q\) lines. The \(i\)-th line should contain the answer to the \(i\)-th query.

--------------

*** Sample Input 1

#+begin_example
2 3 4
100
600
400
900
1000
150
2000
899
799
#+end_example

*** Sample Output 1

#+begin_example
350
1400
301
399
#+end_example

There are two shrines and three temples. The shrines are located at distances of \(100, 600\) meters from the west end of the road, and the temples are located at distances of \(400, 900, 1000\) meters from the west end of the road.

- Query \(1\): If we start from a point at a distance of \(150\) meters from the west end of the road, the optimal move is first to walk \(50\) meters west to visit a shrine, then to walk \(300\) meters east to visit a temple.
- Query \(2\): If we start from a point at a distance of \(2000\) meters from the west end of the road, the optimal move is first to walk \(1000\) meters west to visit a temple, then to walk \(400\) meters west to visit a shrine. We will pass by another temple on the way, but it is fine.
- Query \(3\): If we start from a point at a distance of \(899\) meters from the west end of the road, the optimal move is first to walk \(1\) meter east to visit a temple, then to walk \(300\) meters west to visit a shrine.
- Query \(4\): If we start from a point at a distance of \(799\) meters from the west end of the road, the optimal move is first to walk \(199\) meters west to visit a shrine, then to walk \(200\) meters west to visit a temple.

--------------

*** Sample Input 2

#+begin_example
1 1 3
1
10000000000
2
9999999999
5000000000
#+end_example

*** Sample Output 2

#+begin_example
10000000000
10000000000
14999999998
#+end_example

The road is quite long, and we may need to travel a distance that does not fit into a \(32\)-bit integer.


** DONE [[https://atcoder.jp/contests/abc117/tasks/abc117_d][D - XXOR]]
CLOSED: [2025-05-31 Sat 00:36]
:LOGBOOK:
CLOCK: [2025-05-25 Sun 16:50]--[2025-05-25 Sun 21:40] =>  4:50
:END:

Score : \(400\) points

*** Problem Statement

You are given \(N\) non-negative integers \(A_1, A_2, ..., A_N\) and
another non-negative integer \(K\).

For a integer \(X\) between \(0\) and \(K\) (inclusive), let \(f(X) = (X\) XOR \(A_1)\) + \((X\) XOR \(A_2)\) \(+\) \(...\) \(+\) \((X\) XOR \(A_N)\).

Here, for non-negative integers \(a\) and \(b\), \(a\) XOR \(b\)
denotes the bitwise exclusive OR of \(a\) and \(b\).

Find the maximum value of \(f\).

What is XOR?

The bitwise exclusive OR of \(a\) and \(b\), \(X\), is defined as
follows:

- When \(X\) is written in base two, the digit in the \(2^k\)'s place
  (\(k \geq 0\)) is \(1\) if, when written in base two, exactly one of
  \(A\) and \(B\) has \(1\) in the \(2^k\)'s place, and \(0\)
  otherwise.

For example, \(3\) XOR \(5 = 6\). (When written in base two: \(011\)
XOR \(101 = 110\).)

*** Constraints

- All values in input are integers.
- \(1 \leq N \leq 10^5\)
- \(0 \leq K \leq 10^{12}\)
- \(0 \leq A_i \leq 10^{12}\)

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\) \(K\)
\(A_1\) \(A_2\) \(...\) \(A_N\)
#+end_example

*** Output

Print the maximum value of \(f\).

--------------

*** Sample Input 1

#+begin_example
3 7
1 6 3
#+end_example

*** Sample Output 1

#+begin_example
14
#+end_example

The maximum value is: \(f(4) = (4\) XOR \(1) + (4\) XOR \(6) + (4\) XOR \(3) = 5 + 2 + 7 = 14\).

--------------

*** Sample Input 2

#+begin_example
4 9
7 4 0 3
#+end_example

*** Sample Output 2

#+begin_example
46
#+end_example

--------------

*** Sample Input 3

#+begin_example
1 0
1000000000000
#+end_example

*** Sample Output 3

#+begin_example
1000000000000
#+end_example


** DONE [[https://atcoder.jp/contests/abc114/tasks/abc114_d][D - 756]]
CLOSED: [2025-04-05 Sat 14:28]

Score : \(400\) points

*** Problem Statement

You are given an integer \(N\). Among the divisors of \(N!\) \((= 1 \times 2 \times ... \times N)\), how many /Shichi-Go numbers/ (literally "Seven-Five numbers") are there?

Here, a Shichi-Go number is a positive integer that has exactly \(75\) divisors.

*** Constraints

- \(1 \leq N \leq 100\)
- \(N\) is an integer.

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(N\)
#+end_example

*** Output

Print the number of the Shichi-Go numbers that are divisors of \(N!\).

*** Sample Input 1

#+begin_example
9
#+end_example

*** Sample Output 1

#+begin_example
0
#+end_example

There are no Shichi-Go numbers among the divisors of \(9! = 1 \times 2 \times ... \times 9 = 362880\).

*** Sample Input 2

#+begin_example
10
#+end_example

*** Sample Output 2

#+begin_example
1
#+end_example

There is one Shichi-Go number among the divisors of \(10! = 3628800\): \(32400\).

*** Sample Input 3

#+begin_example
100
#+end_example

*** Sample Output 3

#+begin_example
543
#+end_example


** DONE [[https://atcoder.jp/contests/abc113/tasks/abc113_d][D - Number of Amidakuji]]
CLOSED: [2025-03-22 Sat 16:32]

Score: \(400\) points

*** Problem Statement

Amidakuji is a traditional method of lottery in Japan.

To make an amidakuji, we first draw \(W\) parallel vertical lines, and then draw horizontal lines that connect them. The length of each vertical line is \(H+1\) [cm], and the endpoints of the horizontal lines must be at \(1, 2, 3, ...,\) or \(H\) [cm] from the top of a vertical line.

A /valid amidakuji/ is an amidakuji that satisfies the following conditions:

- No two horizontal lines share an endpoint.
- The two endpoints of each horizontal lines must be at the same height.
- A horizontal line must connect adjacent vertical lines.

[[https://img.atcoder.jp/ghi/6b3e1470b9c551e0b7cfdcd802f300b3.png]]

Find the number of the valid amidakuji that satisfy the following condition, modulo \(1\ 000\ 000\ 007\): if we trace the path from the top of the leftmost vertical line to the bottom, always following horizontal lines when we encounter them, we reach the bottom of the \(K\)-th vertical line from the left.

For example, in the following amidakuji, we will reach the bottom of the fourth vertical line from the left.

[[https://img.atcoder.jp/ghi/d40ccbb88ee2ac60a6239c11b16ceb40.png]]

*** Constraints

- \(H\) is an integer between \(1\) and \(100\) (inclusive).
- \(W\) is an integer between \(1\) and \(8\) (inclusive).
- \(K\) is an integer between \(1\) and \(W\) (inclusive).

--------------

*** Input

Input is given from Standard Input in the following format:

#+begin_example
\(H\) \(W\) \(K\)
#+end_example

*** Output

Print the number of the amidakuji that satisfy the condition, modulo \(1\ 000\ 000\ 007\).

--------------

*** Sample Input 1

#+begin_example
1 3 2
#+end_example

*** Sample Output 1

#+begin_example
1
#+end_example

Only the following one amidakuji satisfies the condition:

[[https://img.atcoder.jp/ghi/c68c6daccfc4cba8bc94af5f1a80ef2f.png]]

--------------

*** Sample Input 2

#+begin_example
1 3 1
#+end_example

*** Sample Output 2

#+begin_example
2
#+end_example

Only the following two amidakuji satisfy the condition:

[[https://img.atcoder.jp/ghi/4be150946de8bef9b14d9bc17814d963.png]]

--------------

*** Sample Input 3

#+begin_example
2 3 3
#+end_example

*** Sample Output 3

#+begin_example
1
#+end_example

Only the following one amidakuji satisfies the condition:

[[https://img.atcoder.jp/ghi/9b2e9f49832458c3488b1e04afd51ed4.png]]

--------------

*** Sample Input 4

#+begin_example
2 3 1
#+end_example

*** Sample Output 4

#+begin_example
5
#+end_example

Only the following five amidakuji satisfy the condition:

[[https://img.atcoder.jp/ghi/bf6ec766f8923ac2f082f538a6c736b6.png]]

--------------

*** Sample Input 5

#+begin_example
7 1 1
#+end_example

*** Sample Output 5

#+begin_example
1
#+end_example

As there is only one vertical line, we cannot draw any horizontal lines. Thus, there is only one amidakuji that satisfies the condition: the amidakuji with no horizontal lines.

--------------

*** Sample Input 6

#+begin_example
15 8 5
#+end_example

*** Sample Output 6

#+begin_example
437760187
#+end_example

Be sure to print the answer modulo \(1\ 000\ 000\ 007\).


* Fetch problem                                                    :noexport:

#+begin_src emacs-lisp
      (defun atcoder-problem-statement (url)
        (save-current-buffer
          (eww url)
          (sit-for 3)
          (eww-view-source)
          (search-forward "lang-en")
          (beginning-of-line)
          (html-ts-mode)
          (let ((bounds (bounds-of-thing-at-point 'defun)))
            (kill-ring-save (car bounds) (cdr bounds)))
          (with-temp-buffer
            (insert (current-kill 0)) ; html

            ; transform <var>...</var> to <span class="math">...</span> for pandoc to recognize math expressions.
            (goto-char (point-min))
            (while (search-forward "<var>" nil t)
              (replace-match "<span class=\"math\">\\(" nil t))
            (goto-char (point-min))
            (while (search-forward "</var>" nil t)
              (replace-match "\\)</span>" nil t))

            (let ((stderr-file (make-temp-file "org-web-tools-pandoc-stderr")))
              (unwind-protect
                  (if (not (zerop (call-process-region (point-min) (point-max) "pandoc"
                                                       t (list t stderr-file) nil
                                                       "--verbose"
                                                       (org-web-tools--pandoc-no-wrap-option)
                                                       "-f" "html-raw_html-native_divs" "-t" "org")))
                      (progn
                        (delete-region (point-min) (point-max))
                        (insert-file-contents stderr-file)
                        (error "Pandoc failed: %s" (buffer-string)))
                    (org-mode)
                    (org-web-tools--clean-pandoc-output)
                    (buffer-string))
                (delete-file stderr-file)
                (kill-buffer "*eww*")
                (kill-buffer "*eww-source*")))
            )))
#+end_src

#+results:
: atcoder-problem-statement

#+begin_src emacs-lisp
  (defun insert-atcoder-problem-as-org-entry (url)
    (insert "\n\n")
    (insert "** ")
    (org-web-tools-insert-link-for-url url)
    (insert "\n\n")
    (insert (atcoder-problem-statement url)))
#+end_src

#+results:
: insert-atcoder-problem-as-org-entry


#+begin_src emacs-lisp
  (setq atcoder-1200-problems '("https://atcoder.jp/contests/abc275/tasks/abc275_e"
                                "https://atcoder.jp/contests/abc274/tasks/abc274_e"
                                "https://atcoder.jp/contests/abc272/tasks/abc272_e"
                                "https://atcoder.jp/contests/abc271/tasks/abc271_e"
                                "https://atcoder.jp/contests/abc270/tasks/abc270_d"
                                "https://atcoder.jp/contests/abc270/tasks/abc270_e"
                                "https://atcoder.jp/contests/abc268/tasks/abc268_d"
                                "https://atcoder.jp/contests/abc267/tasks/abc267_e"
                                "https://atcoder.jp/contests/abc266/tasks/abc266_e"
                                "https://atcoder.jp/contests/abc266/tasks/abc266_f"
                                "https://atcoder.jp/contests/abc265/tasks/abc265_e"
                                "https://atcoder.jp/contests/abc264/tasks/abc264_e"
                                "https://atcoder.jp/contests/abc262/tasks/abc262_d"
                                "https://atcoder.jp/contests/abc261/tasks/abc261_e"
                                "https://atcoder.jp/contests/abc261/tasks/abc261_f"
                                "https://atcoder.jp/contests/abc259/tasks/abc259_e"
                                "https://atcoder.jp/contests/abc258/tasks/abc258_e"
                                "https://atcoder.jp/contests/abc257/tasks/abc257_d"
                                "https://atcoder.jp/contests/abc257/tasks/abc257_e"
                                "https://atcoder.jp/contests/abc256/tasks/abc256_e"
                                "https://atcoder.jp/contests/abc255/tasks/abc255_e"
                                "https://atcoder.jp/contests/abc254/tasks/abc254_e"
                                "https://atcoder.jp/contests/abc252/tasks/abc252_e"
                                "https://atcoder.jp/contests/abc251/tasks/abc251_d"
                                "https://atcoder.jp/contests/abc251/tasks/abc251_e"
                                "https://atcoder.jp/contests/abc250/tasks/abc250_e"
                                "https://atcoder.jp/contests/abc248/tasks/abc248_e"
                                "https://atcoder.jp/contests/abc247/tasks/abc247_e"
                                "https://atcoder.jp/contests/abc246/tasks/abc246_e"
                                "https://atcoder.jp/contests/abc245/tasks/abc245_e"
                                "https://atcoder.jp/contests/abc245/tasks/abc245_f"
                                "https://atcoder.jp/contests/abc242/tasks/abc242_d"
                                "https://atcoder.jp/contests/abc242/tasks/abc242_e"
                                "https://atcoder.jp/contests/abc241/tasks/abc241_e"
                                "https://atcoder.jp/contests/abc240/tasks/abc240_f"
                                "https://atcoder.jp/contests/abc238/tasks/abc238_e"
                                "https://atcoder.jp/contests/abc237/tasks/abc237_e"
                                "https://atcoder.jp/contests/abc235/tasks/abc235_e"
                                "https://atcoder.jp/contests/abc234/tasks/abc234_f"
                                "https://atcoder.jp/contests/abc232/tasks/abc232_e"
                                "https://atcoder.jp/contests/abc231/tasks/abc231_f"
                                "https://atcoder.jp/contests/abc228/tasks/abc228_e"
                                "https://atcoder.jp/contests/abc226/tasks/abc226_e"
                                "https://atcoder.jp/contests/abc224/tasks/abc224_d"
                                "https://atcoder.jp/contests/abc223/tasks/abc223_e"
                                "https://atcoder.jp/contests/abc222/tasks/abc222_e"
                                "https://atcoder.jp/contests/abc221/tasks/abc221_e"
                                "https://atcoder.jp/contests/abc220/tasks/abc220_e"
                                "https://atcoder.jp/contests/abc220/tasks/abc220_f"
                                "https://atcoder.jp/contests/abc216/tasks/abc216_f"
                                "https://atcoder.jp/contests/abc215/tasks/abc215_e"
                                "https://atcoder.jp/contests/abc214/tasks/abc214_d"
                                "https://atcoder.jp/contests/abc213/tasks/abc213_e"
                                "https://atcoder.jp/contests/abc212/tasks/abc212_e"
                                "https://atcoder.jp/contests/abc210/tasks/abc210_d"
                                "https://atcoder.jp/contests/abc201/tasks/abc201_d"
                                "https://atcoder.jp/contests/abc200/tasks/abc200_d"
                                "https://atcoder.jp/contests/abc198/tasks/abc198_d"
                                "https://atcoder.jp/contests/abc197/tasks/abc197_e"
                                "https://atcoder.jp/contests/abc196/tasks/abc196_d"
                                "https://atcoder.jp/contests/abc192/tasks/abc192_d"
                                "https://atcoder.jp/contests/abc191/tasks/abc191_e"
                                "https://atcoder.jp/contests/abc190/tasks/abc190_f"
                                "https://atcoder.jp/contests/abc189/tasks/abc189_e"
                                "https://atcoder.jp/contests/abc187/tasks/abc187_e"
                                "https://atcoder.jp/contests/abc186/tasks/abc186_e"
                                "https://atcoder.jp/contests/abc185/tasks/abc185_e"
                                "https://atcoder.jp/contests/abc184/tasks/abc184_d"
                                "https://atcoder.jp/contests/abc184/tasks/abc184_e"
                                "https://atcoder.jp/contests/abc184/tasks/abc184_f"
                                "https://atcoder.jp/contests/abc183/tasks/abc183_e"
                                "https://atcoder.jp/contests/abc183/tasks/abc183_f"
                                "https://atcoder.jp/contests/abc180/tasks/abc180_e"
                                "https://atcoder.jp/contests/abc179/tasks/abc179_d"
                                "https://atcoder.jp/contests/abc176/tasks/abc176_d"
                                "https://atcoder.jp/contests/abc176/tasks/abc176_e"
                                "https://atcoder.jp/contests/abc175/tasks/abc175_d"
                                "https://atcoder.jp/contests/abc175/tasks/abc175_e"
                                "https://atcoder.jp/contests/abc174/tasks/abc174_e"
                                "https://atcoder.jp/contests/abc174/tasks/abc174_f"
                                "https://atcoder.jp/contests/abc170/tasks/abc170_e"
                                "https://atcoder.jp/contests/abc169/tasks/abc169_e"
                                "https://atcoder.jp/contests/abc167/tasks/abc167_e"
                                "https://atcoder.jp/contests/abc164/tasks/abc164_d"
                                "https://atcoder.jp/contests/abc161/tasks/abc161_f"
                                "https://atcoder.jp/contests/abc159/tasks/abc159_e"
                                "https://atcoder.jp/contests/abc157/tasks/abc157_d"
                                "https://atcoder.jp/contests/abc157/tasks/abc157_e"
                                "https://atcoder.jp/contests/abc156/tasks/abc156_e"
                                "https://atcoder.jp/contests/abc155/tasks/abc155_e"
                                "https://atcoder.jp/contests/abc154/tasks/abc154_e"
                                "https://atcoder.jp/contests/abc153/tasks/abc153_f"
                                "https://atcoder.jp/contests/abc152/tasks/abc152_e"
                                "https://atcoder.jp/contests/abc151/tasks/abc151_e"
                                "https://atcoder.jp/contests/abc150/tasks/abc150_d"
                                "https://atcoder.jp/contests/abc148/tasks/abc148_f"
                                "https://atcoder.jp/contests/abc147/tasks/abc147_d"
                                "https://atcoder.jp/contests/abc146/tasks/abc146_f"
                                "https://atcoder.jp/contests/abc145/tasks/abc145_e"
                                "https://atcoder.jp/contests/abc144/tasks/abc144_e"
                                "https://atcoder.jp/contests/abc142/tasks/abc142_e"
                                "https://atcoder.jp/contests/abc141/tasks/abc141_e"
                                "https://atcoder.jp/contests/abc139/tasks/abc139_e"
                                "https://atcoder.jp/contests/abc138/tasks/abc138_e"
                                "https://atcoder.jp/contests/abc137/tasks/abc137_d"
                                "https://atcoder.jp/contests/abc135/tasks/abc135_d"
                                "https://atcoder.jp/contests/abc134/tasks/abc134_e"
                                "https://atcoder.jp/contests/abc133/tasks/abc133_e"
                                "https://atcoder.jp/contests/abc131/tasks/abc131_e"
                                "https://atcoder.jp/contests/abc129/tasks/abc129_e"
                                "https://atcoder.jp/contests/abc128/tasks/abc128_d"
                                "https://atcoder.jp/contests/abc126/tasks/abc126_d"
                                "https://atcoder.jp/contests/abc126/tasks/abc126_e"
                                "https://atcoder.jp/contests/abc123/tasks/abc123_d"
                                "https://atcoder.jp/contests/abc122/tasks/abc122_d"
                                "https://atcoder.jp/contests/abc120/tasks/abc120_d"
                                "https://atcoder.jp/contests/abc119/tasks/abc119_c"
                                "https://atcoder.jp/contests/abc119/tasks/abc119_d"
                                "https://atcoder.jp/contests/abc117/tasks/abc117_d"
                                "https://atcoder.jp/contests/abc114/tasks/abc114_d"
                                "https://atcoder.jp/contests/abc113/tasks/abc113_d"
                                ))

  (with-current-buffer (get-buffer-create "atcoder-export")
    (org-mode)
    (dolist (url atcoder-1200-problems) (insert-atcoder-problem-as-org-entry url)))
#+end_src

#+results:
